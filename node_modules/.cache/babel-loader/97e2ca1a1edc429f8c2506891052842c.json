{"ast":null,"code":"/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport getStore from \"/home/arturs/scandiweb/scandipwa/src/util/Store\";\n/**\n * Update query params without adding to history\n * @param {String} name\n * @param {String} value\n * #namespace Util/Url/updateQueryParamWithoutHistory\n */\n\nexport const updateQueryParamWithoutHistory = Mosaic.middleware(function (name, value, history, location) {\n  const {\n    search,\n    pathname\n  } = location;\n  const params = new URLSearchParams(search);\n  params.set(name, value);\n  history.replace(decodeURIComponent(`${pathname}?${params}`));\n}, \"Util/Url/updateQueryParamWithoutHistory\");\n/**\n * Remove query param without adding to history\n * @param {String} name\n * #namespace Util/Url/removeQueryParamWithoutHistory\n */\n\nexport const removeQueryParamWithoutHistory = Mosaic.middleware(function (name, history, location) {\n  const {\n    search,\n    pathname\n  } = location;\n  const params = new URLSearchParams(search);\n  params.delete(name);\n  history.replace(decodeURIComponent(`${pathname}?${params}`));\n}, \"Util/Url/removeQueryParamWithoutHistory\");\n/**\n * Get query param from url\n * @param {Object} match match object from react-router\n * @param {Object} location location object from react-router\n * #namespace Util/Url/getUrlParam\n */\n\nexport const getUrlParam = Mosaic.middleware(function (match, location) {\n  const baseUrl = match.path.replace(window.storeRegexText, '').replace('/', '');\n  const currentUrl = location.pathname.replace(new RegExp(`^${window.storeRegexText}`, 'i'), '');\n\n  if (baseUrl === '/') {\n    return currentUrl.replace(baseUrl, '');\n  }\n\n  return currentUrl.replace(baseUrl, '').replace(/^\\/*/, '');\n}, \"Util/Url/getUrlParam\");\n/**\n * Append store code to URL\n * @param {String} pathname the URL to append store code to\n * #namespace Util/Url/appendWithStoreCode\n */\n\nexport const appendWithStoreCode = Mosaic.middleware(function (pathname) {\n  const {\n    ConfigReducer: {\n      base_link_url = window.location.origin\n    } = {}\n  } = getStore().getState() || {};\n  const {\n    pathname: storePrefix\n  } = new URL(base_link_url); // ignore empty URLs\n\n  if (!pathname) {\n    return pathname;\n  } // match URLs which have the store code in pathname\n\n\n  if (new RegExp(`^/(${window.storeList.join('|')})/`, 'i').test(pathname)) {\n    return pathname;\n  } // trim the last slash from URL, and append it to pathname\n\n\n  return storePrefix.slice(0, -1).concat(!pathname.startsWith('/') ? `/${pathname}` : pathname);\n}, \"Util/Url/appendWithStoreCode\");\n/**\n * Get query variable value (from react router)\n * @param {String} variable Variable from URL\n * @param {Object} variable location object from react-router\n * @return {String|false} Variable value\n * #namespace Util/Url/getQueryParam\n */\n\nexport const getQueryParam = Mosaic.middleware(function (variable, location) {\n  const query = location.search.substring(1);\n  const vars = query.split('&');\n  return vars.reduce(function (acc, item) {\n    const [k, v] = item.split('=');\n    return k === variable ? v : acc;\n  }, false);\n}, \"Util/Url/getQueryParam\");\n/**\n * Convert url params to object with key value pairs\n * @param {String} queryString url query string\n * @return {Object} Key-Value pairs\n * #namespace Util/Url/convertQueryStringToKeyValuePairs\n */\n\nexport const convertQueryStringToKeyValuePairs = Mosaic.middleware(function (queryString) {\n  const keyValuePairs = {};\n  const params = queryString.substring(1).split('&');\n  params.forEach(function (param) {\n    const pair = param.split('=');\n    const [keyPair, valuePair = []] = pair;\n\n    if (keyPair.length > 0 && valuePair.length > 0) {\n      keyValuePairs[keyPair] = decodeURIComponent(valuePair);\n    }\n  });\n  return keyValuePairs;\n}, \"Util/Url/convertQueryStringToKeyValuePairs\");\n/**\n * Update existing key value pairs and return result\n * @param {Object} keyValuePairs current key value pairs\n * @param {String} currentKey key of the value to be updated\n * @param {String} currentValue value to be updated\n * @return {Object} Key-Value pairs\n * #namespace Util/Url/updateKeyValuePairs\n */\n\nexport const updateKeyValuePairs = Mosaic.middleware(function (keyValuePairs, currentKey, currentValue) {\n  const updatedKeyValuePairs = {};\n  Object.entries(keyValuePairs).forEach(function (pair) {\n    const [key, value] = pair;\n\n    if (currentKey === key) {\n      updatedKeyValuePairs[key] = currentValue;\n    } else {\n      updatedKeyValuePairs[key] = value;\n    }\n  });\n  return updatedKeyValuePairs;\n}, \"Util/Url/updateKeyValuePairs\");\n/**\n * Convert object with key value pairs to url query string\n * @param {Object} keyValuePairs object with key value pairs\n * @return {String} Converted query string\n * #namespace Util/Url/convertKeyValuesToQueryString\n */\n\nexport const convertKeyValuesToQueryString = Mosaic.middleware(function (keyValuePairs) {\n  return Object.entries(keyValuePairs).map(function (pair) {\n    const [key, value] = pair;\n    const keyExists = key !== '';\n    const valueExists = typeof value === 'object' ? value.length : value !== '';\n\n    if (valueExists && keyExists) {\n      return `${key}=${value}`;\n    }\n\n    return null;\n  }).filter(function (x) {\n    return !!x;\n  }).join('&');\n}, \"Util/Url/convertKeyValuesToQueryString\");\n/** #namespace Util/Url/generateQuery */\n\nexport const generateQuery = Mosaic.middleware(function (keyValueObject, location, history) {\n  return Object.entries(keyValueObject).reduce(function (acc, pair) {\n    const [key, value] = pair;\n    const keyAndValueExist = !!key && !!value;\n\n    if (acc === '' && keyAndValueExist) {\n      return `?${key}=${value}`;\n    }\n\n    if (getQueryParam(key, location) !== false) {\n      const keyValuePairs = convertQueryStringToKeyValuePairs(acc);\n      const updatedKeyValuePairs = updateKeyValuePairs(keyValuePairs, key, value);\n      const updatedQuery = convertKeyValuesToQueryString(updatedKeyValuePairs);\n      return updatedQuery.length ? `?${updatedQuery}` : '';\n    }\n\n    if (keyAndValueExist) {\n      return `${acc}&${key}=${value}`;\n    }\n\n    return acc;\n  }, history.location.search);\n}, \"Util/Url/generateQuery\");\n/**\n * Set add key value pairs to url\n * @param {Object} variable Object with key value pairs to be added to url\n * @param {Object} variable location object from react-router\n * @param {Object} variable react router history object\n * @param {Object} variable is url flush required\n * #namespace Util/Url/setQueryParams\n */\n\nexport const setQueryParams = Mosaic.middleware(function (keyValueObject, location, history) {\n  const {\n    state\n  } = location;\n  const query = generateQuery(keyValueObject, location, history);\n  history.push({\n    search: query,\n    state\n  });\n}, \"Util/Url/setQueryParams\");\n/**\n * Remove all queries except default sort options from url\n * @param {Object} variable react router history object\n * #namespace Util/Url/clearQueriesFromUrl\n */\n\nexport const clearQueriesFromUrl = Mosaic.middleware(function (history) {\n  history.push({\n    search: ''\n  });\n}, \"Util/Url/clearQueriesFromUrl\");\n/**\n * Convert object with key value pairs to url query string\n * @param {Object} keyValuePairs object with key value pairs\n * @return {String} Converted query string\n * #namespace Util/Url/objectToUri\n */\n\nexport const objectToUri = Mosaic.middleware(function (keyValueObject = {}) {\n  const paramString = Object.entries(keyValueObject).sort().reduce(function (acc, [key, value]) {\n    return `${acc}&${key}=${value}`;\n  }, '').replace('&', '');\n  return paramString.length > 0 ? `?${paramString}` : '';\n}, \"Util/Url/objectToUri\");","map":{"version":3,"sources":["/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/util/Url/Url.js"],"names":["getStore","updateQueryParamWithoutHistory","name","value","history","location","search","pathname","params","URLSearchParams","set","replace","decodeURIComponent","removeQueryParamWithoutHistory","delete","getUrlParam","match","baseUrl","path","window","storeRegexText","currentUrl","RegExp","appendWithStoreCode","ConfigReducer","base_link_url","origin","getState","storePrefix","URL","storeList","join","test","slice","concat","startsWith","getQueryParam","variable","query","substring","vars","split","reduce","acc","item","k","v","convertQueryStringToKeyValuePairs","queryString","keyValuePairs","forEach","param","pair","keyPair","valuePair","length","updateKeyValuePairs","currentKey","currentValue","updatedKeyValuePairs","Object","entries","key","convertKeyValuesToQueryString","map","keyExists","valueExists","filter","x","generateQuery","keyValueObject","keyAndValueExist","updatedQuery","setQueryParams","state","push","clearQueriesFromUrl","objectToUri","paramString","sort"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport getStore from 'Util/Store';\n\n/**\n * Update query params without adding to history\n * @param {String} name\n * @param {String} value\n * @namespace Util/Url/updateQueryParamWithoutHistory\n */\nexport const updateQueryParamWithoutHistory = (name, value, history, location) => {\n    const { search, pathname } = location;\n\n    const params = new URLSearchParams(search);\n    params.set(name, value);\n    history.replace(decodeURIComponent(`${ pathname }?${ params }`));\n};\n\n/**\n * Remove query param without adding to history\n * @param {String} name\n * @namespace Util/Url/removeQueryParamWithoutHistory\n */\nexport const removeQueryParamWithoutHistory = (name, history, location) => {\n    const { search, pathname } = location;\n\n    const params = new URLSearchParams(search);\n    params.delete(name);\n    history.replace(decodeURIComponent(`${ pathname }?${ params }`));\n};\n\n/**\n * Get query param from url\n * @param {Object} match match object from react-router\n * @param {Object} location location object from react-router\n * @namespace Util/Url/getUrlParam\n */\nexport const getUrlParam = (match, location) => {\n    const baseUrl = match.path.replace(window.storeRegexText, '').replace('/', '');\n    const currentUrl = location.pathname.replace(new RegExp(`^${window.storeRegexText}`, 'i'), '');\n\n    if (baseUrl === '/') {\n        return currentUrl.replace(baseUrl, '');\n    }\n\n    return currentUrl.replace(baseUrl, '').replace(/^\\/*/, '');\n};\n\n/**\n * Append store code to URL\n * @param {String} pathname the URL to append store code to\n * @namespace Util/Url/appendWithStoreCode\n */\nexport const appendWithStoreCode = (pathname) => {\n    const { ConfigReducer: { base_link_url = window.location.origin } = {} } = getStore().getState() || {};\n    const { pathname: storePrefix } = new URL(base_link_url);\n\n    // ignore empty URLs\n    if (!pathname) {\n        return pathname;\n    }\n\n    // match URLs which have the store code in pathname\n    if (new RegExp(`^/(${window.storeList.join('|')})/`, 'i').test(pathname)) {\n        return pathname;\n    }\n\n    // trim the last slash from URL, and append it to pathname\n    return storePrefix.slice(0, -1).concat(\n        !pathname.startsWith('/') ? `/${ pathname }` : pathname\n    );\n};\n\n/**\n * Get query variable value (from react router)\n * @param {String} variable Variable from URL\n * @param {Object} variable location object from react-router\n * @return {String|false} Variable value\n * @namespace Util/Url/getQueryParam\n */\nexport const getQueryParam = (variable, location) => {\n    const query = location.search.substring(1);\n    const vars = query.split('&');\n\n    return vars.reduce((acc, item) => {\n        const [k, v] = item.split('=');\n        return k === variable ? v : acc;\n    }, false);\n};\n\n/**\n * Convert url params to object with key value pairs\n * @param {String} queryString url query string\n * @return {Object} Key-Value pairs\n * @namespace Util/Url/convertQueryStringToKeyValuePairs\n */\nexport const convertQueryStringToKeyValuePairs = (queryString) => {\n    const keyValuePairs = {};\n    const params = queryString.substring(1).split('&');\n\n    params.forEach((param) => {\n        const pair = param.split('=');\n        const [keyPair, valuePair = []] = pair;\n\n        if (keyPair.length > 0 && valuePair.length > 0) {\n            keyValuePairs[keyPair] = decodeURIComponent(valuePair);\n        }\n    });\n\n    return keyValuePairs;\n};\n\n/**\n * Update existing key value pairs and return result\n * @param {Object} keyValuePairs current key value pairs\n * @param {String} currentKey key of the value to be updated\n * @param {String} currentValue value to be updated\n * @return {Object} Key-Value pairs\n * @namespace Util/Url/updateKeyValuePairs\n */\nexport const updateKeyValuePairs = (keyValuePairs, currentKey, currentValue) => {\n    const updatedKeyValuePairs = {};\n\n    Object.entries(keyValuePairs).forEach((pair) => {\n        const [key, value] = pair;\n\n        if (currentKey === key) {\n            updatedKeyValuePairs[key] = currentValue;\n        } else {\n            updatedKeyValuePairs[key] = value;\n        }\n    });\n\n    return updatedKeyValuePairs;\n};\n\n/**\n * Convert object with key value pairs to url query string\n * @param {Object} keyValuePairs object with key value pairs\n * @return {String} Converted query string\n * @namespace Util/Url/convertKeyValuesToQueryString\n */\nexport const convertKeyValuesToQueryString = (keyValuePairs) => Object.entries(keyValuePairs)\n    .map((pair) => {\n        const [key, value] = pair;\n        const keyExists = key !== '';\n        const valueExists = typeof value === 'object' ? value.length : value !== '';\n\n        if (valueExists && keyExists) {\n            return `${key}=${value}`;\n        }\n\n        return null;\n    })\n    .filter((x) => !!x)\n    .join('&');\n\n/** @namespace Util/Url/generateQuery */\nexport const generateQuery = (keyValueObject, location, history) => Object.entries(keyValueObject)\n    .reduce((acc, pair) => {\n        const [key, value] = pair;\n\n        const keyAndValueExist = !!key && !!value;\n\n        if (acc === '' && keyAndValueExist) {\n            return `?${key}=${value}`;\n        }\n\n        if (getQueryParam(key, location) !== false) {\n            const keyValuePairs = convertQueryStringToKeyValuePairs(acc);\n            const updatedKeyValuePairs = updateKeyValuePairs(keyValuePairs, key, value);\n            const updatedQuery = convertKeyValuesToQueryString(updatedKeyValuePairs);\n\n            return updatedQuery.length ? `?${updatedQuery}` : '';\n        }\n\n        if (keyAndValueExist) {\n            return `${acc}&${key}=${value}`;\n        }\n\n        return acc;\n    }, history.location.search);\n\n/**\n * Set add key value pairs to url\n * @param {Object} variable Object with key value pairs to be added to url\n * @param {Object} variable location object from react-router\n * @param {Object} variable react router history object\n * @param {Object} variable is url flush required\n * @namespace Util/Url/setQueryParams\n */\nexport const setQueryParams = (keyValueObject, location, history) => {\n    const { state } = location;\n    const query = generateQuery(keyValueObject, location, history);\n\n    history.push({ search: query, state });\n};\n\n/**\n * Remove all queries except default sort options from url\n * @param {Object} variable react router history object\n * @namespace Util/Url/clearQueriesFromUrl\n */\nexport const clearQueriesFromUrl = (history) => {\n    history.push({ search: '' });\n};\n\n/**\n * Convert object with key value pairs to url query string\n * @param {Object} keyValuePairs object with key value pairs\n * @return {String} Converted query string\n * @namespace Util/Url/objectToUri\n */\nexport const objectToUri = (keyValueObject = {}) => {\n    const paramString = Object.entries(keyValueObject).sort()\n        .reduce((acc, [key, value]) => `${acc}&${key}=${value}`, '')\n        .replace('&', '');\n\n    return paramString.length > 0 ? `?${paramString}` : '';\n};\n"]},"metadata":{},"sourceType":"module"}