{"ast":null,"code":"/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport { MAX_NUMBER_OF_RECENT_PRODUCTS, RECENTLY_VIEWED_PRODUCTS } from \"/home/arturs/scandiweb/extension/src/component/RecentlyViewedWidget/RecentlyViewedWidget.config\";\nimport { ADD_RECENTLY_VIEWED_PRODUCT, UPDATE_RECENTLY_VIEWED_PRODUCTS } from \"/home/arturs/scandiweb/extension/src/store/RecentlyViewedProducts/RecentlyViewedProducts.action\";\nimport BrowserDatabase from \"/home/arturs/scandiweb/extension/src/util/BrowserDatabase\";\nimport { getIndexedProducts } from \"/home/arturs/scandiweb/extension/src/util/Product\";\n/** #namespace Store/RecentlyViewedProducts/Reducer/getInitialState */\n\nexport const getInitialState = Mosaic.middleware(function () {\n  return {\n    recentlyViewedProducts: BrowserDatabase.getItem(RECENTLY_VIEWED_PRODUCTS) || {},\n    shouldBeUpdated: true\n  };\n}, \"Store/RecentlyViewedProducts/Reducer/getInitialState\");\n/** #namespace Store/RecentlyViewedProducts/Reducer/recentlyViewedProductsReducer */\n\nexport const RecentlyViewedProductsReducer = Mosaic.middleware(_c = function (state = getInitialState(), action) {\n  var _recentlyViewedProduc;\n\n  switch (action.type) {\n    case ADD_RECENTLY_VIEWED_PRODUCT:\n      const {\n        product,\n        product: {\n          sku: newSku\n        }\n      } = action;\n      const {\n        recentlyViewedProducts = {}\n      } = state;\n      const {\n        store\n      } = action;\n      const storeProducts = (_recentlyViewedProduc = recentlyViewedProducts[store]) !== null && _recentlyViewedProduc !== void 0 ? _recentlyViewedProduc : [];\n\n      if (storeProducts.length === MAX_NUMBER_OF_RECENT_PRODUCTS) {\n        storeProducts.pop();\n      } // Remove product from existing recentProducts to add it later in the beginning\n\n\n      const newStoreRecentProducts = storeProducts.filter(function ({\n        sku\n      }) {\n        return newSku !== sku;\n      });\n      newStoreRecentProducts.unshift(product);\n      const newRecentProducts = { ...recentlyViewedProducts,\n        [store]: newStoreRecentProducts\n      };\n      BrowserDatabase.setItem(newRecentProducts, RECENTLY_VIEWED_PRODUCTS);\n      return { ...state,\n        recentlyViewedProducts: newRecentProducts,\n        shouldBeUpdated: true\n      };\n\n    case UPDATE_RECENTLY_VIEWED_PRODUCTS:\n      const {\n        products,\n        storeCode\n      } = action;\n      const {\n        recentlyViewedProducts: recent = {}\n      } = state;\n      const indexedProducts = getIndexedProducts(products);\n      const recentProductsFromStorage = BrowserDatabase.getItem(RECENTLY_VIEWED_PRODUCTS) || []; // Remove product from storage if it is not available\n\n      recentProductsFromStorage[storeCode] = recentProductsFromStorage[storeCode].filter(function (storageItem) {\n        return !indexedProducts.every(function (indexedItem) {\n          return indexedItem.id !== storageItem.id;\n        });\n      });\n      BrowserDatabase.setItem(recentProductsFromStorage, RECENTLY_VIEWED_PRODUCTS); // Sort products same as it is localstorage recentlyViewedProducts\n\n      const sortedRecentProducts = recentProductsFromStorage[storeCode].reduce(function (acc, {\n        sku\n      }) {\n        const sortedProduct = indexedProducts.find(function (item) {\n          return item.sku === sku;\n        });\n        return [...acc, sortedProduct];\n      }, []);\n      const updatedRecentViewedProducts = { ...recent,\n        [storeCode]: sortedRecentProducts\n      };\n      return { ...state,\n        recentlyViewedProducts: updatedRecentViewedProducts,\n        shouldBeUpdated: false\n      };\n\n    default:\n      return state;\n  }\n}, \"Store/RecentlyViewedProducts/Reducer/recentlyViewedProductsReducer\");\n_c2 = RecentlyViewedProductsReducer;\nexport default RecentlyViewedProductsReducer;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RecentlyViewedProductsReducer$\");\n$RefreshReg$(_c2, \"RecentlyViewedProductsReducer\");","map":{"version":3,"sources":["/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/store/RecentlyViewedProducts/RecentlyViewedProducts.reducer.js"],"names":["MAX_NUMBER_OF_RECENT_PRODUCTS","RECENTLY_VIEWED_PRODUCTS","ADD_RECENTLY_VIEWED_PRODUCT","UPDATE_RECENTLY_VIEWED_PRODUCTS","BrowserDatabase","getIndexedProducts","getInitialState","recentlyViewedProducts","getItem","shouldBeUpdated","RecentlyViewedProductsReducer","state","action","type","product","sku","newSku","store","storeProducts","length","pop","newStoreRecentProducts","filter","unshift","newRecentProducts","setItem","products","storeCode","recent","indexedProducts","recentProductsFromStorage","storageItem","every","indexedItem","id","sortedRecentProducts","reduce","acc","sortedProduct","find","item","updatedRecentViewedProducts"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport {\n    MAX_NUMBER_OF_RECENT_PRODUCTS,\n    RECENTLY_VIEWED_PRODUCTS\n} from 'Component/RecentlyViewedWidget/RecentlyViewedWidget.config';\nimport {\n    ADD_RECENTLY_VIEWED_PRODUCT,\n    UPDATE_RECENTLY_VIEWED_PRODUCTS\n} from 'Store/RecentlyViewedProducts/RecentlyViewedProducts.action';\nimport BrowserDatabase from 'Util/BrowserDatabase';\nimport { getIndexedProducts } from 'Util/Product';\n\n/** @namespace Store/RecentlyViewedProducts/Reducer/getInitialState */\nexport const getInitialState = () => ({\n    recentlyViewedProducts: BrowserDatabase.getItem(RECENTLY_VIEWED_PRODUCTS) || {},\n    shouldBeUpdated: true\n});\n\n/** @namespace Store/RecentlyViewedProducts/Reducer/recentlyViewedProductsReducer */\nexport const RecentlyViewedProductsReducer = (\n    state = getInitialState(),\n    action\n) => {\n    switch (action.type) {\n    case ADD_RECENTLY_VIEWED_PRODUCT:\n        const {\n            product,\n            product: { sku: newSku }\n        } = action;\n\n        const { recentlyViewedProducts = {} } = state;\n        const { store } = action;\n        const storeProducts = recentlyViewedProducts[store] ?? [];\n\n        if (storeProducts.length === MAX_NUMBER_OF_RECENT_PRODUCTS) {\n            storeProducts.pop();\n        }\n\n        // Remove product from existing recentProducts to add it later in the beginning\n        const newStoreRecentProducts = storeProducts.filter(({ sku }) => (newSku !== sku));\n        newStoreRecentProducts.unshift(product);\n\n        const newRecentProducts = {\n            ...recentlyViewedProducts,\n            [store]: newStoreRecentProducts\n        };\n\n        BrowserDatabase.setItem(newRecentProducts, RECENTLY_VIEWED_PRODUCTS);\n\n        return {\n            ...state,\n            recentlyViewedProducts: newRecentProducts,\n            shouldBeUpdated: true\n        };\n\n    case UPDATE_RECENTLY_VIEWED_PRODUCTS:\n        const {\n            products,\n            storeCode\n        } = action;\n        const { recentlyViewedProducts: recent = {} } = state;\n\n        const indexedProducts = getIndexedProducts(products);\n        const recentProductsFromStorage = BrowserDatabase.getItem(RECENTLY_VIEWED_PRODUCTS) || [];\n\n        // Remove product from storage if it is not available\n        recentProductsFromStorage[storeCode] = recentProductsFromStorage[storeCode]\n            .filter((storageItem) => !indexedProducts.every((indexedItem) => indexedItem.id !== storageItem.id));\n\n        BrowserDatabase.setItem(recentProductsFromStorage, RECENTLY_VIEWED_PRODUCTS);\n\n        // Sort products same as it is localstorage recentlyViewedProducts\n        const sortedRecentProducts = recentProductsFromStorage[storeCode].reduce((acc, { sku }) => {\n            const sortedProduct = indexedProducts.find((item) => item.sku === sku);\n\n            return [...acc, sortedProduct];\n        }, []);\n\n        const updatedRecentViewedProducts = {\n            ...recent,\n            [storeCode]: sortedRecentProducts\n        };\n\n        return {\n            ...state,\n            recentlyViewedProducts: updatedRecentViewedProducts,\n            shouldBeUpdated: false\n        };\n    default:\n        return state;\n    }\n};\n\nexport default RecentlyViewedProductsReducer;\n"]},"metadata":{},"sourceType":"module"}