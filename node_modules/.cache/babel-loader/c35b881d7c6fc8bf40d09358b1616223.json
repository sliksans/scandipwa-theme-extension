{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/component/Popup/Popup.component.js\";\n\n/* eslint-disable react/no-unused-prop-types */\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { createPortal } from 'react-dom';\nimport ClickOutside from \"/home/arturs/scandiweb/extension/src/component/ClickOutside\";\nimport Overlay from \"/home/arturs/scandiweb/extension/src/component/Overlay/Overlay.component\";\nimport { ESCAPE_KEY } from \"./Popup.config\";\nimport \"./Popup.style\";\n/** #namespace Component/Popup/Component */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const Popup = Mosaic.middleware((_temp = _class = class Popup_ extends Mosaic.Extensible(Overlay) {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n\n    this.hidePopUp = function () {\n      const {\n        hideActiveOverlay,\n        goToPreviousNavigationState,\n        onClose\n      } = _this.props;\n\n      const isVisible = _this.getIsVisible();\n\n      if (isVisible) {\n        _this.unfreezeScroll();\n\n        hideActiveOverlay();\n        goToPreviousNavigationState();\n        onClose();\n      }\n    };\n\n    this.handleClickOutside = function () {\n      const {\n        clickOutside\n      } = _this.props;\n\n      if (!clickOutside) {\n        return;\n      }\n\n      _this.hidePopUp();\n    };\n\n    this.handleKeyDown = function (e) {\n      switch (e.keyCode) {\n        case ESCAPE_KEY:\n          _this.hidePopUp();\n\n          break;\n\n        default:\n          break;\n      }\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      shouldPopupClose,\n      resetHideActivePopup\n    } = this.props;\n    const {\n      shouldPopupClose: prevShouldPopupClose\n    } = prevProps;\n\n    if (shouldPopupClose && shouldPopupClose !== prevShouldPopupClose) {\n      this.hidePopUp();\n      resetHideActivePopup();\n    }\n\n    super.componentDidUpdate(prevProps);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  onVisible() {\n    const {\n      onVisible\n    } = this.props;\n    this.freezeScroll();\n    this.overlayRef.current.focus();\n    window.addEventListener('popstate', this.hidePopUp);\n    window.history.pushState({\n      popupOpen: true\n    }, '', location.pathname);\n    onVisible();\n  }\n\n  onHide() {\n    const {\n      onHide\n    } = this.props;\n    window.removeEventListener('popstate', this.hidePopUp);\n    this.unfreezeScroll();\n    onHide();\n  }\n\n  renderTitle() {\n    const {\n      title\n    } = this.props;\n\n    if (!title) {\n      return null;\n    }\n\n    return /*#__PURE__*/_checkBEM(React, \"h3\", {\n      block: \"Popup\",\n      elem: \"Heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }, title);\n  }\n\n  renderCloseButton() {\n    return /*#__PURE__*/_checkBEM(React, \"button\", {\n      block: \"Popup\",\n      elem: \"CloseBtn\",\n      \"aria-label\": __('Close'),\n      onClick: this.hidePopUp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }\n    });\n  }\n\n  renderContent() {\n    const {\n      children,\n      contentMix\n    } = this.props;\n    const isVisible = this.getIsVisible();\n\n    if (!isVisible) {\n      return null;\n    }\n\n    return /*#__PURE__*/_checkBEM(React, ClickOutside, {\n      onClick: this.handleClickOutside,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: \"Popup\",\n      elem: \"Content\",\n      mix: contentMix,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/_checkBEM(React, \"header\", {\n      block: \"Popup\",\n      elem: \"Header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }\n    }, this.renderTitle(), this.renderCloseButton()), children));\n  }\n\n  render() {\n    const {\n      mix,\n      areOtherOverlaysOpen\n    } = this.props;\n    const isVisible = this.getIsVisible();\n    return /*#__PURE__*/createPortal( /*#__PURE__*/_checkBEM(React, \"div\", {\n      ref: this.overlayRef,\n      block: \"Popup\",\n      mods: {\n        isVisible,\n        isInstant: areOtherOverlaysOpen\n      },\n      mix: { ...mix,\n        mods: { ...mix.mods,\n          isVisible\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }\n    }, this.renderContent()), document.body);\n  }\n\n}, _class.propTypes = { ...Overlay.propTypes,\n  clickOutside: PropTypes.bool,\n  title: PropTypes.string\n}, _class.defaultProps = { ...Overlay.defaultProps,\n  clickOutside: true,\n  title: ''\n}, _temp), \"Component/Popup/Component\");\nexport default Popup;","map":{"version":3,"sources":["/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/component/Popup/Popup.component.js"],"names":["PropTypes","createPortal","ClickOutside","Overlay","ESCAPE_KEY","hidePopUp","hideActiveOverlay","goToPreviousNavigationState","onClose","props","isVisible","getIsVisible","unfreezeScroll","handleClickOutside","clickOutside","handleKeyDown","e","keyCode","componentDidMount","document","addEventListener","componentDidUpdate","prevProps","shouldPopupClose","resetHideActivePopup","prevShouldPopupClose","componentWillUnmount","removeEventListener","onVisible","freezeScroll","overlayRef","current","focus","window","history","pushState","popupOpen","location","pathname","onHide","renderTitle","title","renderCloseButton","__","renderContent","children","contentMix","render","mix","areOtherOverlaysOpen","isInstant","mods","body","propTypes","bool","string","defaultProps","Popup"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-unused-prop-types */\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { createPortal } from 'react-dom';\n\nimport ClickOutside from 'Component/ClickOutside';\nimport Overlay from 'Component/Overlay/Overlay.component';\n\nimport { ESCAPE_KEY } from './Popup.config';\n\nimport './Popup.style';\n\n/** @namespace Component/Popup/Component */\nexport class Popup extends Overlay {\n    static propTypes = {\n        ...Overlay.propTypes,\n        clickOutside: PropTypes.bool,\n        title: PropTypes.string\n    };\n\n    static defaultProps = {\n        ...Overlay.defaultProps,\n        clickOutside: true,\n        title: ''\n    };\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyDown);\n    }\n\n    componentDidUpdate(prevProps) {\n        const { shouldPopupClose, resetHideActivePopup } = this.props;\n        const { shouldPopupClose: prevShouldPopupClose } = prevProps;\n\n        if (shouldPopupClose && shouldPopupClose !== prevShouldPopupClose) {\n            this.hidePopUp();\n            resetHideActivePopup();\n        }\n\n        super.componentDidUpdate(prevProps);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeyDown);\n    }\n\n    onVisible() {\n        const { onVisible } = this.props;\n\n        this.freezeScroll();\n        this.overlayRef.current.focus();\n\n        window.addEventListener('popstate', this.hidePopUp);\n\n        window.history.pushState(\n            {\n                popupOpen: true\n            },\n            '',\n            location.pathname\n        );\n\n        onVisible();\n    }\n\n    onHide() {\n        const { onHide } = this.props;\n        window.removeEventListener('popstate', this.hidePopUp);\n\n        this.unfreezeScroll();\n\n        onHide();\n    }\n\n    hidePopUp = () => {\n        const { hideActiveOverlay, goToPreviousNavigationState, onClose } = this.props;\n        const isVisible = this.getIsVisible();\n        if (isVisible) {\n            this.unfreezeScroll();\n            hideActiveOverlay();\n            goToPreviousNavigationState();\n            onClose();\n        }\n    };\n\n    // Same with click outside\n    handleClickOutside = () => {\n        const { clickOutside } = this.props;\n        if (!clickOutside) {\n            return;\n        }\n        this.hidePopUp();\n    };\n\n    handleKeyDown = (e) => {\n        switch (e.keyCode) {\n        case ESCAPE_KEY:\n            this.hidePopUp();\n            break;\n        default:\n            break;\n        }\n    };\n\n    renderTitle() {\n        const { title } = this.props;\n        if (!title) {\n            return null;\n        }\n\n        return (\n            <h3 block=\"Popup\" elem=\"Heading\">\n                { title }\n            </h3>\n        );\n    }\n\n    renderCloseButton() {\n        return (\n            <button\n              block=\"Popup\"\n              elem=\"CloseBtn\"\n              aria-label={ __('Close') }\n              onClick={ this.hidePopUp }\n            />\n        );\n    }\n\n    renderContent() {\n        const { children, contentMix } = this.props;\n        const isVisible = this.getIsVisible();\n\n        if (!isVisible) {\n            return null;\n        }\n\n        return (\n            <ClickOutside onClick={ this.handleClickOutside }>\n                <div block=\"Popup\" elem=\"Content\" mix={ contentMix }>\n                    <header block=\"Popup\" elem=\"Header\">\n                        { this.renderTitle() }\n                        { this.renderCloseButton() }\n                    </header>\n                    { children }\n                </div>\n            </ClickOutside>\n        );\n    }\n\n    render() {\n        const { mix, areOtherOverlaysOpen } = this.props;\n        const isVisible = this.getIsVisible();\n\n        return createPortal(\n            <div\n              ref={ this.overlayRef }\n              block=\"Popup\"\n              mods={ { isVisible, isInstant: areOtherOverlaysOpen } }\n              mix={ { ...mix, mods: { ...mix.mods, isVisible } } }\n            >\n                { this.renderContent() }\n            </div>,\n            document.body\n        );\n    }\n}\n\nexport default Popup;\n"]},"metadata":{},"sourceType":"module"}