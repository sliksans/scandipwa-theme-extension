{"ast":null,"code":"/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport UrlRewritesQuery from \"/home/arturs/scandiweb/extension/src/query/UrlRewrites.query\";\nimport { showNotification } from \"/home/arturs/scandiweb/extension/src/store/Notification/Notification.action\";\nimport { setIsUrlRewritesLoading, updateUrlRewrite } from \"/home/arturs/scandiweb/extension/src/store/UrlRewrites/UrlRewrites.action\";\nimport { QueryDispatcher } from \"/home/arturs/scandiweb/extension/src/util/Request\";\n/**\n * Url Rewrite Dispathcer\n * @class UrlRewritesDispatcher\n * @extends RequestDispatcher\n * #namespace Store/UrlRewrites/Dispatcher\n */\n\nexport const UrlRewritesDispatcher = Mosaic.middleware(class UrlRewritesDispatcher_ extends Mosaic.Extensible(QueryDispatcher) {\n  __construct() {\n    super.__construct('UrlRewrites');\n  }\n\n  onSuccess({\n    urlResolver\n  }, dispatch, {\n    urlParam\n  }) {\n    dispatch(updateUrlRewrite(urlResolver || {\n      notFound: true\n    }, urlParam));\n  }\n\n  onError(error, dispatch) {\n    dispatch(setIsUrlRewritesLoading(false));\n    dispatch(showNotification('error', __('Error fetching URL-rewrites!'), error));\n  }\n  /**\n   * Prepare UrlRewrite requests\n   * @param {Object} options A object containing different aspects of query, each item can be omitted\n   * @return {Query} UrlRewrite query\n   * @memberof UrlRewritesDispatcher\n   */\n\n\n  prepareRequest(options, dispatch) {\n    dispatch(setIsUrlRewritesLoading(true));\n    return [UrlRewritesQuery.getQuery(this.processUrlOptions(options))];\n  }\n\n  processUrlOptions(options) {\n    const {\n      urlParam\n    } = options; // FAILSAFE: Trim index.php if someone forgot to set \"Use Web Server Rewrites\" to \"Yes\"\n\n    const trimmedParam = urlParam.replace('index.php/', '');\n    return { ...options,\n      urlParam: trimmedParam.replace(new RegExp(window.storeRegexText), '')\n    };\n  }\n\n}, \"Store/UrlRewrites/Dispatcher\");\nexport default new UrlRewritesDispatcher();","map":{"version":3,"sources":["/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/store/UrlRewrites/UrlRewrites.dispatcher.js"],"names":["UrlRewritesQuery","showNotification","setIsUrlRewritesLoading","updateUrlRewrite","QueryDispatcher","__construct","onSuccess","urlResolver","dispatch","urlParam","notFound","onError","error","__","prepareRequest","options","getQuery","processUrlOptions","trimmedParam","replace","RegExp","window","storeRegexText","UrlRewritesDispatcher"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,gBAAP;AACA,SAASC,gBAAT;AACA,SAASC,uBAAT,EAAkCC,gBAAlC;AACA,SAASC,eAAT;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,8GAA2CA,eAA3C,EAA2D;AACvDC,EAAAA,WAAW,GAAG;AACV,UAAMA,WAAN,CAAkB,aAAlB;AACH;;AAEDC,EAAAA,SAAS,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAkBC,QAAlB,EAA4B;AAAEC,IAAAA;AAAF,GAA5B,EAA0C;AAC/CD,IAAAA,QAAQ,CAACL,gBAAgB,CAACI,WAAW,IAAI;AAAEG,MAAAA,QAAQ,EAAE;AAAZ,KAAhB,EAAoCD,QAApC,CAAjB,CAAR;AACH;;AAEDE,EAAAA,OAAO,CAACC,KAAD,EAAQJ,QAAR,EAAkB;AACrBA,IAAAA,QAAQ,CAACN,uBAAuB,CAAC,KAAD,CAAxB,CAAR;AACAM,IAAAA,QAAQ,CAACP,gBAAgB,CAAC,OAAD,EAAUY,EAAE,CAAC,8BAAD,CAAZ,EAA8CD,KAA9C,CAAjB,CAAR;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,cAAc,CAACC,OAAD,EAAUP,QAAV,EAAoB;AAC9BA,IAAAA,QAAQ,CAACN,uBAAuB,CAAC,IAAD,CAAxB,CAAR;AAEA,WAAO,CACHF,gBAAgB,CAACgB,QAAjB,CAA0B,KAAKC,iBAAL,CAAuBF,OAAvB,CAA1B,CADG,CAAP;AAGH;;AAEDE,EAAAA,iBAAiB,CAACF,OAAD,EAAU;AACvB,UAAM;AAAEN,MAAAA;AAAF,QAAeM,OAArB,CADuB,CAGvB;;AACA,UAAMG,YAAY,GAAGT,QAAQ,CAACU,OAAT,CAAiB,YAAjB,EAA+B,EAA/B,CAArB;AAEA,WAAO,EACH,GAAGJ,OADA;AAEHN,MAAAA,QAAQ,EAAES,YAAY,CAACC,OAAb,CAAqB,IAAIC,MAAJ,CAAWC,MAAM,CAACC,cAAlB,CAArB,EAAwD,EAAxD;AAFP,KAAP;AAIH;;AAtCsD,CAA3D;AAyCA,eAAe,IAAIC,qBAAJ,EAAf","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport UrlRewritesQuery from 'Query/UrlRewrites.query';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { setIsUrlRewritesLoading, updateUrlRewrite } from 'Store/UrlRewrites/UrlRewrites.action';\nimport { QueryDispatcher } from 'Util/Request';\n\n/**\n * Url Rewrite Dispathcer\n * @class UrlRewritesDispatcher\n * @extends RequestDispatcher\n * @namespace Store/UrlRewrites/Dispatcher\n */\nexport class UrlRewritesDispatcher extends QueryDispatcher {\n    __construct() {\n        super.__construct('UrlRewrites');\n    }\n\n    onSuccess({ urlResolver }, dispatch, { urlParam }) {\n        dispatch(updateUrlRewrite(urlResolver || { notFound: true }, urlParam));\n    }\n\n    onError(error, dispatch) {\n        dispatch(setIsUrlRewritesLoading(false));\n        dispatch(showNotification('error', __('Error fetching URL-rewrites!'), error));\n    }\n\n    /**\n     * Prepare UrlRewrite requests\n     * @param {Object} options A object containing different aspects of query, each item can be omitted\n     * @return {Query} UrlRewrite query\n     * @memberof UrlRewritesDispatcher\n     */\n    prepareRequest(options, dispatch) {\n        dispatch(setIsUrlRewritesLoading(true));\n\n        return [\n            UrlRewritesQuery.getQuery(this.processUrlOptions(options))\n        ];\n    }\n\n    processUrlOptions(options) {\n        const { urlParam } = options;\n\n        // FAILSAFE: Trim index.php if someone forgot to set \"Use Web Server Rewrites\" to \"Yes\"\n        const trimmedParam = urlParam.replace('index.php/', '');\n\n        return {\n            ...options,\n            urlParam: trimmedParam.replace(new RegExp(window.storeRegexText), '')\n        };\n    }\n}\n\nexport default new UrlRewritesDispatcher();\n"]},"metadata":{},"sourceType":"module"}