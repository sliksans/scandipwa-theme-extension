{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/component/OfflineNotice/OfflineNotice.container.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport { setBigOfflineNotice, showOfflineNotice } from \"/home/arturs/scandiweb/scandipwa/src/store/Offline/Offline.action\";\nimport { LocationType } from \"/home/arturs/scandiweb/scandipwa/src/type/Common\";\nimport OfflineNotice from \"./OfflineNotice.component\";\n/** #namespace Component/OfflineNotice/Container/mapStateToProps */\n\nexport const mapStateToProps = Mosaic.middleware(function (state) {\n  return {\n    isOffline: state.OfflineReducer.isOffline,\n    isBig: state.OfflineReducer.isBig\n  };\n}, \"Component/OfflineNotice/Container/mapStateToProps\");\n/** #namespace Component/OfflineNotice/Container/mapDispatchToProps */\n\nexport const mapDispatchToProps = Mosaic.middleware(function (dispatch) {\n  return {\n    showOfflineNotice: function (isOffline) {\n      return dispatch(showOfflineNotice(isOffline));\n    },\n    setBigOfflineNotice: function (isBig) {\n      return dispatch(setBigOfflineNotice(isBig));\n    }\n  };\n}, \"Component/OfflineNotice/Container/mapDispatchToProps\");\n/** #namespace Component/OfflineNotice/Container */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const OfflineNoticeContainer = Mosaic.middleware((_temp = _class = class OfflineNoticeContainer_ extends Mosaic.Extensible(PureComponent) {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n\n    this.handleNetworkChange = function () {\n      const {\n        isBig,\n        showOfflineNotice,\n        setBigOfflineNotice\n      } = _this.props;\n\n      if (navigator.onLine) {\n        document.documentElement.classList.remove('offline');\n        showOfflineNotice(false);\n      } else {\n        document.documentElement.classList.add('offline');\n        showOfflineNotice(true);\n\n        if (isBig) {\n          setBigOfflineNotice(false);\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    const {\n      isPage\n    } = this.props;\n\n    if (!isPage) {\n      this.handleNetworkChange();\n      window.addEventListener('online', this.handleNetworkChange);\n      window.addEventListener('offline', this.handleNetworkChange);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      location: {\n        pathname\n      },\n      isBig,\n      setBigOfflineNotice\n    } = this.props;\n    const {\n      isBig: prevIsBig,\n      location: {\n        pathname: prevPathname\n      }\n    } = prevProps;\n\n    if (isBig !== prevIsBig && !navigator.onLine) {\n      if (isBig) {\n        document.documentElement.classList.add('bigOffline');\n      } else {\n        document.documentElement.classList.remove('bigOffline');\n      }\n    }\n\n    if (pathname !== prevPathname) {\n      if (isBig) {\n        setBigOfflineNotice(false);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      isPage\n    } = this.props;\n\n    if (!isPage) {\n      window.removeEventListener('online', this.handleNetworkChange);\n      window.removeEventListener('offline', this.handleNetworkChange);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_checkBEM(React, OfflineNotice, Object.assign({}, this.props, this.containerFunctions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}, _class.propTypes = {\n  setBigOfflineNotice: PropTypes.func.isRequired,\n  showOfflineNotice: PropTypes.func.isRequired,\n  location: LocationType.isRequired,\n  isBig: PropTypes.bool.isRequired,\n  isPage: PropTypes.bool\n}, _class.defaultProps = {\n  isPage: false\n}, _temp), \"Component/OfflineNotice/Container\");\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(OfflineNoticeContainer));","map":{"version":3,"sources":["/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/component/OfflineNotice/OfflineNotice.container.js"],"names":["PropTypes","PureComponent","connect","withRouter","setBigOfflineNotice","showOfflineNotice","LocationType","OfflineNotice","mapStateToProps","state","isOffline","OfflineReducer","isBig","mapDispatchToProps","dispatch","handleNetworkChange","props","navigator","onLine","document","documentElement","classList","remove","add","componentDidMount","isPage","window","addEventListener","componentDidUpdate","prevProps","location","pathname","prevIsBig","prevPathname","componentWillUnmount","removeEventListener","render","containerFunctions","propTypes","func","isRequired","bool","defaultProps","OfflineNoticeContainer"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\n\nimport { setBigOfflineNotice, showOfflineNotice } from 'Store/Offline/Offline.action';\nimport { LocationType } from 'Type/Common';\n\nimport OfflineNotice from './OfflineNotice.component';\n\n/** @namespace Component/OfflineNotice/Container/mapStateToProps */\nexport const mapStateToProps = (state) => ({\n    isOffline: state.OfflineReducer.isOffline,\n    isBig: state.OfflineReducer.isBig\n});\n\n/** @namespace Component/OfflineNotice/Container/mapDispatchToProps */\nexport const mapDispatchToProps = (dispatch) => ({\n    showOfflineNotice: (isOffline) => dispatch(showOfflineNotice(isOffline)),\n    setBigOfflineNotice: (isBig) => dispatch(setBigOfflineNotice(isBig))\n});\n\n/** @namespace Component/OfflineNotice/Container */\nexport class OfflineNoticeContainer extends PureComponent {\n    static propTypes = {\n        setBigOfflineNotice: PropTypes.func.isRequired,\n        showOfflineNotice: PropTypes.func.isRequired,\n        location: LocationType.isRequired,\n        isBig: PropTypes.bool.isRequired,\n        isPage: PropTypes.bool\n    };\n\n    static defaultProps = {\n        isPage: false\n    };\n\n    componentDidMount() {\n        const { isPage } = this.props;\n\n        if (!isPage) {\n            this.handleNetworkChange();\n            window.addEventListener('online', this.handleNetworkChange);\n            window.addEventListener('offline', this.handleNetworkChange);\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        const {\n            location: { pathname },\n            isBig,\n            setBigOfflineNotice\n        } = this.props;\n\n        const {\n            isBig: prevIsBig,\n            location: { pathname: prevPathname }\n        } = prevProps;\n\n        if (isBig !== prevIsBig && !navigator.onLine) {\n            if (isBig) {\n                document.documentElement.classList.add('bigOffline');\n            } else {\n                document.documentElement.classList.remove('bigOffline');\n            }\n        }\n\n        if (pathname !== prevPathname) {\n            if (isBig) {\n                setBigOfflineNotice(false);\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        const { isPage } = this.props;\n\n        if (!isPage) {\n            window.removeEventListener('online', this.handleNetworkChange);\n            window.removeEventListener('offline', this.handleNetworkChange);\n        }\n    }\n\n    handleNetworkChange = () => {\n        const {\n            isBig,\n            showOfflineNotice,\n            setBigOfflineNotice\n        } = this.props;\n\n        if (navigator.onLine) {\n            document.documentElement.classList.remove('offline');\n            showOfflineNotice(false);\n        } else {\n            document.documentElement.classList.add('offline');\n            showOfflineNotice(true);\n            if (isBig) {\n                setBigOfflineNotice(false);\n            }\n        }\n    };\n\n    render() {\n        return (\n            <OfflineNotice\n              { ...this.props }\n              { ...this.containerFunctions }\n            />\n        );\n    }\n}\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(OfflineNoticeContainer)\n);\n"]},"metadata":{},"sourceType":"module"}