{"ast":null,"code":"/* eslint-disable no-unused-vars */\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport { makeCancelable } from \"/home/arturs/scandiweb/scandipwa/src/util/Promise\";\nimport { Field, prepareQuery } from \"/home/arturs/scandiweb/scandipwa/src/util/Query\";\nimport { executeGet, listenForBroadCast } from \"/home/arturs/scandiweb/scandipwa/src/util/Request/Request\";\nexport const ONE_MONTH_IN_SECONDS = 2592000;\nexport const FIVE_MINUTES_IN_SECONDS = 300;\n/**\n * Abstract request dispatcher.\n * IMPORTANT: it is required to implement `prepareRequest(options)` before using!\n * @class QueryDispatcher\n * #namespace Util/Request/QueryDispatcher\n */\n\nexport const QueryDispatcher = Mosaic.middleware(class QueryDispatcher_ extends Mosaic.Extensible() {\n  /**\n   * Creates an instance of QueryDispatcher.\n   * @param  {String} name Name of model for ServiceWorker to send BroadCasts updates to\n   * @param  {Number} cacheTTL Cache TTL (in seconds) for ServiceWorker to cache responses\n   * @memberof QueryDispatcher\n   */\n  __construct(name, cacheTTL = ONE_MONTH_IN_SECONDS) {\n    super.__construct();\n\n    this.name = name;\n    this.cacheTTL = cacheTTL;\n    this.promise = null;\n  }\n  /**\n   * Is responsible for request routing and manages `onError`, `onSuccess`, `onUpdate` functions triggers.\n   * @param  {Function} dispatch Store changing function from Redux (dispatches actions)\n   * @param  {any} options Any options received from Container\n   * @return {void}@memberof QueryDispatcher\n   */\n\n\n  handleData(dispatch, options) {\n    var _this = this;\n\n    const {\n      name,\n      cacheTTL\n    } = this;\n    const rawQueries = this.prepareRequest(options, dispatch);\n\n    if (!rawQueries) {\n      return;\n    }\n\n    const queries = rawQueries instanceof Field ? [rawQueries] : rawQueries;\n\n    if (this.promise) {\n      this.promise.cancel();\n    }\n\n    this.promise = makeCancelable(new Promise(function (resolve, reject) {\n      executeGet(prepareQuery(queries), name, cacheTTL).then(\n      /** #namespace Util/Request/QueryDispatcher/handleData/executeGetThen */\n      Mosaic.middleware(function (data) {\n        return resolve(data);\n      }, \"Util/Request/QueryDispatcher/handleData/executeGetThen\"),\n      /** #namespace Util/Request/QueryDispatcher/handleData/executeGetError */\n      Mosaic.middleware(function (error) {\n        return reject(error);\n      }, \"Util/Request/QueryDispatcher/handleData/executeGetError\"));\n    }));\n    this.promise.promise.then(\n    /** #namespace Util/Request/QueryDispatcher/handleData/thisPromisePromiseThen */\n    Mosaic.middleware(function (data) {\n      return _this.onSuccess(data, dispatch, options);\n    }, \"Util/Request/QueryDispatcher/handleData/thisPromisePromiseThen\"),\n    /** #namespace Util/Request/QueryDispatcher/handleData/thisPromisePromiseError */\n    Mosaic.middleware(function (error) {\n      return _this.onError(error, dispatch, options);\n    }, \"Util/Request/QueryDispatcher/handleData/thisPromisePromiseError\"));\n    listenForBroadCast(name).then(\n    /** #namespace Util/Request/QueryDispatcher/handleData/listenForBroadCastThen */\n    Mosaic.middleware(function (data) {\n      return _this.onUpdate(data, dispatch, options);\n    }, \"Util/Request/QueryDispatcher/handleData/listenForBroadCastThen\"));\n  }\n  /**\n   * Is triggered by BroadCast updated from ServiceWorker.\n   * Should dispatch some action.\n   * @param  {any} data Data received from fetch of GraphQL endpoint\n   * @param  {Function} dispatch Store changing function from Redux (dispatches actions)\n   * @return {void}\n   * @memberof QueryDispatcher\n   */\n\n\n  onUpdate(data, dispatch, options) {\n    this.onSuccess(data, dispatch, options);\n  }\n  /**\n   * Is responsible for request building (request & mutation preparation)\n   * @param  {any} options Any options received from Container\n   * @param {Function} dispatch\n   * @return {Array<Field>|Field} Array or single item of Field instances\n   * @memberof QueryDispatcher\n   */\n\n\n  prepareRequest(options, dispatch) {}\n  /**\n   * Is triggered on successful fetch of GraphQL endpoint.\n   * IMPORTANT: If there are any errors in response (`errors` field in JSON response from GraphQL), this function won't trigger!\n   * Should dispatch some action.\n   * @param  {any} data\n   * @param  {any} dispatch\n   * @return {void}@memberof QueryDispatcher\n   */\n\n\n  onSuccess(data, dispatch) {}\n  /**\n   * Is triggered on error in fetch of GraphQL endpoint.\n   * IMPORTANT: If there are any errors in response (`errors` field in JSON response from GraphQL), this function will trigger!\n   * Should dispatch some action.\n   * @param  {any} error\n   * @param  {any} dispatch\n   * @return {void}@memberof QueryDispatcher\n   */\n\n\n  onError(error, dispatch) {}\n\n}, \"Util/Request/QueryDispatcher\");\nexport default QueryDispatcher;","map":{"version":3,"sources":["/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/util/Request/QueryDispatcher.js"],"names":["makeCancelable","Field","prepareQuery","executeGet","listenForBroadCast","ONE_MONTH_IN_SECONDS","FIVE_MINUTES_IN_SECONDS","__construct","name","cacheTTL","promise","handleData","dispatch","options","rawQueries","prepareRequest","queries","cancel","Promise","resolve","reject","then","data","error","onSuccess","onError","onUpdate","QueryDispatcher"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport { makeCancelable } from 'Util/Promise';\nimport { Field, prepareQuery } from 'Util/Query';\nimport { executeGet, listenForBroadCast } from 'Util/Request/Request';\n\nexport const ONE_MONTH_IN_SECONDS = 2592000;\nexport const FIVE_MINUTES_IN_SECONDS = 300;\n\n/**\n * Abstract request dispatcher.\n * IMPORTANT: it is required to implement `prepareRequest(options)` before using!\n * @class QueryDispatcher\n * @namespace Util/Request/QueryDispatcher\n */\nexport class QueryDispatcher {\n    /**\n     * Creates an instance of QueryDispatcher.\n     * @param  {String} name Name of model for ServiceWorker to send BroadCasts updates to\n     * @param  {Number} cacheTTL Cache TTL (in seconds) for ServiceWorker to cache responses\n     * @memberof QueryDispatcher\n     */\n    __construct(name, cacheTTL = ONE_MONTH_IN_SECONDS) {\n        super.__construct();\n        this.name = name;\n        this.cacheTTL = cacheTTL;\n        this.promise = null;\n    }\n\n    /**\n     * Is responsible for request routing and manages `onError`, `onSuccess`, `onUpdate` functions triggers.\n     * @param  {Function} dispatch Store changing function from Redux (dispatches actions)\n     * @param  {any} options Any options received from Container\n     * @return {void}@memberof QueryDispatcher\n     */\n    handleData(dispatch, options) {\n        const { name, cacheTTL } = this;\n\n        const rawQueries = this.prepareRequest(options, dispatch);\n\n        if (!rawQueries) {\n            return;\n        }\n\n        const queries = rawQueries instanceof Field ? [rawQueries] : rawQueries;\n\n        if (this.promise) {\n            this.promise.cancel();\n        }\n\n        this.promise = makeCancelable(\n            new Promise((resolve, reject) => {\n                executeGet(prepareQuery(queries), name, cacheTTL)\n                    .then(\n                        /** @namespace Util/Request/QueryDispatcher/handleData/executeGetThen */\n                        (data) => resolve(data),\n                        /** @namespace Util/Request/QueryDispatcher/handleData/executeGetError */\n                        (error) => reject(error)\n                    );\n            })\n        );\n\n        this.promise.promise.then(\n            /** @namespace Util/Request/QueryDispatcher/handleData/thisPromisePromiseThen */\n            (data) => this.onSuccess(data, dispatch, options),\n            /** @namespace Util/Request/QueryDispatcher/handleData/thisPromisePromiseError */\n            (error) => this.onError(error, dispatch, options),\n        );\n\n        listenForBroadCast(name).then(\n            /** @namespace Util/Request/QueryDispatcher/handleData/listenForBroadCastThen */\n            (data) => this.onUpdate(data, dispatch, options),\n        );\n    }\n\n    /**\n     * Is triggered by BroadCast updated from ServiceWorker.\n     * Should dispatch some action.\n     * @param  {any} data Data received from fetch of GraphQL endpoint\n     * @param  {Function} dispatch Store changing function from Redux (dispatches actions)\n     * @return {void}\n     * @memberof QueryDispatcher\n     */\n    onUpdate(data, dispatch, options) {\n        this.onSuccess(data, dispatch, options);\n    }\n\n    /**\n     * Is responsible for request building (request & mutation preparation)\n     * @param  {any} options Any options received from Container\n     * @param {Function} dispatch\n     * @return {Array<Field>|Field} Array or single item of Field instances\n     * @memberof QueryDispatcher\n     */\n    prepareRequest(options, dispatch) {}\n\n    /**\n     * Is triggered on successful fetch of GraphQL endpoint.\n     * IMPORTANT: If there are any errors in response (`errors` field in JSON response from GraphQL), this function won't trigger!\n     * Should dispatch some action.\n     * @param  {any} data\n     * @param  {any} dispatch\n     * @return {void}@memberof QueryDispatcher\n     */\n    onSuccess(data, dispatch) {}\n\n    /**\n     * Is triggered on error in fetch of GraphQL endpoint.\n     * IMPORTANT: If there are any errors in response (`errors` field in JSON response from GraphQL), this function will trigger!\n     * Should dispatch some action.\n     * @param  {any} error\n     * @param  {any} dispatch\n     * @return {void}@memberof QueryDispatcher\n     */\n    onError(error, dispatch) {}\n}\n\nexport default QueryDispatcher;\n"]},"metadata":{},"sourceType":"module"}