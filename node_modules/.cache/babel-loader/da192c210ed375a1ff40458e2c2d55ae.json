{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/component/CheckoutBilling/CheckoutBilling.container.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { KLARNA, PURCHASE_ORDER } from \"/home/arturs/scandiweb/extension/src/component/CheckoutPayments/CheckoutPayments.config\";\nimport { TERMS_AND_CONDITIONS_POPUP_ID } from \"/home/arturs/scandiweb/extension/src/component/CheckoutTermsAndConditionsPopup/CheckoutTermsAndConditionsPopup.config\";\nimport { STORE_IN_PICK_UP_METHOD_CODE } from \"/home/arturs/scandiweb/extension/src/component/StoreInPickUp/StoreInPickUp.config\";\nimport { showNotification } from \"/home/arturs/scandiweb/extension/src/store/Notification/Notification.action\";\nimport { showPopup } from \"/home/arturs/scandiweb/extension/src/store/Popup/Popup.action\";\nimport { addressType, customerType } from \"/home/arturs/scandiweb/extension/src/type/Account\";\nimport { paymentMethodsType } from \"/home/arturs/scandiweb/extension/src/type/Checkout\";\nimport { TotalsType } from \"/home/arturs/scandiweb/extension/src/type/MiniCart\";\nimport { getFormFields, trimAddressFields, trimCustomerAddress } from \"/home/arturs/scandiweb/extension/src/util/Address\";\nimport { getCartTotalSubPrice } from \"/home/arturs/scandiweb/extension/src/util/Cart\";\nimport CheckoutBilling from \"./CheckoutBilling.component\";\n/** #namespace Component/CheckoutBilling/Container/mapStateToProps */\n\nexport const mapStateToProps = Mosaic.middleware(function (state) {\n  return {\n    customer: state.MyAccountReducer.customer,\n    totals: state.CartReducer.cartTotals,\n    termsAreEnabled: state.ConfigReducer.terms_are_enabled,\n    termsAndConditions: state.ConfigReducer.checkoutAgreements,\n    addressLinesQty: state.ConfigReducer.address_lines_quantity,\n    cartTotalSubPrice: getCartTotalSubPrice(state)\n  };\n}, \"Component/CheckoutBilling/Container/mapStateToProps\");\n/** #namespace Component/CheckoutBilling/Container/mapDispatchToProps */\n\nexport const mapDispatchToProps = Mosaic.middleware(function (dispatch) {\n  return {\n    showErrorNotification: function (message) {\n      return dispatch(showNotification('error', message));\n    },\n    showPopup: function (payload) {\n      return dispatch(showPopup(TERMS_AND_CONDITIONS_POPUP_ID, payload));\n    }\n  };\n}, \"Component/CheckoutBilling/Container/mapDispatchToProps\");\n/** #namespace Component/CheckoutBilling/Container */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const CheckoutBillingContainer = Mosaic.middleware((_temp = _class = class CheckoutBillingContainer_ extends Mosaic.Extensible(PureComponent) {\n  constructor(...args) {\n    super(...args);\n    this.containerFunctions = {\n      onBillingSuccess: this.onBillingSuccess.bind(this),\n      onBillingError: this.onBillingError.bind(this),\n      onAddressSelect: this.onAddressSelect.bind(this),\n      onSameAsShippingChange: this.onSameAsShippingChange.bind(this),\n      onPaymentMethodSelect: this.onPaymentMethodSelect.bind(this),\n      showPopup: this.showPopup.bind(this)\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const {\n      paymentMethod,\n      prevPaymentMethods\n    } = state;\n    const {\n      paymentMethods\n    } = props;\n\n    if (!prevPaymentMethods.length && !paymentMethod) {\n      const [method] = paymentMethods;\n      const {\n        code: paymentMethod\n      } = method || {};\n      return {\n        prevPaymentMethods: paymentMethods,\n        paymentMethod\n      };\n    }\n\n    return null;\n  }\n\n  __construct(props) {\n    super.__construct(props);\n\n    const {\n      paymentMethods,\n      customer\n    } = props;\n    const [method] = paymentMethods;\n    const {\n      code: paymentMethod\n    } = method || {};\n    this.state = {\n      isSameAsShipping: this.isSameShippingAddress(customer),\n      selectedCustomerAddressId: 0,\n      prevPaymentMethods: paymentMethods,\n      paymentMethod\n    };\n  }\n\n  isSameShippingAddress({\n    default_billing,\n    default_shipping\n  }) {\n    const {\n      totals: {\n        is_virtual\n      },\n      selectedShippingMethod\n    } = this.props;\n\n    if (is_virtual) {\n      return false;\n    }\n\n    return default_billing === default_shipping && selectedShippingMethod !== STORE_IN_PICK_UP_METHOD_CODE;\n  }\n\n  onAddressSelect(id) {\n    this.setState({\n      selectedCustomerAddressId: id\n    });\n  }\n\n  onSameAsShippingChange() {\n    this.setState(function ({\n      isSameAsShipping\n    }) {\n      return {\n        isSameAsShipping: !isSameAsShipping\n      };\n    });\n  }\n\n  onPaymentMethodSelect(code) {\n    this.setState({\n      paymentMethod: code\n    });\n  }\n\n  onBillingSuccess(fields, asyncData) {\n    const {\n      savePaymentInformation\n    } = this.props;\n    const {\n      isSameAsShipping\n    } = this.state;\n\n    const address = this._getAddress(fields);\n\n    const paymentMethod = this._getPaymentData(fields, asyncData);\n\n    savePaymentInformation({\n      billing_address: address,\n      paymentMethod,\n      same_as_shipping: isSameAsShipping\n    });\n  }\n\n  onBillingError(fields, invalidFields, error) {\n    const {\n      showErrorNotification\n    } = this.props;\n\n    if (error) {\n      const {\n        message = __('Something went wrong!')\n      } = error;\n      showErrorNotification(message);\n    }\n  }\n\n  showPopup() {\n    const {\n      showPopup,\n      termsAndConditions\n    } = this.props;\n    const {\n      name: title = __('Terms and Conditions'),\n      content: text = __('There are no Terms and Conditions configured.')\n    } = termsAndConditions[0] || {};\n    return showPopup({\n      title,\n      text\n    });\n  }\n\n  _getPaymentData(fields, asyncData) {\n    const {\n      paymentMethod: code\n    } = this.state;\n\n    switch (code) {\n      case KLARNA:\n        const [{\n          authorization_token\n        }] = asyncData;\n        return {\n          code,\n          additional_data: {\n            authorization_token\n          }\n        };\n\n      case PURCHASE_ORDER:\n        const {\n          purchaseOrderNumber\n        } = fields;\n        return {\n          code,\n          purchase_order_number: purchaseOrderNumber\n        };\n\n      default:\n        return {\n          code\n        };\n    }\n  }\n\n  _getAddress(fields) {\n    const {\n      addressLinesQty,\n      shippingAddress\n    } = this.props;\n    const {\n      isSameAsShipping,\n      selectedCustomerAddressId\n    } = this.state;\n    const formFields = getFormFields(fields, addressLinesQty);\n\n    if (isSameAsShipping) {\n      return shippingAddress;\n    }\n\n    if (!selectedCustomerAddressId) {\n      return trimAddressFields(formFields);\n    }\n\n    const {\n      customer: {\n        addresses\n      }\n    } = this.props;\n    const address = addresses.find(function ({\n      id\n    }) {\n      return id === selectedCustomerAddressId;\n    });\n    return { ...trimCustomerAddress(address),\n      save_in_address_book: false\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_checkBEM(React, CheckoutBilling, Object.assign({}, this.props, this.state, this.containerFunctions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}, _class.propTypes = {\n  showErrorNotification: PropTypes.func.isRequired,\n  paymentMethods: paymentMethodsType.isRequired,\n  savePaymentInformation: PropTypes.func.isRequired,\n  showPopup: PropTypes.func.isRequired,\n  shippingAddress: addressType.isRequired,\n  customer: customerType.isRequired,\n  totals: TotalsType.isRequired,\n  addressLinesQty: PropTypes.number.isRequired,\n  termsAndConditions: PropTypes.arrayOf(PropTypes.shape({\n    checkbox_text: PropTypes.string,\n    content: PropTypes.string,\n    name: PropTypes.string\n  })).isRequired,\n  selectedShippingMethod: PropTypes.string.isRequired\n}, _temp), \"Component/CheckoutBilling/Container\");\nexport default connect(mapStateToProps, mapDispatchToProps)(CheckoutBillingContainer);","map":{"version":3,"sources":["/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/component/CheckoutBilling/CheckoutBilling.container.js"],"names":["PropTypes","PureComponent","connect","KLARNA","PURCHASE_ORDER","TERMS_AND_CONDITIONS_POPUP_ID","STORE_IN_PICK_UP_METHOD_CODE","showNotification","showPopup","addressType","customerType","paymentMethodsType","TotalsType","getFormFields","trimAddressFields","trimCustomerAddress","getCartTotalSubPrice","CheckoutBilling","mapStateToProps","state","customer","MyAccountReducer","totals","CartReducer","cartTotals","termsAreEnabled","ConfigReducer","terms_are_enabled","termsAndConditions","checkoutAgreements","addressLinesQty","address_lines_quantity","cartTotalSubPrice","mapDispatchToProps","dispatch","showErrorNotification","message","payload","containerFunctions","onBillingSuccess","bind","onBillingError","onAddressSelect","onSameAsShippingChange","onPaymentMethodSelect","getDerivedStateFromProps","props","paymentMethod","prevPaymentMethods","paymentMethods","length","method","code","__construct","isSameAsShipping","isSameShippingAddress","selectedCustomerAddressId","default_billing","default_shipping","is_virtual","selectedShippingMethod","id","setState","fields","asyncData","savePaymentInformation","address","_getAddress","_getPaymentData","billing_address","same_as_shipping","invalidFields","error","__","name","title","content","text","authorization_token","additional_data","purchaseOrderNumber","purchase_order_number","shippingAddress","formFields","addresses","find","save_in_address_book","render","propTypes","func","isRequired","number","arrayOf","shape","checkbox_text","string","CheckoutBillingContainer"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport { KLARNA, PURCHASE_ORDER } from 'Component/CheckoutPayments/CheckoutPayments.config';\nimport {\n    TERMS_AND_CONDITIONS_POPUP_ID\n} from 'Component/CheckoutTermsAndConditionsPopup/CheckoutTermsAndConditionsPopup.config';\nimport { STORE_IN_PICK_UP_METHOD_CODE } from 'Component/StoreInPickUp/StoreInPickUp.config';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { showPopup } from 'Store/Popup/Popup.action';\nimport { addressType, customerType } from 'Type/Account';\nimport { paymentMethodsType } from 'Type/Checkout';\nimport { TotalsType } from 'Type/MiniCart';\nimport { getFormFields, trimAddressFields, trimCustomerAddress } from 'Util/Address';\nimport { getCartTotalSubPrice } from 'Util/Cart';\n\nimport CheckoutBilling from './CheckoutBilling.component';\n\n/** @namespace Component/CheckoutBilling/Container/mapStateToProps */\nexport const mapStateToProps = (state) => ({\n    customer: state.MyAccountReducer.customer,\n    totals: state.CartReducer.cartTotals,\n    termsAreEnabled: state.ConfigReducer.terms_are_enabled,\n    termsAndConditions: state.ConfigReducer.checkoutAgreements,\n    addressLinesQty: state.ConfigReducer.address_lines_quantity,\n    cartTotalSubPrice: getCartTotalSubPrice(state)\n});\n\n/** @namespace Component/CheckoutBilling/Container/mapDispatchToProps */\nexport const mapDispatchToProps = (dispatch) => ({\n    showErrorNotification: (message) => dispatch(showNotification('error', message)),\n    showPopup: (payload) => dispatch(showPopup(TERMS_AND_CONDITIONS_POPUP_ID, payload))\n});\n\n/** @namespace Component/CheckoutBilling/Container */\nexport class CheckoutBillingContainer extends PureComponent {\n    static propTypes = {\n        showErrorNotification: PropTypes.func.isRequired,\n        paymentMethods: paymentMethodsType.isRequired,\n        savePaymentInformation: PropTypes.func.isRequired,\n        showPopup: PropTypes.func.isRequired,\n        shippingAddress: addressType.isRequired,\n        customer: customerType.isRequired,\n        totals: TotalsType.isRequired,\n        addressLinesQty: PropTypes.number.isRequired,\n        termsAndConditions: PropTypes.arrayOf(PropTypes.shape({\n            checkbox_text: PropTypes.string,\n            content: PropTypes.string,\n            name: PropTypes.string\n        })).isRequired,\n        selectedShippingMethod: PropTypes.string.isRequired\n    };\n\n    static getDerivedStateFromProps(props, state) {\n        const { paymentMethod, prevPaymentMethods } = state;\n        const { paymentMethods } = props;\n\n        if (!prevPaymentMethods.length && !paymentMethod) {\n            const [method] = paymentMethods;\n            const { code: paymentMethod } = method || {};\n\n            return {\n                prevPaymentMethods: paymentMethods,\n                paymentMethod\n            };\n        }\n\n        return null;\n    }\n\n    containerFunctions = {\n        onBillingSuccess: this.onBillingSuccess.bind(this),\n        onBillingError: this.onBillingError.bind(this),\n        onAddressSelect: this.onAddressSelect.bind(this),\n        onSameAsShippingChange: this.onSameAsShippingChange.bind(this),\n        onPaymentMethodSelect: this.onPaymentMethodSelect.bind(this),\n        showPopup: this.showPopup.bind(this)\n    };\n\n    __construct(props) {\n        super.__construct(props);\n\n        const { paymentMethods, customer } = props;\n        const [method] = paymentMethods;\n        const { code: paymentMethod } = method || {};\n\n        this.state = {\n            isSameAsShipping: this.isSameShippingAddress(customer),\n            selectedCustomerAddressId: 0,\n            prevPaymentMethods: paymentMethods,\n            paymentMethod\n        };\n    }\n\n    isSameShippingAddress({ default_billing, default_shipping }) {\n        const { totals: { is_virtual }, selectedShippingMethod } = this.props;\n\n        if (is_virtual) {\n            return false;\n        }\n\n        return default_billing === default_shipping && selectedShippingMethod !== STORE_IN_PICK_UP_METHOD_CODE;\n    }\n\n    onAddressSelect(id) {\n        this.setState({ selectedCustomerAddressId: id });\n    }\n\n    onSameAsShippingChange() {\n        this.setState(({ isSameAsShipping }) => ({ isSameAsShipping: !isSameAsShipping }));\n    }\n\n    onPaymentMethodSelect(code) {\n        this.setState({ paymentMethod: code });\n    }\n\n    onBillingSuccess(fields, asyncData) {\n        const { savePaymentInformation } = this.props;\n        const { isSameAsShipping } = this.state;\n\n        const address = this._getAddress(fields);\n        const paymentMethod = this._getPaymentData(fields, asyncData);\n\n        savePaymentInformation({\n            billing_address: address,\n            paymentMethod,\n            same_as_shipping: isSameAsShipping\n        });\n    }\n\n    onBillingError(fields, invalidFields, error) {\n        const { showErrorNotification } = this.props;\n\n        if (error) {\n            const { message = __('Something went wrong!') } = error;\n            showErrorNotification(message);\n        }\n    }\n\n    showPopup() {\n        const { showPopup, termsAndConditions } = this.props;\n        const {\n            name: title = __('Terms and Conditions'),\n            content: text = __('There are no Terms and Conditions configured.')\n        } = termsAndConditions[0] || {};\n\n        return showPopup({\n            title, text\n        });\n    }\n\n    _getPaymentData(fields, asyncData) {\n        const { paymentMethod: code } = this.state;\n\n        switch (code) {\n        case KLARNA:\n            const [{ authorization_token }] = asyncData;\n\n            return {\n                code,\n                additional_data: {\n                    authorization_token\n                }\n            };\n\n        case PURCHASE_ORDER:\n            const { purchaseOrderNumber } = fields;\n\n            return {\n                code,\n                purchase_order_number: purchaseOrderNumber\n            };\n\n        default:\n            return { code };\n        }\n    }\n\n    _getAddress(fields) {\n        const { addressLinesQty, shippingAddress } = this.props;\n\n        const {\n            isSameAsShipping,\n            selectedCustomerAddressId\n        } = this.state;\n\n        const formFields = getFormFields(fields, addressLinesQty);\n\n        if (isSameAsShipping) {\n            return shippingAddress;\n        }\n\n        if (!selectedCustomerAddressId) {\n            return trimAddressFields(formFields);\n        }\n\n        const { customer: { addresses } } = this.props;\n        const address = addresses.find(({ id }) => id === selectedCustomerAddressId);\n\n        return {\n            ...trimCustomerAddress(address),\n            save_in_address_book: false\n        };\n    }\n\n    render() {\n        return (\n            <CheckoutBilling\n              { ...this.props }\n              { ...this.state }\n              { ...this.containerFunctions }\n            />\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CheckoutBillingContainer);\n"]},"metadata":{},"sourceType":"module"}