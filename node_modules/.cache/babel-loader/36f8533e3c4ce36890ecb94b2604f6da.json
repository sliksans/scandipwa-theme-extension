{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/component/MyAccountPasswordForm/MyAccountPasswordForm.component.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport FieldForm from \"/home/arturs/scandiweb/extension/src/component/FieldForm\";\n/** #namespace Component/MyAccountPasswordForm/Component */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const MyAccountPasswordForm = Mosaic.middleware((_temp = _class = class MyAccountPasswordForm_ extends Mosaic.Extensible(FieldForm) {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n\n    this.onFormSuccess = function (fields) {\n      const {\n        onPasswordChange\n      } = _this.props;\n      onPasswordChange(fields);\n    };\n  }\n\n  get fieldMap() {\n    return {\n      currentPassword: {\n        type: 'password',\n        label: __('Current Password'),\n        validation: ['notEmpty']\n      },\n      newPassword: {\n        type: 'password',\n        label: __('New password'),\n        validation: ['notEmpty']\n      }\n    };\n  }\n\n  renderActions() {\n    return /*#__PURE__*/_checkBEM(React, \"button\", {\n      block: \"Button\",\n      mix: {\n        block: 'MyAccount',\n        elem: 'Button'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    }, __('Change password'));\n  }\n\n}, _class.propTypes = {\n  onPasswordChange: PropTypes.func.isRequired\n}, _temp), \"Component/MyAccountPasswordForm/Component\");\nexport default MyAccountPasswordForm;","map":{"version":3,"sources":["/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/component/MyAccountPasswordForm/MyAccountPasswordForm.component.js"],"names":["PropTypes","FieldForm","onFormSuccess","fields","onPasswordChange","props","fieldMap","currentPassword","type","label","__","validation","newPassword","renderActions","block","elem","propTypes","func","isRequired","MyAccountPasswordForm"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,SAAP,MAAsB,YAAtB;AAEA,OAAOC,SAAP;AAEA;;;;AACA,gIAA2CA,SAA3C,EAAqD;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAKjDC,aALiD,GAKjC,UAACC,MAAD,EAAY;AACxB,YAAM;AAAEC,QAAAA;AAAF,UAAuB,KAAI,CAACC,KAAlC;AACAD,MAAAA,gBAAgB,CAACD,MAAD,CAAhB;AACH,KARgD;AAAA;;AAUrC,MAARG,QAAQ,GAAG;AACX,WAAO;AACHC,MAAAA,eAAe,EAAE;AACbC,QAAAA,IAAI,EAAE,UADO;AAEbC,QAAAA,KAAK,EAAEC,EAAE,CAAC,kBAAD,CAFI;AAGbC,QAAAA,UAAU,EAAE,CAAC,UAAD;AAHC,OADd;AAMHC,MAAAA,WAAW,EAAE;AACTJ,QAAAA,IAAI,EAAE,UADG;AAETC,QAAAA,KAAK,EAAEC,EAAE,CAAC,cAAD,CAFA;AAGTC,QAAAA,UAAU,EAAE,CAAC,UAAD;AAHH;AANV,KAAP;AAYH;;AAEDE,EAAAA,aAAa,GAAG;AACZ;AACY,MAAA,KAAK,EAAC,QADlB;AAC2B,MAAA,GAAG,EAAG;AAAEC,QAAAA,KAAK,EAAE,WAAT;AAAsBC,QAAAA,IAAI,EAAE;AAA5B,OADjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEUL,EAAE,CAAC,iBAAD,CAFZ;AAKH;;AA/BgD,CAArD,SACWM,SADX,GACuB;AACfZ,EAAAA,gBAAgB,EAAEJ,SAAS,CAACiB,IAAV,CAAeC;AADlB,CADvB;AAkCA,eAAeC,qBAAf","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\n\nimport FieldForm from 'Component/FieldForm';\n\n/** @namespace Component/MyAccountPasswordForm/Component */\nexport class MyAccountPasswordForm extends FieldForm {\n    static propTypes = {\n        onPasswordChange: PropTypes.func.isRequired\n    };\n\n    onFormSuccess = (fields) => {\n        const { onPasswordChange } = this.props;\n        onPasswordChange(fields);\n    };\n\n    get fieldMap() {\n        return {\n            currentPassword: {\n                type: 'password',\n                label: __('Current Password'),\n                validation: ['notEmpty']\n            },\n            newPassword: {\n                type: 'password',\n                label: __('New password'),\n                validation: ['notEmpty']\n            }\n        };\n    }\n\n    renderActions() {\n        return (\n            <button block=\"Button\" mix={ { block: 'MyAccount', elem: 'Button' } }>\n                { __('Change password') }\n            </button>\n        );\n    }\n}\n\nexport default MyAccountPasswordForm;\n"]},"metadata":{},"sourceType":"module"}