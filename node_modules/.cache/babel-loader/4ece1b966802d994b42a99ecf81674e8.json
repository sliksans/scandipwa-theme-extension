{"ast":null,"code":"/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport { toggleBreadcrumbs, updateBreadcrumbs } from \"/home/arturs/scandiweb/scandipwa/src/store/Breadcrumbs/Breadcrumbs.action\";\n/**\n * Breadcrumbs Dispatcher\n * @class BreadcrumbsDispatcher\n * #namespace Store/Breadcrumbs/Dispatcher\n */\n\nexport const BreadcrumbsDispatcher = Mosaic.middleware(class BreadcrumbsDispatcher_ extends Mosaic.Extensible() {\n  /**\n   * Set breadcrumbs\n   * @param {Array<Object>} breadcrumbs Breadcrumbs array\n   * @param {Function} dispatch\n   * @memberof BreadcrumbsDispatcher\n   */\n  update(breadcrumbs, dispatch) {\n    dispatch(toggleBreadcrumbs(true));\n    dispatch(updateBreadcrumbs(breadcrumbs));\n  }\n  /**\n   * Set breadcrumbs for category\n   * @param {Array<Object>} category Category breadcumbs items\n   * @param {Function} dispatch\n   * @memberof BreadcrumbsDispatcher\n   */\n\n\n  updateWithCategory(category, dispatch) {\n    const breadcrumbs = this._getCategoryBreadcrumbs(category);\n\n    dispatch(toggleBreadcrumbs(true));\n    dispatch(updateBreadcrumbs(breadcrumbs));\n  }\n  /**\n   * Set breadcrumbs for category\n   * @param product\n   * @param prevCategoryId\n   * @param {Function} dispatch\n   * @memberof BreadcrumbsDispatcher\n   */\n\n\n  updateWithProduct(product, prevCategoryId, dispatch) {\n    const breadcrumbs = this._getProductBreadcrumbs(product, prevCategoryId);\n\n    dispatch(toggleBreadcrumbs(true));\n    dispatch(updateBreadcrumbs(breadcrumbs));\n  }\n  /**\n   * Set breadcrumbs for category\n   * @param {Array<Object>} category Category breadcumbs items\n   * @param {Function} dispatch\n   * @memberof BreadcrumbsDispatcher\n   */\n\n\n  updateWithCmsPage({\n    title\n  }, dispatch) {\n    const breadcrumbs = title ? [{\n      url: '',\n      name: title\n    }] : [];\n    dispatch(updateBreadcrumbs(breadcrumbs));\n  }\n  /**\n   * Get breadcrumbs for category\n   * @param {Object} category Category breadcumbs items\n   * @return {Array<Object>} Breadcrumbs array\n   * @memberof BreadcrumbsDispatcher\n   */\n\n\n  _getCategoryBreadcrumbs(category) {\n    const {\n      url,\n      name,\n      breadcrumbs\n    } = category;\n    const breadcrumbsList = [];\n\n    if (breadcrumbs) {\n      breadcrumbs.sort(function (a, b) {\n        return a.category_level - b.category_level;\n      }).forEach(function (crumb) {\n        const {\n          category_url,\n          category_name,\n          category_is_active\n        } = crumb; // do not add link to inactive categories\n\n        if (category_is_active) {\n          breadcrumbsList.push({\n            name: category_name,\n            url: {\n              pathname: category_url,\n              state: {\n                category: true\n              }\n            }\n          });\n        } else {\n          breadcrumbsList.push({\n            url: '',\n            name: category_name\n          });\n        }\n      });\n    }\n\n    return [{\n      url,\n      name\n    }, ...breadcrumbsList.reverse()];\n  }\n\n  findCategoryById(categories, categoryId) {\n    return categories.find(function ({\n      id\n    }) {\n      return id === categoryId;\n    });\n  }\n\n  findLongestBreadcrumbs(categories) {\n    const {\n      breadcrumbsCategory = {}\n    } = categories.reduce(function (acc, category) {\n      const {\n        longestBreadcrumbsLength\n      } = acc;\n      const {\n        breadcrumbs\n      } = category;\n      const breadcrumbsLength = (breadcrumbs || []).length;\n\n      if (!breadcrumbsLength && longestBreadcrumbsLength !== 0) {\n        return acc;\n      }\n\n      if (longestBreadcrumbsLength === 0) {\n        return { ...acc,\n          breadcrumbsCategory: category\n        };\n      }\n\n      if (breadcrumbsLength <= longestBreadcrumbsLength) {\n        return acc;\n      }\n\n      return {\n        breadcrumbsCategory: category,\n        longestBreadcrumbsLength: breadcrumbsLength\n      };\n    }, {\n      breadcrumbsCategory: {},\n      longestBreadcrumbsLength: 0\n    });\n    return breadcrumbsCategory;\n  }\n  /**\n   * Get breadcrumbs for product\n   *\n   * @param {Object} product Product breadcumbs items\n   * @param prevCategoryId\n   * @return {Array<Object>} Breadcrumbs array\n   * @memberof BreadcrumbsDispatcher\n   */\n\n\n  _getProductBreadcrumbs(product, prevCategoryId = null) {\n    const {\n      categories,\n      url,\n      name\n    } = product;\n\n    if (!categories || !categories.length) {\n      return [];\n    }\n\n    return [{\n      url,\n      name\n    }, ...this._getCategoryBreadcrumbs(this.findCategoryById(categories, prevCategoryId) || this.findLongestBreadcrumbs(categories))];\n  }\n\n}, \"Store/Breadcrumbs/Dispatcher\");\nexport default new BreadcrumbsDispatcher();","map":{"version":3,"sources":["/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/store/Breadcrumbs/Breadcrumbs.dispatcher.js"],"names":["toggleBreadcrumbs","updateBreadcrumbs","update","breadcrumbs","dispatch","updateWithCategory","category","_getCategoryBreadcrumbs","updateWithProduct","product","prevCategoryId","_getProductBreadcrumbs","updateWithCmsPage","title","url","name","breadcrumbsList","sort","a","b","category_level","forEach","crumb","category_url","category_name","category_is_active","push","pathname","state","reverse","findCategoryById","categories","categoryId","find","id","findLongestBreadcrumbs","breadcrumbsCategory","reduce","acc","longestBreadcrumbsLength","breadcrumbsLength","length","BreadcrumbsDispatcher"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport { toggleBreadcrumbs, updateBreadcrumbs } from 'Store/Breadcrumbs/Breadcrumbs.action';\n\n/**\n * Breadcrumbs Dispatcher\n * @class BreadcrumbsDispatcher\n * @namespace Store/Breadcrumbs/Dispatcher\n */\nexport class BreadcrumbsDispatcher {\n    /**\n     * Set breadcrumbs\n     * @param {Array<Object>} breadcrumbs Breadcrumbs array\n     * @param {Function} dispatch\n     * @memberof BreadcrumbsDispatcher\n     */\n    update(breadcrumbs, dispatch) {\n        dispatch(toggleBreadcrumbs(true));\n        dispatch(updateBreadcrumbs(breadcrumbs));\n    }\n\n    /**\n     * Set breadcrumbs for category\n     * @param {Array<Object>} category Category breadcumbs items\n     * @param {Function} dispatch\n     * @memberof BreadcrumbsDispatcher\n     */\n    updateWithCategory(category, dispatch) {\n        const breadcrumbs = this._getCategoryBreadcrumbs(category);\n        dispatch(toggleBreadcrumbs(true));\n        dispatch(updateBreadcrumbs(breadcrumbs));\n    }\n\n    /**\n     * Set breadcrumbs for category\n     * @param product\n     * @param prevCategoryId\n     * @param {Function} dispatch\n     * @memberof BreadcrumbsDispatcher\n     */\n    updateWithProduct(product, prevCategoryId, dispatch) {\n        const breadcrumbs = this._getProductBreadcrumbs(product, prevCategoryId);\n        dispatch(toggleBreadcrumbs(true));\n        dispatch(updateBreadcrumbs(breadcrumbs));\n    }\n\n    /**\n     * Set breadcrumbs for category\n     * @param {Array<Object>} category Category breadcumbs items\n     * @param {Function} dispatch\n     * @memberof BreadcrumbsDispatcher\n     */\n    updateWithCmsPage({ title }, dispatch) {\n        const breadcrumbs = title\n            ? [\n                {\n                    url: '',\n                    name: title\n                }\n            ]\n            : [];\n\n        dispatch(updateBreadcrumbs(breadcrumbs));\n    }\n\n    /**\n     * Get breadcrumbs for category\n     * @param {Object} category Category breadcumbs items\n     * @return {Array<Object>} Breadcrumbs array\n     * @memberof BreadcrumbsDispatcher\n     */\n    _getCategoryBreadcrumbs(category) {\n        const { url, name, breadcrumbs } = category;\n        const breadcrumbsList = [];\n\n        if (breadcrumbs) {\n            breadcrumbs\n                .sort((a, b) => a.category_level - b.category_level)\n                .forEach((crumb) => {\n                    const { category_url, category_name, category_is_active } = crumb;\n\n                    // do not add link to inactive categories\n                    if (category_is_active) {\n                        breadcrumbsList.push({\n                            name: category_name,\n                            url: {\n                                pathname: category_url,\n                                state: { category: true }\n                            }\n                        });\n                    } else {\n                        breadcrumbsList.push({\n                            url: '',\n                            name: category_name\n                        });\n                    }\n                });\n        }\n\n        return [\n            { url, name },\n            ...breadcrumbsList.reverse()\n        ];\n    }\n\n    findCategoryById(categories, categoryId) {\n        return categories.find(({ id }) => id === categoryId);\n    }\n\n    findLongestBreadcrumbs(categories) {\n        const { breadcrumbsCategory = {} } = categories.reduce((acc, category) => {\n            const { longestBreadcrumbsLength } = acc;\n            const { breadcrumbs } = category;\n            const breadcrumbsLength = (breadcrumbs || []).length;\n\n            if (!breadcrumbsLength && longestBreadcrumbsLength !== 0) {\n                return acc;\n            }\n\n            if (longestBreadcrumbsLength === 0) {\n                return { ...acc, breadcrumbsCategory: category };\n            }\n\n            if (breadcrumbsLength <= longestBreadcrumbsLength) {\n                return acc;\n            }\n\n            return {\n                breadcrumbsCategory: category,\n                longestBreadcrumbsLength: breadcrumbsLength\n            };\n        }, {\n            breadcrumbsCategory: {},\n            longestBreadcrumbsLength: 0\n        });\n\n        return breadcrumbsCategory;\n    }\n\n    /**\n     * Get breadcrumbs for product\n     *\n     * @param {Object} product Product breadcumbs items\n     * @param prevCategoryId\n     * @return {Array<Object>} Breadcrumbs array\n     * @memberof BreadcrumbsDispatcher\n     */\n    _getProductBreadcrumbs(product, prevCategoryId = null) {\n        const { categories, url, name } = product;\n\n        if (!categories || !categories.length) {\n            return [];\n        }\n\n        return [\n            { url, name },\n            ...this._getCategoryBreadcrumbs(\n                this.findCategoryById(categories, prevCategoryId)\n                || this.findLongestBreadcrumbs(categories)\n            )\n        ];\n    }\n}\n\nexport default new BreadcrumbsDispatcher();\n"]},"metadata":{},"sourceType":"module"}