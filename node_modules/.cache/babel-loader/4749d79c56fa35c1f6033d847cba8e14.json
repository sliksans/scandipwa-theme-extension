{"ast":null,"code":"import _asyncToGenerator from \"/home/arturs/scandiweb/extension/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\n/** #namespace Util/Address/trimCustomerAddress */\nexport const trimCustomerAddress = Mosaic.middleware(function (customerAddress) {\n  const {\n    city,\n    company,\n    country_id,\n    email,\n    firstname,\n    lastname,\n    method,\n    postcode,\n    street,\n    telephone,\n    region,\n    vat_id\n  } = customerAddress;\n  return {\n    city,\n    company,\n    country_id,\n    email,\n    firstname,\n    lastname,\n    method,\n    postcode,\n    street,\n    telephone,\n    vat_id,\n    ...region\n  };\n}, \"Util/Address/trimCustomerAddress\");\n/** #namespace Util/Address/trimAddressFields */\n\nexport const trimAddressFields = Mosaic.middleware(function (fields) {\n  const {\n    region_string: region,\n    ...fieldsData\n  } = fields;\n  return { ...fieldsData,\n    region\n  };\n}, \"Util/Address/trimAddressFields\");\n/** transforming \"street[index]\" entries into a single \"street\" object\n    for checkout/billing/myAccoutAddress form fields object */\n\n/** #namespace Util/Address/setAddressesInFormObject */\n\nexport const setAddressesInFormObject = Mosaic.middleware(function (fields, numberOfLines) {\n  const addressKeys = new Array(numberOfLines).fill('').map(function (_, index) {\n    return `street${index}`;\n  });\n  const addressValues = addressKeys.map(function (key) {\n    return fields[key];\n  }); // removing street related fields from the form object\n\n  const newFields = Object.keys(fields).filter(function (key) {\n    return !addressKeys.includes(key);\n  }).reduce(function (acc, key) {\n    acc[key] = fields[key];\n    return acc;\n  }, {}); // setting single street entry to the form object\n\n  newFields.street = addressValues;\n  return newFields;\n}, \"Util/Address/setAddressesInFormObject\"); // get Form Fields object depending on addressLinesQty\n\n/** #namespace Util/Address/getFormFields */\n\nexport const getFormFields = Mosaic.middleware(function (fields, addressLinesQty) {\n  if (addressLinesQty === 1) {\n    return fields;\n  }\n\n  return setAddressesInFormObject(fields, addressLinesQty);\n}, \"Util/Address/getFormFields\");\n/** #namespace Util/Address/getCityAndRegionFromZipcode */\n\nexport const getCityAndRegionFromZipcode = Mosaic.middleware( /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (countryId, value) {\n    const response = yield fetch(`https://api.zippopotam.us/${countryId}/${value.split(' ')[0]}`);\n    const data = yield response.json();\n    return data && Object.entries(data).length > 0 ? [data.places[0]['place name'], data.places[0]['state abbreviation']] : [null, null];\n  });\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}(), \"Util/Address/getCityAndRegionFromZipcode\");","map":{"version":3,"sources":["/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/util/Address/index.js"],"names":["trimCustomerAddress","customerAddress","city","company","country_id","email","firstname","lastname","method","postcode","street","telephone","region","vat_id","trimAddressFields","fields","region_string","fieldsData","setAddressesInFormObject","numberOfLines","addressKeys","Array","fill","map","_","index","addressValues","key","newFields","Object","keys","filter","includes","reduce","acc","getFormFields","addressLinesQty","getCityAndRegionFromZipcode","countryId","value","response","fetch","split","data","json","entries","length","places"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\n/** @namespace Util/Address/trimCustomerAddress */\nexport const trimCustomerAddress = (customerAddress) => {\n    const {\n        city,\n        company,\n        country_id,\n        email,\n        firstname,\n        lastname,\n        method,\n        postcode,\n        street,\n        telephone,\n        region,\n        vat_id\n    } = customerAddress;\n\n    return {\n        city,\n        company,\n        country_id,\n        email,\n        firstname,\n        lastname,\n        method,\n        postcode,\n        street,\n        telephone,\n        vat_id,\n        ...region\n    };\n};\n\n/** @namespace Util/Address/trimAddressFields */\nexport const trimAddressFields = (fields) => {\n    const {\n        region_string: region,\n        ...fieldsData\n    } = fields;\n\n    return { ...fieldsData, region };\n};\n\n/** transforming \"street[index]\" entries into a single \"street\" object\n    for checkout/billing/myAccoutAddress form fields object */\n/** @namespace Util/Address/setAddressesInFormObject */\nexport const setAddressesInFormObject = (fields, numberOfLines) => {\n    const addressKeys = new Array(numberOfLines)\n        .fill('')\n        .map((_, index) => `street${index}`);\n\n    const addressValues = addressKeys.map((key) => fields[key]);\n\n    // removing street related fields from the form object\n    const newFields = Object.keys(fields)\n        .filter((key) => !addressKeys.includes(key))\n        .reduce(\n            (acc, key) => {\n                acc[key] = fields[key];\n                return acc;\n            }, {}\n        );\n\n    // setting single street entry to the form object\n    newFields.street = addressValues;\n\n    return newFields;\n};\n\n// get Form Fields object depending on addressLinesQty\n/** @namespace Util/Address/getFormFields */\nexport const getFormFields = (fields, addressLinesQty) => {\n    if (addressLinesQty === 1) {\n        return fields;\n    }\n\n    return setAddressesInFormObject(fields, addressLinesQty);\n};\n\n/** @namespace Util/Address/getCityAndRegionFromZipcode */\nexport const getCityAndRegionFromZipcode = async (countryId, value) => {\n    const response = await fetch(`https://api.zippopotam.us/${countryId}/${value.split(' ')[0]}`);\n    const data = await response.json();\n    return data && Object.entries(data).length > 0\n        ? [\n            data.places[0]['place name'],\n            data.places[0]['state abbreviation']\n        ]\n        : [null, null];\n};\n"]},"metadata":{},"sourceType":"module"}