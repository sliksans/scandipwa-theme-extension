{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/component/ExpandableContentShowMore/ExpandableContentShowMore.component.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { createRef, PureComponent } from 'react';\nimport { ChildrenType } from \"/home/arturs/scandiweb/scandipwa/src/type/Common\";\nimport \"./ExpandableContentShowMore.style\";\n/** #namespace Component/ExpandableContentShowMore/Component */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const ExpandableContentShowMore = Mosaic.middleware((_temp = _class = class ExpandableContentShowMore_ extends Mosaic.Extensible(PureComponent) {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n\n    this.handleShowAllButtonClick = function () {\n      const {\n        isExpanding\n      } = _this.state;\n\n      if (!isExpanding) {\n        _this.setState(function ({\n          isOpen\n        }) {\n          return {\n            isOpen: !isOpen,\n            isExpanding: true\n          };\n        });\n      }\n    };\n  }\n\n  __construct(props) {\n    super.__construct(props);\n\n    this.ref = /*#__PURE__*/createRef();\n    const {\n      showElemCount,\n      children: {\n        length\n      }\n    } = this.props;\n    this.expandableRef = /*#__PURE__*/createRef();\n    this.state = {\n      isOpen: length > showElemCount,\n      isExpanding: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      isOpen\n    } = this.state;\n\n    if (isOpen) {\n      this.setState({\n        isOpen: false\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    var _this2 = this;\n\n    const {\n      isExpanding\n    } = this.state;\n\n    if (isExpanding) {\n      const ONE_SECOND_IN_MS = 1000;\n      const transitionDurationCSStoMS = window.getComputedStyle(this.expandableRef.current).getPropertyValue('transition-duration').slice(0, -1) * ONE_SECOND_IN_MS;\n      setTimeout(function () {\n        return _this2.setState({\n          isExpanding: false\n        });\n      }, transitionDurationCSStoMS);\n    }\n\n    const {\n      children: {\n        length\n      }\n    } = this.props;\n    const {\n      children: {\n        length: prevLength\n      }\n    } = prevProps;\n\n    if (length !== prevLength) {\n      this.getExpandableContentHeight();\n    }\n  }\n\n  getExpandableContentHeight() {\n    var _this3 = this;\n\n    const {\n      isOpen\n    } = this.state;\n    const {\n      showElemCount,\n      children: {\n        length\n      }\n    } = this.props;\n\n    if (isOpen && length <= showElemCount) {\n      this.setState({\n        isOpen: false\n      });\n      return;\n    }\n\n    this.setState({\n      isOpen: true\n    }, function () {\n      _this3.setState({\n        isOpen: false\n      });\n    });\n  }\n\n  renderShowAllButton() {\n    const {\n      showElemCount,\n      children: {\n        length\n      }\n    } = this.props;\n\n    if (length <= showElemCount) {\n      return null;\n    }\n\n    const {\n      isOpen\n    } = this.state;\n    const mods = isOpen ? {\n      state: 'isOpen'\n    } : {};\n    return /*#__PURE__*/_checkBEM(React, \"button\", {\n      onClick: this.handleShowAllButtonClick,\n      mix: {\n        block: 'Button',\n        mods: {\n          likeLink: true\n        }\n      },\n      block: \"ExpandableContentShowMore\",\n      elem: \"ShowAllButton\",\n      mods: mods,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }, isOpen ? __('Show less') : __('Show more'));\n  }\n\n  renderExpandableChildren() {\n    const {\n      isOpen,\n      isExpanding\n    } = this.state;\n    const {\n      children,\n      showElemCount\n    } = this.props;\n    const child = isOpen || isExpanding ? children.slice(showElemCount) : null;\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      ref: this.expandableRef,\n      block: \"ExpandableContentShowMore\",\n      elem: \"ExpandableChildren\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }, child);\n  }\n\n  renderContent() {\n    const {\n      children,\n      showElemCount\n    } = this.props;\n    const child = children.slice(0, showElemCount);\n    return /*#__PURE__*/_checkBEM(React, React.Fragment, null, child, this.renderExpandableChildren(), this.renderShowAllButton());\n  }\n\n  render() {\n    const {\n      children,\n      isMobile\n    } = this.props;\n\n    if (isMobile) {\n      return children;\n    }\n\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: \"ExpandableContentShowMore\",\n      ref: this.ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }\n    }, this.renderContent());\n  }\n\n}, _class.propTypes = {\n  showElemCount: PropTypes.number,\n  children: ChildrenType.isRequired,\n  isMobile: PropTypes.bool.isRequired\n}, _class.defaultProps = {\n  showElemCount: 3\n}, _temp), \"Component/ExpandableContentShowMore/Component\");\nexport default ExpandableContentShowMore;","map":{"version":3,"sources":["/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/component/ExpandableContentShowMore/ExpandableContentShowMore.component.js"],"names":["PropTypes","createRef","PureComponent","ChildrenType","handleShowAllButtonClick","isExpanding","state","setState","isOpen","__construct","props","ref","showElemCount","children","length","expandableRef","componentDidMount","componentDidUpdate","prevProps","ONE_SECOND_IN_MS","transitionDurationCSStoMS","window","getComputedStyle","current","getPropertyValue","slice","setTimeout","prevLength","getExpandableContentHeight","renderShowAllButton","mods","block","likeLink","__","renderExpandableChildren","child","renderContent","render","isMobile","propTypes","number","isRequired","bool","defaultProps","ExpandableContentShowMore"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { createRef, PureComponent } from 'react';\n\nimport { ChildrenType } from 'Type/Common';\n\nimport './ExpandableContentShowMore.style';\n\n/** @namespace Component/ExpandableContentShowMore/Component */\nexport class ExpandableContentShowMore extends PureComponent {\n    static propTypes = {\n        showElemCount: PropTypes.number,\n        children: ChildrenType.isRequired,\n        isMobile: PropTypes.bool.isRequired\n    };\n\n    static defaultProps = {\n        showElemCount: 3\n    };\n\n    __construct(props) {\n        super.__construct(props);\n\n        this.ref = createRef();\n\n        const { showElemCount, children: { length } } = this.props;\n\n        this.expandableRef = createRef();\n\n        this.state = {\n            isOpen: length > showElemCount,\n            isExpanding: false\n        };\n    }\n\n    componentDidMount() {\n        const { isOpen } = this.state;\n\n        if (isOpen) {\n            this.setState({ isOpen: false });\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        const { isExpanding } = this.state;\n\n        if (isExpanding) {\n            const ONE_SECOND_IN_MS = 1000;\n            const transitionDurationCSStoMS = window\n                .getComputedStyle(this.expandableRef.current)\n                .getPropertyValue('transition-duration')\n                .slice(0, -1) * ONE_SECOND_IN_MS;\n\n            setTimeout(() => this.setState({ isExpanding: false }),\n                transitionDurationCSStoMS);\n        }\n\n        const { children: { length } } = this.props;\n        const { children: { length: prevLength } } = prevProps;\n\n        if (length !== prevLength) {\n            this.getExpandableContentHeight();\n        }\n    }\n\n    getExpandableContentHeight() {\n        const { isOpen } = this.state;\n        const { showElemCount, children: { length } } = this.props;\n\n        if (isOpen && length <= showElemCount) {\n            this.setState({ isOpen: false });\n            return;\n        }\n\n        this.setState({ isOpen: true }, () => {\n            this.setState({ isOpen: false });\n        });\n    }\n\n    handleShowAllButtonClick = () => {\n        const { isExpanding } = this.state;\n\n        if (!isExpanding) {\n            this.setState(({ isOpen }) => ({ isOpen: !isOpen, isExpanding: true }));\n        }\n    };\n\n    renderShowAllButton() {\n        const { showElemCount, children: { length } } = this.props;\n\n        if (length <= showElemCount) {\n            return null;\n        }\n\n        const { isOpen } = this.state;\n\n        const mods = isOpen ? { state: 'isOpen' } : {};\n\n        return (\n            <button\n              onClick={ this.handleShowAllButtonClick }\n              mix={ { block: 'Button', mods: { likeLink: true } } }\n              block=\"ExpandableContentShowMore\"\n              elem=\"ShowAllButton\"\n              mods={ mods }\n            >\n                { isOpen ? __('Show less') : __('Show more') }\n            </button>\n        );\n    }\n\n    renderExpandableChildren() {\n        const { isOpen, isExpanding } = this.state;\n        const { children, showElemCount } = this.props;\n\n        const child = (isOpen || isExpanding) ? children.slice(showElemCount) : null;\n\n        return (\n            <div\n              ref={ this.expandableRef }\n              block=\"ExpandableContentShowMore\"\n              elem=\"ExpandableChildren\"\n            >\n                { child }\n            </div>\n        );\n    }\n\n    renderContent() {\n        const { children, showElemCount } = this.props;\n\n        const child = children.slice(0, showElemCount);\n\n        return (\n            <>\n                { child }\n                { this.renderExpandableChildren() }\n                { this.renderShowAllButton() }\n            </>\n        );\n    }\n\n    render() {\n        const { children, isMobile } = this.props;\n\n        if (isMobile) {\n            return children;\n        }\n\n        return (\n            <div block=\"ExpandableContentShowMore\" ref={ this.ref }>\n                { this.renderContent() }\n            </div>\n        );\n    }\n}\nexport default ExpandableContentShowMore;\n"]},"metadata":{},"sourceType":"module"}