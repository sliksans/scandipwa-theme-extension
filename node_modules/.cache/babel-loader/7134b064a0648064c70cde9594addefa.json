{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/component/ProductBundleItems/ProductBundleItems.container.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport ProductCustomizableOptionsContainer from \"/home/arturs/scandiweb/extension/src/component/ProductCustomizableOptions/ProductCustomizableOptions.container\";\nimport { ProductItemsType } from \"/home/arturs/scandiweb/extension/src/type/ProductList\";\nimport ProductBundleItems from \"./ProductBundleItems.component\";\n/** #namespace Component/ProductBundleItems/Container */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const ProductBundleItemsContainer = Mosaic.middleware((_temp = _class = class ProductBundleItemsContainer_ extends Mosaic.Extensible(ProductCustomizableOptionsContainer) {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n    this.containerFunctions = { ...this.containerFunctions,\n      updateQuantity: this.updateQuantity.bind(this)\n    };\n\n    this.getItemsPrice = function (item) {\n      const {\n        selectedDropdownOptions = [],\n        selectedCheckboxValues = []\n      } = _this.state;\n      const values = [...selectedCheckboxValues, ...selectedDropdownOptions];\n\n      if (values.length) {\n        return _this.getOptionPrice(item, values);\n      }\n\n      return {\n        price: 0,\n        priceExclTax: 0,\n        initialPrice: 0\n      };\n    };\n  }\n\n  componentDidMount() {\n    const {\n      items\n    } = this.props;\n\n    if (items) {\n      this.stopLoading();\n    }\n  }\n\n  componentDidUpdate(_, prevState) {\n    const {\n      items\n    } = this.props;\n    const {\n      selectedCheckboxValues,\n      selectedDropdownOptions,\n      isLoading\n    } = this.state;\n    const {\n      selectedCheckboxValues: prevSelectedCheckboxValues,\n      selectedDropdownOptions: prevSelectedDropdownOptions\n    } = prevState;\n\n    if (items && isLoading) {\n      this.stopLoading();\n    }\n\n    if (selectedDropdownOptions !== prevSelectedDropdownOptions || selectedCheckboxValues !== prevSelectedCheckboxValues) {\n      this.updateSelectedOptions();\n    }\n  }\n\n  stopLoading() {\n    this.setState({\n      isLoading: false\n    });\n  }\n\n  getOptionPrice(item, selectedValues) {\n    const {\n      option_id,\n      options\n    } = item;\n    return selectedValues.filter(function ({\n      id\n    }) {\n      return id === option_id;\n    }).reduce(function (acc, {\n      quantity,\n      value\n    }) {\n      const {\n        price,\n        priceExclTax,\n        initialPrice\n      } = acc;\n      const selectedOption = options.find(function (option) {\n        return JSON.stringify(value) === JSON.stringify([option.id.toString()]) && option.product !== null;\n      });\n\n      if (!selectedOption) {\n        return acc;\n      }\n\n      const {\n        finalOptionPrice,\n        finalOptionPriceExclTax,\n        regularOptionPrice\n      } = selectedOption;\n      return {\n        price: price + finalOptionPrice * quantity,\n        priceExclTax: priceExclTax + finalOptionPriceExclTax * quantity,\n        initialPrice: initialPrice + regularOptionPrice * quantity\n      };\n    }, {\n      price: 0,\n      priceExclTax: 0,\n      initialPrice: 0\n    });\n  }\n\n  getTotalPrice() {\n    const {\n      items\n    } = this.props;\n    return items.map(this.getItemsPrice).reduce(function ({\n      price,\n      finalPrice,\n      priceExclTax\n    }, item) {\n      return {\n        price: price + item.initialPrice,\n        finalPrice: finalPrice + item.price,\n        priceExclTax: priceExclTax + item.priceExclTax\n      };\n    }, {\n      price: 0,\n      finalPrice: 0,\n      priceExclTax: 0\n    });\n  }\n\n  updateSelectedOptions() {\n    const {\n      getSelectedCustomizableOptions,\n      setBundlePrice\n    } = this.props;\n    const {\n      selectedDropdownOptions,\n      selectedCheckboxValues\n    } = this.state;\n    const bundleOptions = [];\n    const bundlePrices = this.getTotalPrice();\n    bundleOptions.push(...bundleOptions, ...selectedCheckboxValues, ...selectedDropdownOptions);\n    getSelectedCustomizableOptions(bundleOptions);\n    setBundlePrice(bundlePrices);\n  }\n\n  setSelectedDropdownValue(id, option) {\n    const {\n      selectedDropdownOptions\n    } = this.state;\n    const {\n      value,\n      quantity,\n      option_id\n    } = option;\n\n    if (!id) {\n      const filteredOptions = selectedDropdownOptions.filter(function (item) {\n        return item.id !== option_id;\n      });\n      this.setState({\n        selectedDropdownOptions: filteredOptions\n      });\n      return;\n    }\n\n    const optionData = {\n      id,\n      quantity,\n      value: [value]\n    };\n\n    if (selectedDropdownOptions.some(function ({\n      id: val\n    }) {\n      return val === id;\n    })) {\n      const filteredItems = selectedDropdownOptions.filter(function (item) {\n        return item.id !== id;\n      });\n      this.setState({\n        selectedDropdownOptions: filteredItems.concat(optionData)\n      });\n      return;\n    }\n\n    const newItemData = selectedDropdownOptions;\n    newItemData.push(optionData);\n    this.setState({\n      selectedDropdownOptions: Array.from(newItemData)\n    });\n  }\n\n  updateQuantity(value, quantity) {\n    const {\n      selectedCheckboxValues\n    } = this.state;\n    this.setState({\n      selectedCheckboxValues: selectedCheckboxValues.map(function (el) {\n        return JSON.stringify(el.value) === JSON.stringify(value) ? { ...el,\n          quantity\n        } : el;\n      })\n    });\n  }\n\n  setSelectedCheckboxValues(id, optionData) {\n    const {\n      selectedCheckboxValues\n    } = this.state;\n    const {\n      value,\n      quantity\n    } = optionData;\n    const selectedValue = {\n      id,\n      quantity,\n      value: [value]\n    };\n\n    if (selectedCheckboxValues.some(function ({\n      value: val\n    }) {\n      return JSON.stringify([value]) === JSON.stringify(val);\n    })) {\n      this.setState({\n        selectedCheckboxValues: selectedCheckboxValues.filter(function (item) {\n          return JSON.stringify(item.value) !== JSON.stringify([value]);\n        }) || []\n      });\n      return;\n    }\n\n    const newItemData = selectedCheckboxValues;\n    newItemData.push(selectedValue);\n    this.setState({\n      selectedCheckboxValues: Array.from(newItemData)\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_checkBEM(React, ProductBundleItems, Object.assign({}, this.props, this.state, this.containerFunctions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}, _class.propTypes = { ...ProductCustomizableOptionsContainer.propTypes,\n  items: ProductItemsType,\n  setBundlePrice: PropTypes.func.isRequired\n}, _class.defaultProps = {\n  items: []\n}, _temp), \"Component/ProductBundleItems/Container\");\nexport default ProductBundleItemsContainer;","map":{"version":3,"sources":["/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/component/ProductBundleItems/ProductBundleItems.container.js"],"names":["PropTypes","ProductCustomizableOptionsContainer","ProductItemsType","ProductBundleItems","containerFunctions","updateQuantity","bind","getItemsPrice","item","selectedDropdownOptions","selectedCheckboxValues","state","values","length","getOptionPrice","price","priceExclTax","initialPrice","componentDidMount","items","props","stopLoading","componentDidUpdate","_","prevState","isLoading","prevSelectedCheckboxValues","prevSelectedDropdownOptions","updateSelectedOptions","setState","selectedValues","option_id","options","filter","id","reduce","acc","quantity","value","selectedOption","find","option","JSON","stringify","toString","product","finalOptionPrice","finalOptionPriceExclTax","regularOptionPrice","getTotalPrice","map","finalPrice","getSelectedCustomizableOptions","setBundlePrice","bundleOptions","bundlePrices","push","setSelectedDropdownValue","filteredOptions","optionData","some","val","filteredItems","concat","newItemData","Array","from","el","setSelectedCheckboxValues","selectedValue","render","propTypes","func","isRequired","defaultProps","ProductBundleItemsContainer"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\n\nimport ProductCustomizableOptionsContainer\n    from 'Component/ProductCustomizableOptions/ProductCustomizableOptions.container';\nimport { ProductItemsType } from 'Type/ProductList';\n\nimport ProductBundleItems from './ProductBundleItems.component';\n\n/** @namespace Component/ProductBundleItems/Container */\nexport class ProductBundleItemsContainer extends ProductCustomizableOptionsContainer {\n    static propTypes = {\n        ...ProductCustomizableOptionsContainer.propTypes,\n        items: ProductItemsType,\n        setBundlePrice: PropTypes.func.isRequired\n    };\n\n    static defaultProps = {\n        items: []\n    };\n\n    containerFunctions = {\n        ...this.containerFunctions,\n        updateQuantity: this.updateQuantity.bind(this)\n    };\n\n    componentDidMount() {\n        const { items } = this.props;\n\n        if (items) {\n            this.stopLoading();\n        }\n    }\n\n    componentDidUpdate(_, prevState) {\n        const { items } = this.props;\n        const {\n            selectedCheckboxValues,\n            selectedDropdownOptions,\n            isLoading\n        } = this.state;\n\n        const {\n            selectedCheckboxValues: prevSelectedCheckboxValues,\n            selectedDropdownOptions: prevSelectedDropdownOptions\n        } = prevState;\n\n        if (items && isLoading) {\n            this.stopLoading();\n        }\n\n        if (\n            selectedDropdownOptions !== prevSelectedDropdownOptions\n            || selectedCheckboxValues !== prevSelectedCheckboxValues\n        ) {\n            this.updateSelectedOptions();\n        }\n    }\n\n    stopLoading() {\n        this.setState({ isLoading: false });\n    }\n\n    getOptionPrice(item, selectedValues) {\n        const { option_id, options } = item;\n\n        return selectedValues\n            .filter(({ id }) => id === option_id)\n            .reduce((acc, { quantity, value }) => {\n                const { price, priceExclTax, initialPrice } = acc;\n                const selectedOption = options.find(\n                    (option) => JSON.stringify(value) === JSON.stringify([option.id.toString()])\n                        && option.product !== null\n                );\n\n                if (!selectedOption) {\n                    return acc;\n                }\n\n                const {\n                    finalOptionPrice,\n                    finalOptionPriceExclTax,\n                    regularOptionPrice\n                } = selectedOption;\n\n                return {\n                    price: price + finalOptionPrice * quantity,\n                    priceExclTax: priceExclTax + finalOptionPriceExclTax * quantity,\n                    initialPrice: initialPrice + regularOptionPrice * quantity\n                };\n            }, { price: 0, priceExclTax: 0, initialPrice: 0 });\n    }\n\n    getItemsPrice = (item) => {\n        const {\n            selectedDropdownOptions = [],\n            selectedCheckboxValues = []\n        } = this.state;\n\n        const values = [...selectedCheckboxValues, ...selectedDropdownOptions];\n\n        if (values.length) {\n            return this.getOptionPrice(item, values);\n        }\n\n        return { price: 0, priceExclTax: 0, initialPrice: 0 };\n    };\n\n    getTotalPrice() {\n        const { items } = this.props;\n\n        return items\n            .map(this.getItemsPrice)\n            .reduce(\n                ({ price, finalPrice, priceExclTax }, item) => ({\n                    price: price + item.initialPrice,\n                    finalPrice: finalPrice + item.price,\n                    priceExclTax: priceExclTax + item.priceExclTax\n                }),\n                { price: 0, finalPrice: 0, priceExclTax: 0 }\n            );\n    }\n\n    updateSelectedOptions() {\n        const { getSelectedCustomizableOptions, setBundlePrice } = this.props;\n        const { selectedDropdownOptions, selectedCheckboxValues } = this.state;\n        const bundleOptions = [];\n        const bundlePrices = this.getTotalPrice();\n\n        bundleOptions.push(\n            ...bundleOptions,\n            ...selectedCheckboxValues,\n            ...selectedDropdownOptions\n        );\n\n        getSelectedCustomizableOptions(bundleOptions);\n        setBundlePrice(bundlePrices);\n    }\n\n    setSelectedDropdownValue(id, option) {\n        const { selectedDropdownOptions } = this.state;\n        const { value, quantity, option_id } = option;\n\n        if (!id) {\n            const filteredOptions = selectedDropdownOptions.filter((item) => item.id !== option_id);\n            this.setState({ selectedDropdownOptions: filteredOptions });\n\n            return;\n        }\n\n        const optionData = { id, quantity, value: [value] };\n\n        if (selectedDropdownOptions.some(({ id: val }) => val === id)) {\n            const filteredItems = selectedDropdownOptions.filter((item) => item.id !== id);\n            this.setState({ selectedDropdownOptions: filteredItems.concat(optionData) });\n\n            return;\n        }\n\n        const newItemData = selectedDropdownOptions;\n        newItemData.push(optionData);\n\n        this.setState({\n            selectedDropdownOptions: Array.from(newItemData)\n        });\n    }\n\n    updateQuantity(value, quantity) {\n        const { selectedCheckboxValues } = this.state;\n\n        this.setState({\n            selectedCheckboxValues: selectedCheckboxValues.map((el) => (\n                JSON.stringify(el.value) === JSON.stringify(value) ? { ...el, quantity } : el\n            ))\n        });\n    }\n\n    setSelectedCheckboxValues(id, optionData) {\n        const { selectedCheckboxValues } = this.state;\n        const { value, quantity } = optionData;\n        const selectedValue = { id, quantity, value: [value] };\n\n        if (selectedCheckboxValues.some(({ value: val }) => JSON.stringify([value]) === JSON.stringify(val))) {\n            this.setState({\n                selectedCheckboxValues: selectedCheckboxValues.filter(\n                    (item) => JSON.stringify(item.value) !== JSON.stringify([value])\n                ) || []\n            });\n\n            return;\n        }\n\n        const newItemData = selectedCheckboxValues;\n        newItemData.push(selectedValue);\n\n        this.setState({\n            selectedCheckboxValues: Array.from(newItemData)\n        });\n    }\n\n    render() {\n        return (\n            <ProductBundleItems\n              { ...this.props }\n              { ...this.state }\n              { ...this.containerFunctions }\n            />\n        );\n    }\n}\n\nexport default ProductBundleItemsContainer;\n"]},"metadata":{},"sourceType":"module"}