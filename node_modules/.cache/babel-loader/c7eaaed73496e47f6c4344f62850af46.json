{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/route/LoginAccount/LoginAccount.container.js\";\n\n/* eslint-disable @scandipwa/scandipwa-guidelines/jsx-no-props-destruction */\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { CUSTOMER_ACCOUNT, FORGOT_PASSWORD, REGISTER } from \"/home/arturs/scandiweb/scandipwa/src/component/Header/Header.config\";\nimport { mapDispatchToProps as sourceMapDispatchToProps, mapStateToProps, MyAccountOverlayContainer } from \"/home/arturs/scandiweb/scandipwa/src/component/MyAccountOverlay/MyAccountOverlay.container\";\nimport { toggleBreadcrumbs } from \"/home/arturs/scandiweb/scandipwa/src/store/Breadcrumbs/Breadcrumbs.action\";\nimport { isSignedIn } from \"/home/arturs/scandiweb/scandipwa/src/util/Auth\";\nimport history from \"/home/arturs/scandiweb/scandipwa/src/util/History\";\nimport { appendWithStoreCode } from \"/home/arturs/scandiweb/scandipwa/src/util/Url\";\nimport LoginAccount from \"./LoginAccount.component\";\n/** #namespace Component/LoginAccount/Container/mapDispatchToProps */\n\nexport const mapDispatchToProps = Mosaic.middleware(function (dispatch) {\n  return { ...sourceMapDispatchToProps(dispatch),\n    toggleBreadcrumbs: function (isVisible) {\n      return dispatch(toggleBreadcrumbs(isVisible));\n    }\n  };\n}, \"Component/LoginAccount/Container/mapDispatchToProps\");\n/** #namespace Scandipwa/Route/LoginAccount/Container/LoginAccountContainer */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const LoginAccountContainer = Mosaic.middleware((_temp = _class = class LoginAccountContainer_ extends Mosaic.Extensible(MyAccountOverlayContainer) {\n  constructor(...args) {\n    super(...args);\n    this.containerFunctions = { ...this.containerFunctions,\n      onCreateAccountClick: this.onCreateAccountClick.bind(this)\n    };\n  }\n\n  onCreateAccountClick() {\n    history.replace(appendWithStoreCode(`${REGISTER}`));\n  }\n\n  handleForgotPassword() {\n    history.replace(appendWithStoreCode(`${FORGOT_PASSWORD}`));\n  }\n\n  componentDidMount() {\n    const {\n      setHeaderState,\n      toggleBreadcrumbs\n    } = this.props;\n\n    if (isSignedIn()) {\n      history.push(appendWithStoreCode('/'));\n    }\n\n    setHeaderState({\n      name: CUSTOMER_ACCOUNT,\n      title: __('Sign in')\n    });\n    toggleBreadcrumbs(false);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (isSignedIn()) {\n      history.push(appendWithStoreCode('/'));\n      return;\n    }\n\n    super.componentDidUpdate(prevProps, prevState);\n  }\n\n  render() {\n    return /*#__PURE__*/_checkBEM(React, LoginAccount, Object.assign({}, this.props, this.state, this.containerFunctions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}, _class.propTypes = { ...MyAccountOverlayContainer.propTypes,\n  toggleBreadcrumbs: PropTypes.func.isRequired\n}, _temp), \"Scandipwa/Route/LoginAccount/Container/LoginAccountContainer\");\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginAccountContainer);","map":{"version":3,"sources":["/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/route/LoginAccount/LoginAccount.container.js"],"names":["PropTypes","connect","CUSTOMER_ACCOUNT","FORGOT_PASSWORD","REGISTER","mapDispatchToProps","sourceMapDispatchToProps","mapStateToProps","MyAccountOverlayContainer","toggleBreadcrumbs","isSignedIn","history","appendWithStoreCode","LoginAccount","dispatch","isVisible","containerFunctions","onCreateAccountClick","bind","replace","handleForgotPassword","componentDidMount","setHeaderState","props","push","name","title","__","componentDidUpdate","prevProps","prevState","render","state","propTypes","func","isRequired","LoginAccountContainer"],"mappings":";;;;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,gBAAT,EAA2BC,eAA3B,EAA4CC,QAA5C;AACA,SACIC,kBAAkB,IAAIC,wBAD1B,EAEIC,eAFJ,EAGIC,yBAHJ;AAKA,SAASC,iBAAT;AACA,SAASC,UAAT;AACA,OAAOC,OAAP;AACA,SAASC,mBAAT;AAEA,OAAOC,YAAP;AAEA;;AACA,OAAO,MAAMR,kBAAkB,qBAAG,UAACS,QAAD;AAAA,SAAe,EAC7C,GAAGR,wBAAwB,CAACQ,QAAD,CADkB;AAE7CL,IAAAA,iBAAiB,EAAE,UAACM,SAAD;AAAA,aAAeD,QAAQ,CAACL,iBAAiB,CAACM,SAAD,CAAlB,CAAvB;AAAA;AAF0B,GAAf;AAAA,CAAH,wDAAxB;AAKP;;;;AACA,gIAA2CP,yBAA3C,EAAqE;AAAA;AAAA;AAAA,SAMjEQ,kBANiE,GAM5C,EACjB,GAAG,KAAKA,kBADS;AAEjBC,MAAAA,oBAAoB,EAAE,KAAKA,oBAAL,CAA0BC,IAA1B,CAA+B,IAA/B;AAFL,KAN4C;AAAA;;AAWjED,EAAAA,oBAAoB,GAAG;AACnBN,IAAAA,OAAO,CAACQ,OAAR,CAAgBP,mBAAmB,CAAE,GAAGR,QAAU,EAAf,CAAnC;AACH;;AAEDgB,EAAAA,oBAAoB,GAAG;AACnBT,IAAAA,OAAO,CAACQ,OAAR,CAAgBP,mBAAmB,CAAE,GAAGT,eAAiB,EAAtB,CAAnC;AACH;;AAEDkB,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAAEC,MAAAA,cAAF;AAAkBb,MAAAA;AAAlB,QAAwC,KAAKc,KAAnD;;AAEA,QAAIb,UAAU,EAAd,EAAkB;AACdC,MAAAA,OAAO,CAACa,IAAR,CAAaZ,mBAAmB,CAAC,GAAD,CAAhC;AACH;;AAEDU,IAAAA,cAAc,CAAC;AAAEG,MAAAA,IAAI,EAAEvB,gBAAR;AAA0BwB,MAAAA,KAAK,EAAEC,EAAE,CAAC,SAAD;AAAnC,KAAD,CAAd;AACAlB,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH;;AAEDmB,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACrC,QAAIpB,UAAU,EAAd,EAAkB;AACdC,MAAAA,OAAO,CAACa,IAAR,CAAaZ,mBAAmB,CAAC,GAAD,CAAhC;AAEA;AACH;;AAED,UAAMgB,kBAAN,CAAyBC,SAAzB,EAAoCC,SAApC;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,yCACK,YADL,oBAEW,KAAKR,KAFhB,EAGW,KAAKS,KAHhB,EAIW,KAAKhB,kBAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOH;;AAhDgE,CAArE,SACWiB,SADX,GACuB,EACf,GAAGzB,yBAAyB,CAACyB,SADd;AAEfxB,EAAAA,iBAAiB,EAAET,SAAS,CAACkC,IAAV,CAAeC;AAFnB,CADvB;AAmDA,eAAelC,OAAO,CAACM,eAAD,EAAkBF,kBAAlB,CAAP,CAA6C+B,qBAA7C,CAAf","sourcesContent":["/* eslint-disable @scandipwa/scandipwa-guidelines/jsx-no-props-destruction */\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { CUSTOMER_ACCOUNT, FORGOT_PASSWORD, REGISTER } from 'Component/Header/Header.config';\nimport {\n    mapDispatchToProps as sourceMapDispatchToProps,\n    mapStateToProps,\n    MyAccountOverlayContainer\n} from 'Component/MyAccountOverlay/MyAccountOverlay.container';\nimport { toggleBreadcrumbs } from 'Store/Breadcrumbs/Breadcrumbs.action';\nimport { isSignedIn } from 'Util/Auth';\nimport history from 'Util/History';\nimport { appendWithStoreCode } from 'Util/Url';\n\nimport LoginAccount from './LoginAccount.component';\n\n/** @namespace Component/LoginAccount/Container/mapDispatchToProps */\nexport const mapDispatchToProps = (dispatch) => ({\n    ...sourceMapDispatchToProps(dispatch),\n    toggleBreadcrumbs: (isVisible) => dispatch(toggleBreadcrumbs(isVisible))\n});\n\n/** @namespace Scandipwa/Route/LoginAccount/Container/LoginAccountContainer */\nexport class LoginAccountContainer extends MyAccountOverlayContainer {\n    static propTypes = {\n        ...MyAccountOverlayContainer.propTypes,\n        toggleBreadcrumbs: PropTypes.func.isRequired\n    };\n\n    containerFunctions = {\n        ...this.containerFunctions,\n        onCreateAccountClick: this.onCreateAccountClick.bind(this)\n    };\n\n    onCreateAccountClick() {\n        history.replace(appendWithStoreCode(`${ REGISTER }`));\n    }\n\n    handleForgotPassword() {\n        history.replace(appendWithStoreCode(`${ FORGOT_PASSWORD }`));\n    }\n\n    componentDidMount() {\n        const { setHeaderState, toggleBreadcrumbs } = this.props;\n\n        if (isSignedIn()) {\n            history.push(appendWithStoreCode('/'));\n        }\n\n        setHeaderState({ name: CUSTOMER_ACCOUNT, title: __('Sign in') });\n        toggleBreadcrumbs(false);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (isSignedIn()) {\n            history.push(appendWithStoreCode('/'));\n\n            return;\n        }\n\n        super.componentDidUpdate(prevProps, prevState);\n    }\n\n    render() {\n        return (\n            <LoginAccount\n              { ...this.props }\n              { ...this.state }\n              { ...this.containerFunctions }\n            />\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginAccountContainer);\n"]},"metadata":{},"sourceType":"module"}