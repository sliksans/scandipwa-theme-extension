{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/component/ProductCustomizableOptions/ProductCustomizableOptions.container.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { OptionsType } from \"/home/arturs/scandiweb/extension/src/type/ProductList\";\nimport ProductCustomizableOptions from \"./ProductCustomizableOptions.component\";\n/** #namespace Component/ProductCustomizableOptions/Container */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const ProductCustomizableOptionsContainer = Mosaic.middleware((_temp = _class = class ProductCustomizableOptionsContainer_ extends Mosaic.Extensible(PureComponent) {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: true,\n      selectedCheckboxValues: [],\n      selectedDropdownOptions: [],\n      textFieldValues: [],\n      fileFieldValues: []\n    };\n    this.containerFunctions = {\n      setSelectedDropdownValue: this.setSelectedDropdownValue.bind(this),\n      setSelectedCheckboxValues: this.setSelectedCheckboxValues.bind(this),\n      setCustomizableOptionTextFieldValue: this.setCustomizableOptionTextFieldValue.bind(this),\n      setCustomizableOptionFileFieldValue: this.setCustomizableOptionFileFieldValue.bind(this)\n    };\n  }\n\n  componentDidMount() {\n    const {\n      options\n    } = this.props;\n\n    if (options) {\n      this.stopLoading();\n    }\n  }\n\n  componentDidUpdate(_, prevState) {\n    const {\n      options\n    } = this.props;\n    const {\n      selectedCheckboxValues,\n      selectedDropdownOptions,\n      textFieldValues,\n      fileFieldValues,\n      isLoading\n    } = this.state;\n    const {\n      selectedCheckboxValues: prevSelectedCheckboxValues,\n      selectedDropdownOptions: prevSelectedDropdownOptions,\n      textFieldValues: prevTextFieldValues,\n      fileFieldValues: prevFileFieldValues\n    } = prevState;\n\n    if (options && isLoading) {\n      this.stopLoading();\n    }\n\n    if (selectedCheckboxValues !== prevSelectedCheckboxValues) {\n      this.updateSelectedOptionsArray();\n    }\n\n    if (textFieldValues !== prevTextFieldValues || selectedDropdownOptions !== prevSelectedDropdownOptions) {\n      this.updateSelectedOptions();\n    }\n\n    if (fileFieldValues !== prevFileFieldValues) {\n      this.updateSelectedOptions();\n    }\n  }\n\n  stopLoading() {\n    this.setState({\n      isLoading: false\n    });\n  }\n\n  updateSelectedOptionsArray() {\n    const {\n      getSelectedCustomizableOptions\n    } = this.props;\n    const {\n      selectedCheckboxValues\n    } = this.state;\n    getSelectedCustomizableOptions(selectedCheckboxValues, true);\n  }\n\n  updateSelectedOptions() {\n    const {\n      getSelectedCustomizableOptions\n    } = this.props;\n    const {\n      selectedDropdownOptions,\n      textFieldValues,\n      fileFieldValues\n    } = this.state;\n    const customizableOptions = [];\n    customizableOptions.push(...customizableOptions, ...textFieldValues, ...selectedDropdownOptions, ...fileFieldValues);\n    getSelectedCustomizableOptions(customizableOptions);\n  }\n\n  setCustomizableOptionTextFieldValue(option_id, option_value) {\n    const {\n      textFieldValues\n    } = this.state;\n\n    if (!option_value) {\n      const filteredOptions = textFieldValues.filter(function (item) {\n        return item.option_id !== option_id;\n      });\n      return this.setState({\n        textFieldValues: filteredOptions\n      });\n    }\n\n    const textFieldValue = {\n      option_id,\n      option_value\n    };\n\n    if (textFieldValues.some(function ({\n      option_id: val\n    }) {\n      return option_id === val;\n    })) {\n      const filteredItems = textFieldValues.filter(function (value) {\n        return value.option_id !== option_id;\n      });\n      return this.setState({\n        textFieldValues: filteredItems.concat(textFieldValue)\n      });\n    }\n\n    return this.setState({\n      textFieldValues: [...textFieldValues, textFieldValue]\n    });\n  }\n\n  setCustomizableOptionFileFieldValue(value, option, filename) {\n    const {\n      option_id\n    } = option;\n    return this.setState({\n      fileFieldValues: [{\n        option_id,\n        option_value: value,\n        option_filename: filename\n      }]\n    });\n  }\n\n  setSelectedDropdownValue(value, option) {\n    const {\n      selectedDropdownOptions\n    } = this.state;\n    const {\n      option_id\n    } = option;\n\n    if (!value) {\n      const filteredOptions = selectedDropdownOptions.filter(function (item) {\n        return item.option_id !== option_id;\n      });\n      return this.setState({\n        selectedDropdownOptions: filteredOptions\n      });\n    }\n\n    const optionData = {\n      option_id,\n      option_value: value\n    };\n\n    if (selectedDropdownOptions.some(function ({\n      option_id: val\n    }) {\n      return option_id === val;\n    })) {\n      const filteredItems = selectedDropdownOptions.filter(function (value) {\n        return value.option_id !== option_id;\n      });\n      return this.setState({\n        selectedDropdownOptions: filteredItems.concat(optionData)\n      });\n    }\n\n    return this.setState({\n      selectedDropdownOptions: [...selectedDropdownOptions, optionData]\n    });\n  }\n\n  setSelectedCheckboxValues(option_id, option_value) {\n    const {\n      selectedCheckboxValues\n    } = this.state;\n    const selectedValue = {\n      option_id,\n      option_value\n    };\n\n    if (selectedCheckboxValues.some(function ({\n      option_value: val\n    }) {\n      return option_value === val;\n    })) {\n      this.setState({\n        selectedCheckboxValues: selectedCheckboxValues.filter(function (value) {\n          return value.option_value !== option_value;\n        }) || []\n      });\n      return;\n    }\n\n    this.setState({\n      selectedCheckboxValues: [...selectedCheckboxValues, selectedValue]\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_checkBEM(React, ProductCustomizableOptions, Object.assign({}, this.props, this.state, this.containerFunctions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}, _class.propTypes = {\n  options: OptionsType,\n  getSelectedCustomizableOptions: PropTypes.func.isRequired\n}, _class.defaultProps = {\n  options: []\n}, _temp), \"Component/ProductCustomizableOptions/Container\");\nexport default ProductCustomizableOptionsContainer;","map":{"version":3,"sources":["/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/component/ProductCustomizableOptions/ProductCustomizableOptions.container.js"],"names":["PropTypes","PureComponent","OptionsType","ProductCustomizableOptions","state","isLoading","selectedCheckboxValues","selectedDropdownOptions","textFieldValues","fileFieldValues","containerFunctions","setSelectedDropdownValue","bind","setSelectedCheckboxValues","setCustomizableOptionTextFieldValue","setCustomizableOptionFileFieldValue","componentDidMount","options","props","stopLoading","componentDidUpdate","_","prevState","prevSelectedCheckboxValues","prevSelectedDropdownOptions","prevTextFieldValues","prevFileFieldValues","updateSelectedOptionsArray","updateSelectedOptions","setState","getSelectedCustomizableOptions","customizableOptions","push","option_id","option_value","filteredOptions","filter","item","textFieldValue","some","val","filteredItems","value","concat","option","filename","option_filename","optionData","selectedValue","render","propTypes","func","isRequired","defaultProps","ProductCustomizableOptionsContainer"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,aAAT,QAA8B,OAA9B;AAEA,SAASC,WAAT;AAEA,OAAOC,0BAAP;AAEA;;;;AACA,4JAAyDF,aAAzD,EAAuE;AAAA;AAAA;AAAA,SAUnEG,KAVmE,GAU3D;AACJC,MAAAA,SAAS,EAAE,IADP;AAEJC,MAAAA,sBAAsB,EAAE,EAFpB;AAGJC,MAAAA,uBAAuB,EAAE,EAHrB;AAIJC,MAAAA,eAAe,EAAE,EAJb;AAKJC,MAAAA,eAAe,EAAE;AALb,KAV2D;AAAA,SAkBnEC,kBAlBmE,GAkB9C;AACjBC,MAAAA,wBAAwB,EAAE,KAAKA,wBAAL,CAA8BC,IAA9B,CAAmC,IAAnC,CADT;AAEjBC,MAAAA,yBAAyB,EAAE,KAAKA,yBAAL,CAA+BD,IAA/B,CAAoC,IAApC,CAFV;AAGjBE,MAAAA,mCAAmC,EAAE,KAAKA,mCAAL,CAAyCF,IAAzC,CAA8C,IAA9C,CAHpB;AAIjBG,MAAAA,mCAAmC,EAAE,KAAKA,mCAAL,CAAyCH,IAAzC,CAA8C,IAA9C;AAJpB,KAlB8C;AAAA;;AAyBnEI,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB;;AAEA,QAAID,OAAJ,EAAa;AACT,WAAKE,WAAL;AACH;AACJ;;AAEDC,EAAAA,kBAAkB,CAACC,CAAD,EAAIC,SAAJ,EAAe;AAC7B,UAAM;AAAEL,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,UAAM;AACFZ,MAAAA,sBADE;AAEFC,MAAAA,uBAFE;AAGFC,MAAAA,eAHE;AAIFC,MAAAA,eAJE;AAKFJ,MAAAA;AALE,QAMF,KAAKD,KANT;AAQA,UAAM;AACFE,MAAAA,sBAAsB,EAAEiB,0BADtB;AAEFhB,MAAAA,uBAAuB,EAAEiB,2BAFvB;AAGFhB,MAAAA,eAAe,EAAEiB,mBAHf;AAIFhB,MAAAA,eAAe,EAAEiB;AAJf,QAKFJ,SALJ;;AAOA,QAAIL,OAAO,IAAIZ,SAAf,EAA0B;AACtB,WAAKc,WAAL;AACH;;AAED,QAAIb,sBAAsB,KAAKiB,0BAA/B,EAA2D;AACvD,WAAKI,0BAAL;AACH;;AAED,QAAInB,eAAe,KAAKiB,mBAApB,IACGlB,uBAAuB,KAAKiB,2BADnC,EAEE;AACE,WAAKI,qBAAL;AACH;;AAED,QAAInB,eAAe,KAAKiB,mBAAxB,EAA6C;AACzC,WAAKE,qBAAL;AACH;AACJ;;AAEDT,EAAAA,WAAW,GAAG;AACV,SAAKU,QAAL,CAAc;AAAExB,MAAAA,SAAS,EAAE;AAAb,KAAd;AACH;;AAEDsB,EAAAA,0BAA0B,GAAG;AACzB,UAAM;AAAEG,MAAAA;AAAF,QAAqC,KAAKZ,KAAhD;AACA,UAAM;AAAEZ,MAAAA;AAAF,QAA6B,KAAKF,KAAxC;AACA0B,IAAAA,8BAA8B,CAACxB,sBAAD,EAAyB,IAAzB,CAA9B;AACH;;AAEDsB,EAAAA,qBAAqB,GAAG;AACpB,UAAM;AAAEE,MAAAA;AAAF,QAAqC,KAAKZ,KAAhD;AACA,UAAM;AACFX,MAAAA,uBADE;AAEFC,MAAAA,eAFE;AAGFC,MAAAA;AAHE,QAIF,KAAKL,KAJT;AAKA,UAAM2B,mBAAmB,GAAG,EAA5B;AAEAA,IAAAA,mBAAmB,CAACC,IAApB,CACI,GAAGD,mBADP,EAEI,GAAGvB,eAFP,EAGI,GAAGD,uBAHP,EAII,GAAGE,eAJP;AAOAqB,IAAAA,8BAA8B,CAACC,mBAAD,CAA9B;AACH;;AAEDjB,EAAAA,mCAAmC,CAACmB,SAAD,EAAYC,YAAZ,EAA0B;AACzD,UAAM;AAAE1B,MAAAA;AAAF,QAAsB,KAAKJ,KAAjC;;AAEA,QAAI,CAAC8B,YAAL,EAAmB;AACf,YAAMC,eAAe,GAAG3B,eAAe,CAAC4B,MAAhB,CAAuB,UAACC,IAAD;AAAA,eAAUA,IAAI,CAACJ,SAAL,KAAmBA,SAA7B;AAAA,OAAvB,CAAxB;AACA,aAAO,KAAKJ,QAAL,CAAc;AAAErB,QAAAA,eAAe,EAAE2B;AAAnB,OAAd,CAAP;AACH;;AAED,UAAMG,cAAc,GAAG;AAAEL,MAAAA,SAAF;AAAaC,MAAAA;AAAb,KAAvB;;AAEA,QAAI1B,eAAe,CAAC+B,IAAhB,CAAqB,UAAC;AAAEN,MAAAA,SAAS,EAAEO;AAAb,KAAD;AAAA,aAAwBP,SAAS,KAAKO,GAAtC;AAAA,KAArB,CAAJ,EAAqE;AACjE,YAAMC,aAAa,GAAGjC,eAAe,CAAC4B,MAAhB,CAAuB,UAACM,KAAD;AAAA,eAAWA,KAAK,CAACT,SAAN,KAAoBA,SAA/B;AAAA,OAAvB,CAAtB;AACA,aAAO,KAAKJ,QAAL,CAAc;AAAErB,QAAAA,eAAe,EAAEiC,aAAa,CAACE,MAAd,CAAqBL,cAArB;AAAnB,OAAd,CAAP;AACH;;AAED,WAAO,KAAKT,QAAL,CAAc;AAAErB,MAAAA,eAAe,EAAE,CAAC,GAAGA,eAAJ,EAAqB8B,cAArB;AAAnB,KAAd,CAAP;AACH;;AAEDvB,EAAAA,mCAAmC,CAAC2B,KAAD,EAAQE,MAAR,EAAgBC,QAAhB,EAA0B;AACzD,UAAM;AAAEZ,MAAAA;AAAF,QAAgBW,MAAtB;AAEA,WAAO,KAAKf,QAAL,CAAc;AAAEpB,MAAAA,eAAe,EAAE,CAAC;AAAEwB,QAAAA,SAAF;AAAaC,QAAAA,YAAY,EAAEQ,KAA3B;AAAkCI,QAAAA,eAAe,EAAED;AAAnD,OAAD;AAAnB,KAAd,CAAP;AACH;;AAEDlC,EAAAA,wBAAwB,CAAC+B,KAAD,EAAQE,MAAR,EAAgB;AACpC,UAAM;AAAErC,MAAAA;AAAF,QAA8B,KAAKH,KAAzC;AACA,UAAM;AAAE6B,MAAAA;AAAF,QAAgBW,MAAtB;;AAEA,QAAI,CAACF,KAAL,EAAY;AACR,YAAMP,eAAe,GAAG5B,uBAAuB,CAAC6B,MAAxB,CAA+B,UAACC,IAAD;AAAA,eAAUA,IAAI,CAACJ,SAAL,KAAmBA,SAA7B;AAAA,OAA/B,CAAxB;AACA,aAAO,KAAKJ,QAAL,CAAc;AAAEtB,QAAAA,uBAAuB,EAAE4B;AAA3B,OAAd,CAAP;AACH;;AAED,UAAMY,UAAU,GAAG;AAAEd,MAAAA,SAAF;AAAaC,MAAAA,YAAY,EAAEQ;AAA3B,KAAnB;;AAEA,QAAInC,uBAAuB,CAACgC,IAAxB,CAA6B,UAAC;AAAEN,MAAAA,SAAS,EAAEO;AAAb,KAAD;AAAA,aAAwBP,SAAS,KAAKO,GAAtC;AAAA,KAA7B,CAAJ,EAA6E;AACzE,YAAMC,aAAa,GAAGlC,uBAAuB,CAAC6B,MAAxB,CAA+B,UAACM,KAAD;AAAA,eAAWA,KAAK,CAACT,SAAN,KAAoBA,SAA/B;AAAA,OAA/B,CAAtB;AACA,aAAO,KAAKJ,QAAL,CAAc;AAAEtB,QAAAA,uBAAuB,EAAEkC,aAAa,CAACE,MAAd,CAAqBI,UAArB;AAA3B,OAAd,CAAP;AACH;;AAED,WAAO,KAAKlB,QAAL,CAAc;AACjBtB,MAAAA,uBAAuB,EACnB,CAAC,GAAGA,uBAAJ,EAA6BwC,UAA7B;AAFa,KAAd,CAAP;AAIH;;AAEDlC,EAAAA,yBAAyB,CAACoB,SAAD,EAAYC,YAAZ,EAA0B;AAC/C,UAAM;AAAE5B,MAAAA;AAAF,QAA6B,KAAKF,KAAxC;AACA,UAAM4C,aAAa,GAAG;AAAEf,MAAAA,SAAF;AAAaC,MAAAA;AAAb,KAAtB;;AAEA,QAAI5B,sBAAsB,CAACiC,IAAvB,CAA4B,UAAC;AAAEL,MAAAA,YAAY,EAAEM;AAAhB,KAAD;AAAA,aAA2BN,YAAY,KAAKM,GAA5C;AAAA,KAA5B,CAAJ,EAAkF;AAC9E,WAAKX,QAAL,CAAc;AACVvB,QAAAA,sBAAsB,EAAEA,sBAAsB,CAAC8B,MAAvB,CACpB,UAACM,KAAD;AAAA,iBAAWA,KAAK,CAACR,YAAN,KAAuBA,YAAlC;AAAA,SADoB,KAEnB;AAHK,OAAd;AAMA;AACH;;AAED,SAAKL,QAAL,CAAc;AACVvB,MAAAA,sBAAsB,EAAE,CAAC,GAAGA,sBAAJ,EAA4B0C,aAA5B;AADd,KAAd;AAGH;;AAEDC,EAAAA,MAAM,GAAG;AACL,yCACK,0BADL,oBAEW,KAAK/B,KAFhB,EAGW,KAAKd,KAHhB,EAIW,KAAKM,kBAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOH;;AA3KkE,CAAvE,SACWwC,SADX,GACuB;AACfjC,EAAAA,OAAO,EAAEf,WADM;AAEf4B,EAAAA,8BAA8B,EAAE9B,SAAS,CAACmD,IAAV,CAAeC;AAFhC,CADvB,SAMWC,YANX,GAM0B;AAClBpC,EAAAA,OAAO,EAAE;AADS,CAN1B;AA8KA,eAAeqC,mCAAf","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { OptionsType } from 'Type/ProductList';\n\nimport ProductCustomizableOptions from './ProductCustomizableOptions.component';\n\n/** @namespace Component/ProductCustomizableOptions/Container */\nexport class ProductCustomizableOptionsContainer extends PureComponent {\n    static propTypes = {\n        options: OptionsType,\n        getSelectedCustomizableOptions: PropTypes.func.isRequired\n    };\n\n    static defaultProps = {\n        options: []\n    };\n\n    state = {\n        isLoading: true,\n        selectedCheckboxValues: [],\n        selectedDropdownOptions: [],\n        textFieldValues: [],\n        fileFieldValues: []\n    };\n\n    containerFunctions = {\n        setSelectedDropdownValue: this.setSelectedDropdownValue.bind(this),\n        setSelectedCheckboxValues: this.setSelectedCheckboxValues.bind(this),\n        setCustomizableOptionTextFieldValue: this.setCustomizableOptionTextFieldValue.bind(this),\n        setCustomizableOptionFileFieldValue: this.setCustomizableOptionFileFieldValue.bind(this)\n    };\n\n    componentDidMount() {\n        const { options } = this.props;\n\n        if (options) {\n            this.stopLoading();\n        }\n    }\n\n    componentDidUpdate(_, prevState) {\n        const { options } = this.props;\n        const {\n            selectedCheckboxValues,\n            selectedDropdownOptions,\n            textFieldValues,\n            fileFieldValues,\n            isLoading\n        } = this.state;\n\n        const {\n            selectedCheckboxValues: prevSelectedCheckboxValues,\n            selectedDropdownOptions: prevSelectedDropdownOptions,\n            textFieldValues: prevTextFieldValues,\n            fileFieldValues: prevFileFieldValues\n        } = prevState;\n\n        if (options && isLoading) {\n            this.stopLoading();\n        }\n\n        if (selectedCheckboxValues !== prevSelectedCheckboxValues) {\n            this.updateSelectedOptionsArray();\n        }\n\n        if (textFieldValues !== prevTextFieldValues\n            || selectedDropdownOptions !== prevSelectedDropdownOptions\n        ) {\n            this.updateSelectedOptions();\n        }\n\n        if (fileFieldValues !== prevFileFieldValues) {\n            this.updateSelectedOptions();\n        }\n    }\n\n    stopLoading() {\n        this.setState({ isLoading: false });\n    }\n\n    updateSelectedOptionsArray() {\n        const { getSelectedCustomizableOptions } = this.props;\n        const { selectedCheckboxValues } = this.state;\n        getSelectedCustomizableOptions(selectedCheckboxValues, true);\n    }\n\n    updateSelectedOptions() {\n        const { getSelectedCustomizableOptions } = this.props;\n        const {\n            selectedDropdownOptions,\n            textFieldValues,\n            fileFieldValues\n        } = this.state;\n        const customizableOptions = [];\n\n        customizableOptions.push(\n            ...customizableOptions,\n            ...textFieldValues,\n            ...selectedDropdownOptions,\n            ...fileFieldValues\n        );\n\n        getSelectedCustomizableOptions(customizableOptions);\n    }\n\n    setCustomizableOptionTextFieldValue(option_id, option_value) {\n        const { textFieldValues } = this.state;\n\n        if (!option_value) {\n            const filteredOptions = textFieldValues.filter((item) => item.option_id !== option_id);\n            return this.setState({ textFieldValues: filteredOptions });\n        }\n\n        const textFieldValue = { option_id, option_value };\n\n        if (textFieldValues.some(({ option_id: val }) => option_id === val)) {\n            const filteredItems = textFieldValues.filter((value) => value.option_id !== option_id);\n            return this.setState({ textFieldValues: filteredItems.concat(textFieldValue) });\n        }\n\n        return this.setState({ textFieldValues: [...textFieldValues, textFieldValue] });\n    }\n\n    setCustomizableOptionFileFieldValue(value, option, filename) {\n        const { option_id } = option;\n\n        return this.setState({ fileFieldValues: [{ option_id, option_value: value, option_filename: filename }] });\n    }\n\n    setSelectedDropdownValue(value, option) {\n        const { selectedDropdownOptions } = this.state;\n        const { option_id } = option;\n\n        if (!value) {\n            const filteredOptions = selectedDropdownOptions.filter((item) => item.option_id !== option_id);\n            return this.setState({ selectedDropdownOptions: filteredOptions });\n        }\n\n        const optionData = { option_id, option_value: value };\n\n        if (selectedDropdownOptions.some(({ option_id: val }) => option_id === val)) {\n            const filteredItems = selectedDropdownOptions.filter((value) => value.option_id !== option_id);\n            return this.setState({ selectedDropdownOptions: filteredItems.concat(optionData) });\n        }\n\n        return this.setState({\n            selectedDropdownOptions:\n                [...selectedDropdownOptions, optionData]\n        });\n    }\n\n    setSelectedCheckboxValues(option_id, option_value) {\n        const { selectedCheckboxValues } = this.state;\n        const selectedValue = { option_id, option_value };\n\n        if (selectedCheckboxValues.some(({ option_value: val }) => option_value === val)) {\n            this.setState({\n                selectedCheckboxValues: selectedCheckboxValues.filter(\n                    (value) => value.option_value !== option_value\n                ) || []\n            });\n\n            return;\n        }\n\n        this.setState({\n            selectedCheckboxValues: [...selectedCheckboxValues, selectedValue]\n        });\n    }\n\n    render() {\n        return (\n            <ProductCustomizableOptions\n              { ...this.props }\n              { ...this.state }\n              { ...this.containerFunctions }\n            />\n        );\n    }\n}\n\nexport default ProductCustomizableOptionsContainer;\n"]},"metadata":{},"sourceType":"module"}