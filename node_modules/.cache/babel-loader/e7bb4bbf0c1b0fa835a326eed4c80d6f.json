{"ast":null,"code":"/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport { updateMeta } from \"/home/arturs/scandiweb/extension/src/store/Meta/Meta.action\";\nimport { appendWithStoreCode } from \"/home/arturs/scandiweb/extension/src/util/Url\";\n/**\n * Meta Dispatcher\n * @class MetaDispatcher\n * #namespace Util/Meta/Dispatcher\n */\n\nexport const MetaDispatcher = Mosaic.middleware(class MetaDispatcher_ extends Mosaic.Extensible() {\n  /**\n   * Set meta for category\n   * @param {Object} category\n   * @param {Function} dispatch\n   * @memberof MetaDispatcher\n   */\n  updateWithCategory(category, dispatch) {\n    const meta = this._getCategoryMeta(category);\n\n    dispatch(updateMeta(meta));\n  }\n  /**\n   * Set meta for product\n   * @param {Object} product\n   * @param {Function} dispatch\n   * @memberof MetaDispatcher\n   */\n\n\n  updateWithProduct(product, dispatch) {\n    const meta = this._getProductMeta(product);\n\n    dispatch(updateMeta(meta));\n  }\n  /**\n   * Get meta for product\n   * @param {Object} product\n   * @return {Object} Meta object\n   * @memberof MetaDispatcher\n   */\n\n\n  _getProductMeta(product) {\n    const {\n      name,\n      meta_title,\n      meta_keyword,\n      canonical_url,\n      meta_description\n    } = product;\n    return {\n      description: meta_description,\n      keywords: meta_keyword,\n      title: meta_title || name,\n      canonical_url: `${window.location.origin}${appendWithStoreCode(canonical_url)}`\n    };\n  }\n  /**\n   * Get meta for category\n   * @param {Object} category\n   * @return {Object} Meta object\n   * @memberof MetaDispatcher\n   */\n\n\n  _getCategoryMeta(category) {\n    const {\n      description,\n      name,\n      canonical_url,\n      meta_title,\n      meta_keywords,\n      meta_description,\n      meta_robots = 'follow, index'\n    } = category;\n    return {\n      description: meta_description || description,\n      title: meta_title || name,\n      keywords: meta_keywords,\n      canonical_url: `${window.location.origin}${appendWithStoreCode(canonical_url)}`,\n      robots: meta_robots\n    };\n  }\n\n}, \"Util/Meta/Dispatcher\");\nexport default new MetaDispatcher();","map":{"version":3,"sources":["/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/store/Meta/Meta.dispatcher.js"],"names":["updateMeta","appendWithStoreCode","updateWithCategory","category","dispatch","meta","_getCategoryMeta","updateWithProduct","product","_getProductMeta","name","meta_title","meta_keyword","canonical_url","meta_description","description","keywords","title","window","location","origin","meta_keywords","meta_robots","robots","MetaDispatcher"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAT;AACA,SAASC,mBAAT;AAEA;AACA;AACA;AACA;AACA;;AACA,kGAA4B;AACxB;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,kBAAkB,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACnC,UAAMC,IAAI,GAAG,KAAKC,gBAAL,CAAsBH,QAAtB,CAAb;;AACAC,IAAAA,QAAQ,CAACJ,UAAU,CAACK,IAAD,CAAX,CAAR;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,iBAAiB,CAACC,OAAD,EAAUJ,QAAV,EAAoB;AACjC,UAAMC,IAAI,GAAG,KAAKI,eAAL,CAAqBD,OAArB,CAAb;;AACAJ,IAAAA,QAAQ,CAACJ,UAAU,CAACK,IAAD,CAAX,CAAR;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACII,EAAAA,eAAe,CAACD,OAAD,EAAU;AACrB,UAAM;AACFE,MAAAA,IADE;AAEFC,MAAAA,UAFE;AAGFC,MAAAA,YAHE;AAIFC,MAAAA,aAJE;AAKFC,MAAAA;AALE,QAMFN,OANJ;AAQA,WAAO;AACHO,MAAAA,WAAW,EAAED,gBADV;AAEHE,MAAAA,QAAQ,EAAEJ,YAFP;AAGHK,MAAAA,KAAK,EAAEN,UAAU,IAAID,IAHlB;AAIHG,MAAAA,aAAa,EAAG,GAAEK,MAAM,CAACC,QAAP,CAAgBC,MAAO,GAAEnB,mBAAmB,CAACY,aAAD,CAAgB;AAJ3E,KAAP;AAMH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIP,EAAAA,gBAAgB,CAACH,QAAD,EAAW;AACvB,UAAM;AACFY,MAAAA,WADE;AACWL,MAAAA,IADX;AACiBG,MAAAA,aADjB;AAEFF,MAAAA,UAFE;AAEUU,MAAAA,aAFV;AAEyBP,MAAAA,gBAFzB;AAGFQ,MAAAA,WAAW,GAAG;AAHZ,QAIFnB,QAJJ;AAMA,WAAO;AACHY,MAAAA,WAAW,EAAED,gBAAgB,IAAIC,WAD9B;AAEHE,MAAAA,KAAK,EAAEN,UAAU,IAAID,IAFlB;AAGHM,MAAAA,QAAQ,EAAEK,aAHP;AAIHR,MAAAA,aAAa,EAAG,GAAEK,MAAM,CAACC,QAAP,CAAgBC,MAAO,GAAEnB,mBAAmB,CAACY,aAAD,CAAgB,EAJ3E;AAKHU,MAAAA,MAAM,EAAED;AALL,KAAP;AAOH;;AAlEuB,CAA5B;AAqEA,eAAe,IAAIE,cAAJ,EAAf","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport { updateMeta } from 'Store/Meta/Meta.action';\nimport { appendWithStoreCode } from 'Util/Url';\n\n/**\n * Meta Dispatcher\n * @class MetaDispatcher\n * @namespace Util/Meta/Dispatcher\n */\nexport class MetaDispatcher {\n    /**\n     * Set meta for category\n     * @param {Object} category\n     * @param {Function} dispatch\n     * @memberof MetaDispatcher\n     */\n    updateWithCategory(category, dispatch) {\n        const meta = this._getCategoryMeta(category);\n        dispatch(updateMeta(meta));\n    }\n\n    /**\n     * Set meta for product\n     * @param {Object} product\n     * @param {Function} dispatch\n     * @memberof MetaDispatcher\n     */\n    updateWithProduct(product, dispatch) {\n        const meta = this._getProductMeta(product);\n        dispatch(updateMeta(meta));\n    }\n\n    /**\n     * Get meta for product\n     * @param {Object} product\n     * @return {Object} Meta object\n     * @memberof MetaDispatcher\n     */\n    _getProductMeta(product) {\n        const {\n            name,\n            meta_title,\n            meta_keyword,\n            canonical_url,\n            meta_description\n        } = product;\n\n        return {\n            description: meta_description,\n            keywords: meta_keyword,\n            title: meta_title || name,\n            canonical_url: `${window.location.origin}${appendWithStoreCode(canonical_url)}`\n        };\n    }\n\n    /**\n     * Get meta for category\n     * @param {Object} category\n     * @return {Object} Meta object\n     * @memberof MetaDispatcher\n     */\n    _getCategoryMeta(category) {\n        const {\n            description, name, canonical_url,\n            meta_title, meta_keywords, meta_description,\n            meta_robots = 'follow, index'\n        } = category;\n\n        return {\n            description: meta_description || description,\n            title: meta_title || name,\n            keywords: meta_keywords,\n            canonical_url: `${window.location.origin}${appendWithStoreCode(canonical_url)}`,\n            robots: meta_robots\n        };\n    }\n}\n\nexport default new MetaDispatcher();\n"]},"metadata":{},"sourceType":"module"}