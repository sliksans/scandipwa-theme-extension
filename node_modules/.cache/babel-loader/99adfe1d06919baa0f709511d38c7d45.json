{"ast":null,"code":"var _this = this;\n\n/* eslint-disable @scandipwa/scandipwa-guidelines/create-config-files */\n\n/* eslint-disable no-console */\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport { getAuthorizationToken } from \"/home/arturs/scandiweb/scandipwa/src/util/Auth\";\nimport { getCurrency } from \"/home/arturs/scandiweb/scandipwa/src/util/Currency\";\nimport { hash } from \"./Hash\";\nexport const GRAPHQL_URI = '/graphql';\nexport const WINDOW_ID = 'WINDOW_ID';\n/** #namespace Util/Request/getWindowId */\n\nexport const getWindowId = Mosaic.middleware(function () {\n  const result = sessionStorage.getItem(WINDOW_ID);\n\n  if (!result) {\n    const id = Date.now();\n    sessionStorage.setItem(WINDOW_ID, id);\n    return id;\n  }\n\n  return result;\n}, \"Util/Request/getWindowId\");\n/** #namespace Util/Request/getStoreCodePath */\n\nexport const getStoreCodePath = Mosaic.middleware(function () {\n  const path = location.pathname; // eslint-disable-next-line no-undef\n\n  const firstPathPart = path.split('/')[1];\n\n  if (window.storeList.includes(firstPathPart)) {\n    return `/${firstPathPart}`;\n  }\n\n  return '';\n}, \"Util/Request/getStoreCodePath\");\n/** #namespace Util/Request/getGraphqlEndpoint */\n\nexport const getGraphqlEndpoint = Mosaic.middleware(function () {\n  return getStoreCodePath().concat(GRAPHQL_URI);\n}, \"Util/Request/getGraphqlEndpoint\");\n/**\n * Append authorization token to header object\n * @param {Object} headers\n * @returns {Object} Headers with appended authorization\n * #namespace Util/Request/appendTokenToHeaders\n */\n\nexport const appendTokenToHeaders = Mosaic.middleware(function (headers) {\n  const token = getAuthorizationToken();\n  return { ...headers,\n    Authorization: token ? `Bearer ${token}` : ''\n  };\n}, \"Util/Request/appendTokenToHeaders\");\n/**\n *\n * @param {String} query Request body\n * @param {Object} variables Request variables\n * @param {String} url GraphQL url\n * @returns {*}\n * #namespace Util/Request/formatURI\n */\n\nexport const formatURI = Mosaic.middleware(function (query, variables, url) {\n  // eslint-disable-next-line no-param-reassign\n  variables._currency = getCurrency();\n  const stringifyVariables = Object.keys(variables).reduce(function (acc, variable) {\n    return [...acc, `${variable}=${JSON.stringify(variables[variable])}`];\n  }, [`?hash=${hash(query)}`]);\n  return `${url}${stringifyVariables.join('&')}`;\n}, \"Util/Request/formatURI\");\n/**\n *\n * @param {String} uri\n * @param {String} name\n * @returns {Promise<Response>}\n * #namespace Util/Request/getFetch\n */\n\nexport const getFetch = Mosaic.middleware(function (uri, name) {\n  return fetch(uri, {\n    method: 'GET',\n    headers: appendTokenToHeaders({\n      'Content-Type': 'application/json',\n      'Application-Model': `${name}_${getWindowId()}`,\n      Accept: 'application/json'\n    })\n  });\n}, \"Util/Request/getFetch\");\n/**\n *\n * @param {String} graphQlURI\n * @param {{}} query Request body\n * @param {Int} cacheTTL\n * #namespace Util/Request/putPersistedQuery\n */\n\nexport const putPersistedQuery = Mosaic.middleware(function (graphQlURI, query, cacheTTL) {\n  return fetch(`${graphQlURI}?hash=${hash(query)}`, {\n    method: 'PUT',\n    body: JSON.stringify(query),\n    headers: {\n      'Content-Type': 'application/json',\n      'SW-Cache-Age': cacheTTL\n    }\n  });\n}, \"Util/Request/putPersistedQuery\");\n/**\n *\n * @param {String} graphQlURI\n * @param {String} queryObject\n * @param {String} name\n * @returns {Promise<Response>}\n * #namespace Util/Request/postFetch\n */\n\nexport const postFetch = Mosaic.middleware(function (graphQlURI, query, variables) {\n  return fetch(graphQlURI, {\n    method: 'POST',\n    body: JSON.stringify({\n      query,\n      variables\n    }),\n    headers: appendTokenToHeaders({\n      'Content-Type': 'application/json',\n      Accept: 'application/json'\n    })\n  });\n}, \"Util/Request/postFetch\");\n/**\n * Checks for errors in response, if they exist, rejects promise\n * @param  {Object} res Response from GraphQL endpoint\n * @return {Promise<Object>} Handled GraphqlQL results promise\n * #namespace Util/Request/checkForErrors\n */\n\nexport const checkForErrors = Mosaic.middleware(function (res) {\n  return new Promise(function (resolve, reject) {\n    const {\n      errors,\n      data\n    } = res;\n    return errors ? reject(errors) : resolve(data);\n  });\n}, \"Util/Request/checkForErrors\");\n/**\n * Handle connection errors\n * @param  {any} err Error from fetch\n * @return {void} Simply console error\n * #namespace Util/Request/handleConnectionError\n */\n\nexport const handleConnectionError = Mosaic.middleware(function (err) {\n  return console.error(err);\n}, \"Util/Request/handleConnectionError\"); // TODO: Add to logs pool\n\n/**\n * Parse response and check wether it contains errors\n * @param  {{}} queryObject prepared with `prepareDocument()` from `Util/Query` request body object\n * @return {Promise<Request>} Fetch promise to GraphQL endpoint\n * #namespace Util/Request/parseResponse\n */\n\nexport const parseResponse = Mosaic.middleware(function (promise) {\n  return new Promise(function (resolve, reject) {\n    promise.then(\n    /** #namespace Util/Request/promiseThen */\n    Mosaic.middleware(function (res) {\n      return res.json().then(\n      /** #namespace Util/Request/resJsonThen */\n      Mosaic.middleware(function (res) {\n        return resolve(checkForErrors(res));\n      }, \"Util/Request/resJsonThen\"),\n      /** #namespace Util/Request/resJsonError */\n      Mosaic.middleware(function () {\n        return handleConnectionError('Can not transform JSON!') && reject();\n      }, \"Util/Request/resJsonError\"));\n    }, \"Util/Request/promiseThen\"),\n    /** #namespace Util/Request/promiseError */\n    Mosaic.middleware(function (err) {\n      return handleConnectionError('Can not establish connection!') && reject(err);\n    }, \"Util/Request/promiseError\"));\n  });\n}, \"Util/Request/parseResponse\");\nexport const HTTP_410_GONE = 410;\nexport const HTTP_201_CREATED = 201;\n/**\n * Make GET request to endpoint (via ServiceWorker)\n * @param  {{}} queryObject prepared with `prepareDocument()` from `Util/Query` request body object\n * @param  {String} name Name of model for ServiceWorker to send BroadCasts updates to\n * @param  {Number} cacheTTL Cache TTL (in seconds) for ServiceWorker to cache responses\n * @return {Promise<Request>} Fetch promise to GraphQL endpoint\n * #namespace Util/Request/executeGet\n */\n\nexport const executeGet = Mosaic.middleware(function (queryObject, name, cacheTTL) {\n  const {\n    query,\n    variables\n  } = queryObject;\n  const uri = formatURI(query, variables, getGraphqlEndpoint());\n  return parseResponse(new Promise(function (resolve) {\n    getFetch(uri, name).then(\n    /** #namespace Util/Request/getFetchThen */\n    Mosaic.middleware(function (res) {\n      if (res.status === HTTP_410_GONE) {\n        putPersistedQuery(getGraphqlEndpoint(), query, cacheTTL).then(\n        /** #namespace Util/Request/putPersistedQueryThen */\n        Mosaic.middleware(function (putResponse) {\n          if (putResponse.status === HTTP_201_CREATED) {\n            getFetch(uri, name).then(\n            /** #namespace Util/Request/putResponseGetFetchThen */\n            Mosaic.middleware(function (res) {\n              return resolve(res);\n            }, \"Util/Request/putResponseGetFetchThen\"));\n          }\n        }, \"Util/Request/putPersistedQueryThen\"));\n      } else {\n        resolve(res);\n      }\n    }, \"Util/Request/getFetchThen\"));\n  }));\n}, \"Util/Request/executeGet\");\n/**\n * Make POST request to endpoint\n * @param  {{}} queryObject prepared with `prepareDocument()` from `Util/Query` request body object\n * @return {Promise<Request>} Fetch promise to GraphQL endpoint\n * #namespace Util/Request/executePost\n */\n\nexport const executePost = Mosaic.middleware(function (queryObject) {\n  const {\n    query,\n    variables\n  } = queryObject;\n  return parseResponse(postFetch(getGraphqlEndpoint(), query, variables));\n}, \"Util/Request/executePost\");\n/**\n * Listen to the BroadCast connection\n * @param  {String} name Name of model for ServiceWorker to send BroadCasts updates to\n * @return {Promise<any>} Broadcast message promise\n * #namespace Util/Request/listenForBroadCast\n */\n\nexport const listenForBroadCast = Mosaic.middleware(function (name) {\n  return new Promise(function (resolve) {\n    const {\n      BroadcastChannel\n    } = window;\n    const windowId = getWindowId();\n\n    if (BroadcastChannel) {\n      const bc = new BroadcastChannel(`${name}_${windowId}`);\n\n      bc.onmessage = function (update) {\n        const {\n          data: {\n            payload: body\n          }\n        } = update;\n        resolve(checkForErrors(body));\n      };\n    }\n  });\n}, \"Util/Request/listenForBroadCast\");\n/** #namespace Util/Request/debounce */\n\nexport const debounce = Mosaic.middleware(function (callback, delay) {\n  // eslint-disable-next-line fp/no-let\n  let timeout;\n  return function (...args) {\n    const context = _this;\n    clearTimeout(timeout);\n    timeout = setTimeout(function () {\n      return callback.apply(context, args);\n    }, delay);\n  };\n}, \"Util/Request/debounce\");","map":{"version":3,"sources":["/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/util/Request/Request.js"],"names":["getAuthorizationToken","getCurrency","hash","GRAPHQL_URI","WINDOW_ID","getWindowId","result","sessionStorage","getItem","id","Date","now","setItem","getStoreCodePath","path","location","pathname","firstPathPart","split","window","storeList","includes","getGraphqlEndpoint","concat","appendTokenToHeaders","headers","token","Authorization","formatURI","query","variables","url","_currency","stringifyVariables","Object","keys","reduce","acc","variable","JSON","stringify","join","getFetch","uri","name","fetch","method","Accept","putPersistedQuery","graphQlURI","cacheTTL","body","postFetch","checkForErrors","res","Promise","resolve","reject","errors","data","handleConnectionError","err","console","error","parseResponse","promise","then","json","HTTP_410_GONE","HTTP_201_CREATED","executeGet","queryObject","status","putResponse","executePost","listenForBroadCast","BroadcastChannel","windowId","bc","onmessage","update","payload","debounce","callback","delay","timeout","args","context","clearTimeout","setTimeout","apply"],"mappings":"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","sourcesContent":["/* eslint-disable @scandipwa/scandipwa-guidelines/create-config-files */\n/* eslint-disable no-console */\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport { getAuthorizationToken } from 'Util/Auth';\nimport { getCurrency } from 'Util/Currency';\n\nimport { hash } from './Hash';\n\nexport const GRAPHQL_URI = '/graphql';\nexport const WINDOW_ID = 'WINDOW_ID';\n\n/** @namespace Util/Request/getWindowId */\nexport const getWindowId = () => {\n    const result = sessionStorage.getItem(WINDOW_ID);\n\n    if (!result) {\n        const id = Date.now();\n        sessionStorage.setItem(WINDOW_ID, id);\n        return id;\n    }\n\n    return result;\n};\n\n/** @namespace Util/Request/getStoreCodePath */\nexport const getStoreCodePath = () => {\n    const path = location.pathname;\n    // eslint-disable-next-line no-undef\n    const firstPathPart = path.split('/')[1];\n\n    if (window.storeList.includes(firstPathPart)) {\n        return `/${ firstPathPart }`;\n    }\n\n    return '';\n};\n\n/** @namespace Util/Request/getGraphqlEndpoint */\nexport const getGraphqlEndpoint = () => getStoreCodePath().concat(GRAPHQL_URI);\n\n/**\n * Append authorization token to header object\n * @param {Object} headers\n * @returns {Object} Headers with appended authorization\n * @namespace Util/Request/appendTokenToHeaders\n */\nexport const appendTokenToHeaders = (headers) => {\n    const token = getAuthorizationToken();\n\n    return {\n        ...headers,\n        Authorization: token ? `Bearer ${token}` : ''\n    };\n};\n\n/**\n *\n * @param {String} query Request body\n * @param {Object} variables Request variables\n * @param {String} url GraphQL url\n * @returns {*}\n * @namespace Util/Request/formatURI\n */\nexport const formatURI = (query, variables, url) => {\n    // eslint-disable-next-line no-param-reassign\n    variables._currency = getCurrency();\n\n    const stringifyVariables = Object.keys(variables).reduce(\n        (acc, variable) => [...acc, `${ variable }=${ JSON.stringify(variables[variable]) }`],\n        [`?hash=${ hash(query) }`]\n    );\n\n    return `${ url }${ stringifyVariables.join('&') }`;\n};\n\n/**\n *\n * @param {String} uri\n * @param {String} name\n * @returns {Promise<Response>}\n * @namespace Util/Request/getFetch\n */\nexport const getFetch = (uri, name) => fetch(uri,\n    {\n        method: 'GET',\n        headers: appendTokenToHeaders({\n            'Content-Type': 'application/json',\n            'Application-Model': `${ name }_${ getWindowId() }`,\n            Accept: 'application/json'\n        })\n    });\n\n/**\n *\n * @param {String} graphQlURI\n * @param {{}} query Request body\n * @param {Int} cacheTTL\n * @namespace Util/Request/putPersistedQuery\n */\nexport const putPersistedQuery = (graphQlURI, query, cacheTTL) => fetch(`${ graphQlURI }?hash=${ hash(query) }`,\n    {\n        method: 'PUT',\n        body: JSON.stringify(query),\n        headers: {\n            'Content-Type': 'application/json',\n            'SW-Cache-Age': cacheTTL\n        }\n    });\n\n/**\n *\n * @param {String} graphQlURI\n * @param {String} queryObject\n * @param {String} name\n * @returns {Promise<Response>}\n * @namespace Util/Request/postFetch\n */\nexport const postFetch = (graphQlURI, query, variables) => fetch(graphQlURI,\n    {\n        method: 'POST',\n        body: JSON.stringify({ query, variables }),\n        headers: appendTokenToHeaders({\n            'Content-Type': 'application/json',\n            Accept: 'application/json'\n        })\n    });\n\n/**\n * Checks for errors in response, if they exist, rejects promise\n * @param  {Object} res Response from GraphQL endpoint\n * @return {Promise<Object>} Handled GraphqlQL results promise\n * @namespace Util/Request/checkForErrors\n */\nexport const checkForErrors = (res) => new Promise((resolve, reject) => {\n    const { errors, data } = res;\n    return errors ? reject(errors) : resolve(data);\n});\n\n/**\n * Handle connection errors\n * @param  {any} err Error from fetch\n * @return {void} Simply console error\n * @namespace Util/Request/handleConnectionError\n */\nexport const handleConnectionError = (err) => console.error(err); // TODO: Add to logs pool\n\n/**\n * Parse response and check wether it contains errors\n * @param  {{}} queryObject prepared with `prepareDocument()` from `Util/Query` request body object\n * @return {Promise<Request>} Fetch promise to GraphQL endpoint\n * @namespace Util/Request/parseResponse\n */\nexport const parseResponse = (promise) => new Promise((resolve, reject) => {\n    promise.then(\n        /** @namespace Util/Request/promiseThen */\n        (res) => res.json().then(\n            /** @namespace Util/Request/resJsonThen */\n            (res) => resolve(checkForErrors(res)),\n            /** @namespace Util/Request/resJsonError */\n            () => handleConnectionError('Can not transform JSON!') && reject()\n        ),\n        /** @namespace Util/Request/promiseError */\n        (err) => handleConnectionError('Can not establish connection!') && reject(err)\n    );\n});\n\nexport const HTTP_410_GONE = 410;\nexport const HTTP_201_CREATED = 201;\n\n/**\n * Make GET request to endpoint (via ServiceWorker)\n * @param  {{}} queryObject prepared with `prepareDocument()` from `Util/Query` request body object\n * @param  {String} name Name of model for ServiceWorker to send BroadCasts updates to\n * @param  {Number} cacheTTL Cache TTL (in seconds) for ServiceWorker to cache responses\n * @return {Promise<Request>} Fetch promise to GraphQL endpoint\n * @namespace Util/Request/executeGet\n */\nexport const executeGet = (queryObject, name, cacheTTL) => {\n    const { query, variables } = queryObject;\n    const uri = formatURI(query, variables, getGraphqlEndpoint());\n\n    return parseResponse(new Promise((resolve) => {\n        getFetch(uri, name).then(\n            /** @namespace Util/Request/getFetchThen */\n            (res) => {\n                if (res.status === HTTP_410_GONE) {\n                    putPersistedQuery(getGraphqlEndpoint(), query, cacheTTL).then(\n                        /** @namespace Util/Request/putPersistedQueryThen */\n                        (putResponse) => {\n                            if (putResponse.status === HTTP_201_CREATED) {\n                                getFetch(uri, name).then(\n                                    /** @namespace Util/Request/putResponseGetFetchThen */\n                                    (res) => resolve(res)\n                                );\n                            }\n                        }\n                    );\n                } else {\n                    resolve(res);\n                }\n            }\n        );\n    }));\n};\n\n/**\n * Make POST request to endpoint\n * @param  {{}} queryObject prepared with `prepareDocument()` from `Util/Query` request body object\n * @return {Promise<Request>} Fetch promise to GraphQL endpoint\n * @namespace Util/Request/executePost\n */\nexport const executePost = (queryObject) => {\n    const { query, variables } = queryObject;\n    return parseResponse(postFetch(getGraphqlEndpoint(), query, variables));\n};\n\n/**\n * Listen to the BroadCast connection\n * @param  {String} name Name of model for ServiceWorker to send BroadCasts updates to\n * @return {Promise<any>} Broadcast message promise\n * @namespace Util/Request/listenForBroadCast\n */\nexport const listenForBroadCast = (name) => new Promise((resolve) => {\n    const { BroadcastChannel } = window;\n    const windowId = getWindowId();\n\n    if (BroadcastChannel) {\n        const bc = new BroadcastChannel(`${ name }_${ windowId }`);\n        bc.onmessage = (update) => {\n            const { data: { payload: body } } = update;\n            resolve(checkForErrors(body));\n        };\n    }\n});\n\n/** @namespace Util/Request/debounce */\nexport const debounce = (callback, delay) => {\n    // eslint-disable-next-line fp/no-let\n    let timeout;\n    return (...args) => {\n        const context = this;\n        clearTimeout(timeout);\n        timeout = setTimeout(() => callback.apply(context, args), delay);\n    };\n};\n"]},"metadata":{},"sourceType":"module"}