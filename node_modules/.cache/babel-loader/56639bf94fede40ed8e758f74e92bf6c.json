{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/component/MyAccountCustomerPopup/MyAccountCustomerPopup.container.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport MyAccountQuery from \"/home/arturs/scandiweb/scandipwa/src/query/MyAccount.query\";\nimport { updateCustomerDetails } from \"/home/arturs/scandiweb/scandipwa/src/store/MyAccount/MyAccount.action\";\nimport { CUSTOMER } from \"/home/arturs/scandiweb/scandipwa/src/store/MyAccount/MyAccount.dispatcher\";\nimport { goToPreviousNavigationState } from \"/home/arturs/scandiweb/scandipwa/src/store/Navigation/Navigation.action\";\nimport { TOP_NAVIGATION_TYPE } from \"/home/arturs/scandiweb/scandipwa/src/store/Navigation/Navigation.reducer\";\nimport { showNotification } from \"/home/arturs/scandiweb/scandipwa/src/store/Notification/Notification.action\";\nimport { hideActiveOverlay } from \"/home/arturs/scandiweb/scandipwa/src/store/Overlay/Overlay.action\";\nimport { isSignedIn } from \"/home/arturs/scandiweb/scandipwa/src/util/Auth\";\nimport BrowserDatabase from \"/home/arturs/scandiweb/scandipwa/src/util/BrowserDatabase\";\nimport { fetchMutation, getErrorMessage } from \"/home/arturs/scandiweb/scandipwa/src/util/Request\";\nimport { ONE_MONTH_IN_SECONDS } from \"/home/arturs/scandiweb/scandipwa/src/util/Request/QueryDispatcher\";\nimport MyAccountCustomerPopup from \"./MyAccountCustomerPopup.component\";\nimport { CUSTOMER_POPUP_ID } from \"./MyAccountCustomerPopup.config\";\n/** #namespace Component/MyAccountCustomerPopup/Container/mapStateToProps */\n\nexport const mapStateToProps = Mosaic.middleware(function (state) {\n  return {\n    payload: state.PopupReducer.popupPayload[CUSTOMER_POPUP_ID] || {}\n  };\n}, \"Component/MyAccountCustomerPopup/Container/mapStateToProps\");\n/** #namespace Component/MyAccountCustomerPopup/Container/mapDispatchToProps */\n\nexport const mapDispatchToProps = Mosaic.middleware(function (dispatch) {\n  return {\n    updateCustomer: function (customer) {\n      return dispatch(updateCustomerDetails(customer));\n    },\n    goToPreviousHeaderState: function () {\n      return dispatch(goToPreviousNavigationState(TOP_NAVIGATION_TYPE));\n    },\n    showErrorNotification: function (error) {\n      return dispatch(showNotification('error', getErrorMessage(error)));\n    },\n    showSuccessNotification: function (message) {\n      return dispatch(showNotification('success', message));\n    },\n    hideActiveOverlay: function () {\n      return dispatch(hideActiveOverlay());\n    }\n  };\n}, \"Component/MyAccountCustomerPopup/Container/mapDispatchToProps\");\n/** #namespace Component/MyAccountCustomerPopup/Container */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const MyAccountCustomerPopupContainer = Mosaic.middleware((_temp = _class = class MyAccountCustomerPopupContainer_ extends Mosaic.Extensible(PureComponent) {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n    this.state = {\n      isLoading: false\n    };\n    this.containerFunctions = {\n      onCustomerSave: this.onCustomerSave.bind(this),\n      onPasswordChange: this.onPasswordChange.bind(this)\n    };\n\n    this.onError = function (error) {\n      const {\n        showErrorNotification\n      } = _this.props;\n\n      _this.setState({\n        isLoading: false\n      });\n\n      showErrorNotification(error);\n    };\n  }\n\n  onCustomerSave(customer) {\n    var _this2 = this;\n\n    const {\n      updateCustomer,\n      hideActiveOverlay,\n      goToPreviousHeaderState\n    } = this.props;\n\n    if (!isSignedIn()) {\n      return null;\n    }\n\n    const mutation = MyAccountQuery.getUpdateInformationMutation(customer);\n    this.setState({\n      isLoading: true\n    });\n    return fetchMutation(mutation).then(\n    /** #namespace Component/MyAccountCustomerPopup/Container/onCustomerSaveFetchMutationThen */\n    Mosaic.middleware(function ({\n      updateCustomer: {\n        customer\n      }\n    }) {\n      BrowserDatabase.setItem(customer, CUSTOMER, ONE_MONTH_IN_SECONDS);\n      updateCustomer(customer);\n\n      _this2.setState({\n        isLoading: false\n      }, function () {\n        hideActiveOverlay();\n        goToPreviousHeaderState();\n      });\n    }, \"Component/MyAccountCustomerPopup/Container/onCustomerSaveFetchMutationThen\"), this.onError);\n  }\n\n  onPasswordChange(passwords) {\n    var _this3 = this;\n\n    const {\n      showSuccessNotification,\n      hideActiveOverlay,\n      goToPreviousHeaderState\n    } = this.props;\n\n    if (!isSignedIn()) {\n      return null;\n    }\n\n    const mutation = MyAccountQuery.getChangeCustomerPasswordMutation(passwords);\n    this.setState({\n      isLoading: true\n    });\n    return fetchMutation(mutation).then(\n    /** #namespace Component/MyAccountCustomerPopup/Container/onPasswordChangeFetchMutationThen */\n    Mosaic.middleware(function () {\n      showSuccessNotification(__('Your password was successfully updated!'));\n\n      _this3.setState({\n        isLoading: false\n      }, function () {\n        hideActiveOverlay();\n        goToPreviousHeaderState();\n      });\n    }, \"Component/MyAccountCustomerPopup/Container/onPasswordChangeFetchMutationThen\"), this.onError);\n  }\n\n  render() {\n    return /*#__PURE__*/_checkBEM(React, MyAccountCustomerPopup, Object.assign({}, this.props, this.state, this.containerFunctions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}, _class.propTypes = {\n  updateCustomer: PropTypes.func.isRequired,\n  showErrorNotification: PropTypes.func.isRequired,\n  goToPreviousHeaderState: PropTypes.func.isRequired,\n  hideActiveOverlay: PropTypes.func.isRequired,\n  showSuccessNotification: PropTypes.func.isRequired\n}, _temp), \"Component/MyAccountCustomerPopup/Container\");\nexport default connect(mapStateToProps, mapDispatchToProps)(MyAccountCustomerPopupContainer);","map":{"version":3,"sources":["/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/component/MyAccountCustomerPopup/MyAccountCustomerPopup.container.js"],"names":["PropTypes","PureComponent","connect","MyAccountQuery","updateCustomerDetails","CUSTOMER","goToPreviousNavigationState","TOP_NAVIGATION_TYPE","showNotification","hideActiveOverlay","isSignedIn","BrowserDatabase","fetchMutation","getErrorMessage","ONE_MONTH_IN_SECONDS","MyAccountCustomerPopup","CUSTOMER_POPUP_ID","mapStateToProps","state","payload","PopupReducer","popupPayload","mapDispatchToProps","dispatch","updateCustomer","customer","goToPreviousHeaderState","showErrorNotification","error","showSuccessNotification","message","isLoading","containerFunctions","onCustomerSave","bind","onPasswordChange","onError","props","setState","mutation","getUpdateInformationMutation","then","setItem","passwords","getChangeCustomerPasswordMutation","__","render","propTypes","func","isRequired","MyAccountCustomerPopupContainer"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport MyAccountQuery from 'Query/MyAccount.query';\nimport { updateCustomerDetails } from 'Store/MyAccount/MyAccount.action';\nimport { CUSTOMER } from 'Store/MyAccount/MyAccount.dispatcher';\nimport { goToPreviousNavigationState } from 'Store/Navigation/Navigation.action';\nimport { TOP_NAVIGATION_TYPE } from 'Store/Navigation/Navigation.reducer';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { hideActiveOverlay } from 'Store/Overlay/Overlay.action';\nimport { isSignedIn } from 'Util/Auth';\nimport BrowserDatabase from 'Util/BrowserDatabase';\nimport { fetchMutation, getErrorMessage } from 'Util/Request';\nimport { ONE_MONTH_IN_SECONDS } from 'Util/Request/QueryDispatcher';\n\nimport MyAccountCustomerPopup from './MyAccountCustomerPopup.component';\nimport { CUSTOMER_POPUP_ID } from './MyAccountCustomerPopup.config';\n\n/** @namespace Component/MyAccountCustomerPopup/Container/mapStateToProps */\nexport const mapStateToProps = (state) => ({\n    payload: state.PopupReducer.popupPayload[CUSTOMER_POPUP_ID] || {}\n});\n\n/** @namespace Component/MyAccountCustomerPopup/Container/mapDispatchToProps */\nexport const mapDispatchToProps = (dispatch) => ({\n    updateCustomer: (customer) => dispatch(updateCustomerDetails(customer)),\n    goToPreviousHeaderState: () => dispatch(goToPreviousNavigationState(TOP_NAVIGATION_TYPE)),\n    showErrorNotification: (error) => dispatch(showNotification('error', getErrorMessage(error))),\n    showSuccessNotification: (message) => dispatch(showNotification('success', message)),\n    hideActiveOverlay: () => dispatch(hideActiveOverlay())\n});\n\n/** @namespace Component/MyAccountCustomerPopup/Container */\nexport class MyAccountCustomerPopupContainer extends PureComponent {\n    static propTypes = {\n        updateCustomer: PropTypes.func.isRequired,\n        showErrorNotification: PropTypes.func.isRequired,\n        goToPreviousHeaderState: PropTypes.func.isRequired,\n        hideActiveOverlay: PropTypes.func.isRequired,\n        showSuccessNotification: PropTypes.func.isRequired\n    };\n\n    state = {\n        isLoading: false\n    };\n\n    containerFunctions = {\n        onCustomerSave: this.onCustomerSave.bind(this),\n        onPasswordChange: this.onPasswordChange.bind(this)\n    };\n\n    onError = (error) => {\n        const { showErrorNotification } = this.props;\n        this.setState({ isLoading: false });\n        showErrorNotification(error);\n    };\n\n    onCustomerSave(customer) {\n        const {\n            updateCustomer,\n            hideActiveOverlay,\n            goToPreviousHeaderState\n        } = this.props;\n\n        if (!isSignedIn()) {\n            return null;\n        }\n\n        const mutation = MyAccountQuery.getUpdateInformationMutation(customer);\n        this.setState({ isLoading: true });\n\n        return fetchMutation(mutation).then(\n            /** @namespace Component/MyAccountCustomerPopup/Container/onCustomerSaveFetchMutationThen */\n            ({ updateCustomer: { customer } }) => {\n                BrowserDatabase.setItem(customer, CUSTOMER, ONE_MONTH_IN_SECONDS);\n                updateCustomer(customer);\n                this.setState({ isLoading: false }, () => {\n                    hideActiveOverlay();\n                    goToPreviousHeaderState();\n                });\n            },\n            this.onError\n        );\n    }\n\n    onPasswordChange(passwords) {\n        const {\n            showSuccessNotification,\n            hideActiveOverlay,\n            goToPreviousHeaderState\n        } = this.props;\n\n        if (!isSignedIn()) {\n            return null;\n        }\n\n        const mutation = MyAccountQuery.getChangeCustomerPasswordMutation(passwords);\n        this.setState({ isLoading: true });\n\n        return fetchMutation(mutation).then(\n            /** @namespace Component/MyAccountCustomerPopup/Container/onPasswordChangeFetchMutationThen */\n            () => {\n                showSuccessNotification(__('Your password was successfully updated!'));\n                this.setState({ isLoading: false }, () => {\n                    hideActiveOverlay();\n                    goToPreviousHeaderState();\n                });\n            },\n            this.onError\n        );\n    }\n\n    render() {\n        return (\n            <MyAccountCustomerPopup\n              { ...this.props }\n              { ...this.state }\n              { ...this.containerFunctions }\n            />\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyAccountCustomerPopupContainer);\n"]},"metadata":{},"sourceType":"module"}