{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/component/StoreSwitcher/StoreSwitcher.container.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ConfigQuery from \"/home/arturs/scandiweb/scandipwa/src/query/Config.query\";\nimport { showNotification } from \"/home/arturs/scandiweb/scandipwa/src/store/Notification/Notification.action\";\nimport BrowserDatabase from \"/home/arturs/scandiweb/scandipwa/src/util/BrowserDatabase/BrowserDatabase\";\nimport DataContainer from \"/home/arturs/scandiweb/scandipwa/src/util/Request/DataContainer\";\nimport StoreSwitcher from \"./StoreSwitcher.component\";\nimport { STORE_CONFIG_KEY } from \"./StoreSwitcher.config\";\n/** #namespace Component/StoreSwitcher/Container/mapStateToProps */\n\nexport const mapStateToProps = Mosaic.middleware(function (state) {\n  return {\n    device: state.ConfigReducer.device,\n    currentStoreCode: state.ConfigReducer.code\n  };\n}, \"Component/StoreSwitcher/Container/mapStateToProps\");\n/** #namespace Component/StoreSwitcher/Container/mapDispatchToProps */\n\nexport const mapDispatchToProps = Mosaic.middleware(function (dispatch) {\n  return {\n    showErrorNotification: function (message) {\n      return dispatch(showNotification('error', message));\n    }\n  };\n}, \"Component/StoreSwitcher/Container/mapDispatchToProps\");\n/** #namespace Component/StoreSwitcher/Container */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const StoreSwitcherContainer = Mosaic.middleware((_temp = _class = class StoreSwitcherContainer_ extends Mosaic.Extensible(DataContainer) {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n    this.state = {\n      storeList: [],\n      isOpened: false,\n      storeLabel: ''\n    };\n    this.containerFunctions = {\n      handleStoreSelect: this._handleStoreSelect.bind(this),\n      onStoreSwitcherClick: this.onStoreSwitcherClick.bind(this),\n      onStoreSwitcherOutsideClick: this.onStoreSwitcherOutsideClick.bind(this)\n    };\n\n    this.containerProps = function () {\n      const {\n        currentStoreCode,\n        device\n      } = _this.props;\n      return {\n        currentStoreCode,\n        device\n      };\n    };\n  }\n\n  componentDidMount() {\n    this._getStoreList();\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      currentStoreCode\n    } = this.props;\n    const {\n      prevStoreCode\n    } = prevProps;\n    const {\n      storeLabel,\n      storeList\n    } = this.state;\n\n    if (!storeList.length) {\n      this._getStoreList();\n    }\n\n    if (currentStoreCode && (!storeLabel || prevStoreCode !== currentStoreCode)) {\n      this.getCurrentLabel(currentStoreCode);\n    }\n  }\n\n  onStoreSwitcherClick() {\n    const {\n      isOpened\n    } = this.state;\n    this.setState({\n      isOpened: !isOpened\n    });\n  }\n\n  onStoreSwitcherOutsideClick() {\n    this.setState({\n      isOpened: false\n    });\n  }\n\n  _getStoreList() {\n    var _this2 = this;\n\n    this.fetchData([ConfigQuery.getStoreListField()], function ({\n      storeList\n    }) {\n      return _this2.setState({\n        storeList: _this2._formatStoreList(storeList)\n      });\n    });\n  }\n\n  _formatStoreList(storeList) {\n    return storeList.reduce(function (acc, {\n      name,\n      code,\n      is_active,\n      base_url,\n      base_link_url\n    }) {\n      if (!is_active) {\n        return acc;\n      }\n\n      return [...acc, {\n        id: `store_${code}`,\n        value: code,\n        storeUrl: base_url,\n        storeLinkUrl: base_link_url,\n        label: name\n      }];\n    }, []);\n  }\n\n  getCurrentLabel(storeCode) {\n    const {\n      storeList\n    } = this.state;\n    const store = storeList.find(function ({\n      value\n    }) {\n      return value === storeCode;\n    });\n\n    if (!store) {\n      return;\n    }\n\n    const {\n      label\n    } = store;\n    this.setState({\n      storeLabel: label\n    });\n  }\n\n  _handleStoreSelect(storeCode) {\n    const {\n      showErrorNotification\n    } = this.props;\n    const {\n      storeList\n    } = this.state;\n    const store = storeList.find(function ({\n      value\n    }) {\n      return value === storeCode;\n    });\n\n    if (!store) {\n      showErrorNotification(__('This store can not be opened!'));\n      return;\n    }\n\n    BrowserDatabase.deleteItem(STORE_CONFIG_KEY);\n    window.location = store.storeLinkUrl;\n  }\n\n  render() {\n    return /*#__PURE__*/_checkBEM(React, StoreSwitcher, Object.assign({}, this.containerFunctions, this.containerProps(), this.state, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}, _class.propTypes = {\n  showErrorNotification: PropTypes.func.isRequired,\n  currentStoreCode: PropTypes.string\n}, _class.defaultProps = {\n  currentStoreCode: 'default'\n}, _temp), \"Component/StoreSwitcher/Container\");\nexport default connect(mapStateToProps, mapDispatchToProps)(StoreSwitcherContainer);","map":{"version":3,"sources":["/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/component/StoreSwitcher/StoreSwitcher.container.js"],"names":["PropTypes","connect","ConfigQuery","showNotification","BrowserDatabase","DataContainer","StoreSwitcher","STORE_CONFIG_KEY","mapStateToProps","state","device","ConfigReducer","currentStoreCode","code","mapDispatchToProps","dispatch","showErrorNotification","message","storeList","isOpened","storeLabel","containerFunctions","handleStoreSelect","_handleStoreSelect","bind","onStoreSwitcherClick","onStoreSwitcherOutsideClick","containerProps","props","componentDidMount","_getStoreList","componentDidUpdate","prevProps","prevStoreCode","length","getCurrentLabel","setState","fetchData","getStoreListField","_formatStoreList","reduce","acc","name","is_active","base_url","base_link_url","id","value","storeUrl","storeLinkUrl","label","storeCode","store","find","__","deleteItem","window","location","render","propTypes","func","isRequired","string","defaultProps","StoreSwitcherContainer"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport ConfigQuery from 'Query/Config.query';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport BrowserDatabase from 'Util/BrowserDatabase/BrowserDatabase';\nimport DataContainer from 'Util/Request/DataContainer';\n\nimport StoreSwitcher from './StoreSwitcher.component';\nimport { STORE_CONFIG_KEY } from './StoreSwitcher.config';\n\n/** @namespace Component/StoreSwitcher/Container/mapStateToProps */\nexport const mapStateToProps = (state) => ({\n    device: state.ConfigReducer.device,\n    currentStoreCode: state.ConfigReducer.code\n});\n\n/** @namespace Component/StoreSwitcher/Container/mapDispatchToProps */\nexport const mapDispatchToProps = (dispatch) => ({\n    showErrorNotification: (message) => dispatch(showNotification('error', message))\n});\n\n/** @namespace Component/StoreSwitcher/Container */\nexport class StoreSwitcherContainer extends DataContainer {\n    static propTypes = {\n        showErrorNotification: PropTypes.func.isRequired,\n        currentStoreCode: PropTypes.string\n    };\n\n    static defaultProps = {\n        currentStoreCode: 'default'\n    };\n\n    state = {\n        storeList: [],\n        isOpened: false,\n        storeLabel: ''\n    };\n\n    containerFunctions = {\n        handleStoreSelect: this._handleStoreSelect.bind(this),\n        onStoreSwitcherClick: this.onStoreSwitcherClick.bind(this),\n        onStoreSwitcherOutsideClick: this.onStoreSwitcherOutsideClick.bind(this)\n    };\n\n    componentDidMount() {\n        this._getStoreList();\n    }\n\n    componentDidUpdate(prevProps) {\n        const { currentStoreCode } = this.props;\n        const { prevStoreCode } = prevProps;\n        const { storeLabel, storeList } = this.state;\n\n        if (!storeList.length) {\n            this._getStoreList();\n        }\n\n        if (currentStoreCode && (!storeLabel || (prevStoreCode !== currentStoreCode))) {\n            this.getCurrentLabel(currentStoreCode);\n        }\n    }\n\n    containerProps = () => {\n        const { currentStoreCode, device } = this.props;\n        return { currentStoreCode, device };\n    };\n\n    onStoreSwitcherClick() {\n        const { isOpened } = this.state;\n\n        this.setState({ isOpened: !isOpened });\n    }\n\n    onStoreSwitcherOutsideClick() {\n        this.setState({ isOpened: false });\n    }\n\n    _getStoreList() {\n        this.fetchData(\n            [ConfigQuery.getStoreListField()],\n            ({ storeList }) => this.setState({\n                storeList: this._formatStoreList(storeList)\n            })\n        );\n    }\n\n    _formatStoreList(storeList) {\n        return storeList.reduce((acc, {\n            name, code, is_active, base_url, base_link_url\n        }) => {\n            if (!is_active) {\n                return acc;\n            }\n\n            return [\n                ...acc,\n                {\n                    id: `store_${ code }`,\n                    value: code,\n                    storeUrl: base_url,\n                    storeLinkUrl: base_link_url,\n                    label: name\n                }\n            ];\n        }, []);\n    }\n\n    getCurrentLabel(storeCode) {\n        const { storeList } = this.state;\n\n        const store = storeList.find(\n            ({ value }) => value === storeCode\n        );\n\n        if (!store) {\n            return;\n        }\n\n        const { label } = store;\n\n        this.setState({ storeLabel: label });\n    }\n\n    _handleStoreSelect(storeCode) {\n        const { showErrorNotification } = this.props;\n        const { storeList } = this.state;\n\n        const store = storeList.find(\n            ({ value }) => value === storeCode\n        );\n\n        if (!store) {\n            showErrorNotification(__('This store can not be opened!'));\n            return;\n        }\n\n        BrowserDatabase.deleteItem(STORE_CONFIG_KEY);\n        window.location = store.storeLinkUrl;\n    }\n\n    render() {\n        return (\n            <StoreSwitcher\n              { ...this.containerFunctions }\n              { ...this.containerProps() }\n              { ...this.state }\n            />\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StoreSwitcherContainer);\n"]},"metadata":{},"sourceType":"module"}