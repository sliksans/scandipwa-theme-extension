{"ast":null,"code":"/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nexport const MUTATION_TYPE = 'mutation';\nexport const QUERY_TYPE = 'query';\n/**\n * Prepare request body string from query list (all entries must be instances of Query).\n * @param  {Array<Field>} queries\n * @return {String} JSON String, format: `{\"query\":\"{alias: queryName (attr:key) { field1, field2 }}\"}`\n * #namespace Util/Query/prepareFieldString\n */\n\nexport const prepareFieldString = Mosaic.middleware(function (rootField, accArgs = {}) {\n  const {\n    alias,\n    name,\n    args,\n    children\n  } = rootField;\n  const resolvedArgs = args.reduce(function (acc, arg) {\n    const {\n      name,\n      type,\n      value\n    } = arg;\n\n    if (!accArgs[name]) {\n      // eslint-disable-next-line no-param-reassign\n      accArgs[name] = [];\n    } // add type and value of the argument into argument accumulator,\n    // we will need this value when building the query doc and variables\n\n\n    const index = accArgs[name].push([type, value]); // join each argument as \"name:$var_1\"\n\n    return [...acc, `${name}:$${name}_${index}`];\n  }, []); // join arguments, wrap into \"()\" and join with \",\"\n\n  const formattedArgs = resolvedArgs.length ? `(${resolvedArgs.join(',')})` : ''; // join child fields with \",\"\n\n  const formattedChildren = children.map(function (field) {\n    return prepareFieldString(field, accArgs);\n  }).join(','); // wrap body with \"{}\"\n\n  const body = children.length ? `{${formattedChildren}}` : ''; // format like \"alias:name(arg: $var){field1,field2}\"\n\n  return `${alias}${name}${formattedArgs}${body}`;\n}, \"Util/Query/prepareFieldString\");\n/** #namespace Util/Query/prepareRequest */\n\nexport const prepareRequest = Mosaic.middleware(function (fields, type) {\n  const fieldsArray = Array.isArray(fields) ? fields : [fields];\n\n  if (type !== MUTATION_TYPE && type !== QUERY_TYPE) {\n    // we only support Mutation and Query types\n    throw new Error(`GraphQL document type \"${type}\" is not supported.`);\n  }\n\n  const variables = {};\n  const accArgs = {}; // prepare fields from each field passed\n\n  const fieldStrings = fieldsArray.map(function (field) {\n    return prepareFieldString(field, accArgs);\n  }).join(','); // go through argument accumulator collected in \"prepareFieldString\", join values\n  // into the format \"$var:Type\" and append variable value to variables field\n\n  const resolvedArgs = Object.entries(accArgs).reduce(function (acc, [name, dataArray]) {\n    dataArray.forEach(function ([type, value], i) {\n      const variable = `${name}_${i + 1}`;\n      acc.push(`$${variable}:${type}`);\n      variables[variable] = value;\n    });\n    return acc;\n  }, []); // Wrap arguments with \"()\" and join using \",\"\n\n  const formattedArgs = resolvedArgs.length ? `(${resolvedArgs.join(',')})` : '';\n\n  if (process.env.NODE_ENV === 'development') {\n    // eslint-disable-next-line no-console\n    console.log('%cGraphQL Request', 'background-color: #ff00ff; color: #ffffff; font-weight: bold; border-radius: 5px; padding: 2px 5px', {\n      query: `${type}${formattedArgs}{${fieldStrings}}`,\n      variables\n    });\n  }\n\n  return {\n    // format like \"query($var_1:String){test(arg: $var_1){id}}\"\n    query: `${type}${formattedArgs}{${fieldStrings}}`,\n    variables\n  };\n}, \"Util/Query/prepareRequest\");\n/** #namespace Util/Query/prepareMutation */\n\nexport const prepareMutation = Mosaic.middleware(function (mutations) {\n  return prepareRequest(mutations, MUTATION_TYPE);\n}, \"Util/Query/prepareMutation\");\n/** #namespace Util/Query/prepareQuery */\n\nexport const prepareQuery = Mosaic.middleware(function (queries) {\n  return prepareRequest(queries, QUERY_TYPE);\n}, \"Util/Query/prepareQuery\");","map":{"version":3,"sources":["/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/util/Query/PrepareDocument.js"],"names":["MUTATION_TYPE","QUERY_TYPE","prepareFieldString","rootField","accArgs","alias","name","args","children","resolvedArgs","reduce","acc","arg","type","value","index","push","formattedArgs","length","join","formattedChildren","map","field","body","prepareRequest","fields","fieldsArray","Array","isArray","Error","variables","fieldStrings","Object","entries","dataArray","forEach","i","variable","process","env","NODE_ENV","console","log","query","prepareMutation","mutations","prepareQuery","queries"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nexport const MUTATION_TYPE = 'mutation';\nexport const QUERY_TYPE = 'query';\n\n/**\n * Prepare request body string from query list (all entries must be instances of Query).\n * @param  {Array<Field>} queries\n * @return {String} JSON String, format: `{\"query\":\"{alias: queryName (attr:key) { field1, field2 }}\"}`\n * @namespace Util/Query/prepareFieldString\n */\nexport const prepareFieldString = (rootField, accArgs = {}) => {\n    const {\n        alias, name, args, children\n    } = rootField;\n\n    const resolvedArgs = args.reduce((acc, arg) => {\n        const { name, type, value } = arg;\n\n        if (!accArgs[name]) {\n            // eslint-disable-next-line no-param-reassign\n            accArgs[name] = [];\n        }\n\n        // add type and value of the argument into argument accumulator,\n        // we will need this value when building the query doc and variables\n        const index = accArgs[name].push([type, value]);\n\n        // join each argument as \"name:$var_1\"\n        return [...acc, `${name}:$${name}_${index}`];\n    }, []);\n\n    // join arguments, wrap into \"()\" and join with \",\"\n    const formattedArgs = resolvedArgs.length ? `(${resolvedArgs.join(',')})` : '';\n\n    // join child fields with \",\"\n    const formattedChildren = children.map((field) => prepareFieldString(field, accArgs)).join(',');\n\n    // wrap body with \"{}\"\n    const body = children.length ? `{${formattedChildren}}` : '';\n\n    // format like \"alias:name(arg: $var){field1,field2}\"\n    return `${alias}${name}${formattedArgs}${body}`;\n};\n\n/** @namespace Util/Query/prepareRequest */\nexport const prepareRequest = (fields, type) => {\n    const fieldsArray = Array.isArray(fields) ? fields : [fields];\n\n    if (type !== MUTATION_TYPE && type !== QUERY_TYPE) {\n        // we only support Mutation and Query types\n        throw new Error(`GraphQL document type \"${type}\" is not supported.`);\n    }\n\n    const variables = {};\n    const accArgs = {};\n\n    // prepare fields from each field passed\n    const fieldStrings = fieldsArray.map((field) => prepareFieldString(field, accArgs)).join(',');\n\n    // go through argument accumulator collected in \"prepareFieldString\", join values\n    // into the format \"$var:Type\" and append variable value to variables field\n    const resolvedArgs = Object.entries(accArgs).reduce((acc, [name, dataArray]) => {\n        dataArray.forEach(([type, value], i) => {\n            const variable = `${name}_${i + 1}`;\n            acc.push(`$${variable}:${type}`);\n            variables[variable] = value;\n        });\n\n        return acc;\n    }, []);\n\n    // Wrap arguments with \"()\" and join using \",\"\n    const formattedArgs = resolvedArgs.length ? `(${resolvedArgs.join(',')})` : '';\n\n    if (process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.log(\n            '%cGraphQL Request',\n            'background-color: #ff00ff; color: #ffffff; font-weight: bold; border-radius: 5px; padding: 2px 5px',\n            {\n                query: `${type}${formattedArgs}{${fieldStrings}}`,\n                variables\n            }\n        );\n    }\n\n    return {\n        // format like \"query($var_1:String){test(arg: $var_1){id}}\"\n        query: `${type}${formattedArgs}{${fieldStrings}}`,\n        variables\n    };\n};\n\n/** @namespace Util/Query/prepareMutation */\nexport const prepareMutation = (mutations) => prepareRequest(mutations, MUTATION_TYPE);\n\n/** @namespace Util/Query/prepareQuery */\nexport const prepareQuery = (queries) => prepareRequest(queries, QUERY_TYPE);\n"]},"metadata":{},"sourceType":"module"}