{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/component/Slider/Slider.component.js\";\n\n/* eslint-disable react/no-unused-state */\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { Children, createRef, PureComponent } from 'react';\nimport Draggable from \"/home/arturs/scandiweb/extension/src/component/Draggable\";\nimport { ChildrenType, MixType } from \"/home/arturs/scandiweb/extension/src/type/Common\";\nimport { DeviceType } from \"/home/arturs/scandiweb/extension/src/type/Device\";\nimport CSS from \"/home/arturs/scandiweb/extension/src/util/CSS\";\nimport { ACTIVE_SLIDE_PERCENT, ANIMATION_DURATION, HEIGHT_TRANSITION_SPEED_ON_MOUNT } from \"./Slider.config\";\nimport \"./Slider.style\";\n/**\n * Slider component\n * @class Slider\n * #namespace Component/Slider/Component\n */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const Slider = Mosaic.middleware((_temp = _class = class Slider_ extends Mosaic.Extensible(PureComponent) {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n    this.sliderWidth = 0;\n    this.prevPosition = 0;\n    this.draggableRef = /*#__PURE__*/createRef();\n    this.sliderRef = /*#__PURE__*/createRef();\n    this.handleDragStart = this.handleInteraction.bind(this, this.handleDragStart);\n    this.handleDrag = this.handleInteraction.bind(this, this.handleDrag);\n    this.handleDragEnd = this.handleInteraction.bind(this, this.handleDragEnd);\n    this.renderCrumb = this.renderCrumb.bind(this);\n\n    this.handleClick = function (state, callback, e) {\n      if (e.type === 'contextmenu') {\n        _this.handleDragEnd(state, callback);\n      }\n    };\n  }\n\n  __construct(props) {\n    super.__construct(props);\n\n    const {\n      activeImage\n    } = this.props;\n    this.state = {\n      prevActiveImage: activeImage\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const {\n      activeImage,\n      children\n    } = props;\n    const {\n      prevActiveImage\n    } = state;\n\n    if (prevActiveImage !== activeImage && children.length !== 1) {\n      return {\n        prevActiveImage: activeImage\n      };\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    this.addWindowResizeWatcher();\n\n    if (!this.getIsSlider()) {\n      return;\n    }\n\n    const sliderChildren = this.draggableRef.current.children;\n    const sliderWidth = this.draggableRef.current.offsetWidth;\n    this.sliderWidth = sliderWidth;\n\n    if (!sliderChildren || !sliderChildren[0]) {\n      return;\n    }\n\n    this.setStyleVariablesOnMount();\n    const sliderRef = this.getSliderRef();\n    const sliderHeight = `${sliderChildren[0].offsetHeight}px`;\n\n    sliderChildren[0].onload = function () {\n      CSS.setVariable(sliderRef, 'slider-height', sliderHeight);\n    };\n\n    setTimeout(function () {\n      CSS.setVariable(sliderRef, 'slider-height', sliderHeight);\n    }, ANIMATION_DURATION);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      activeImage: prevActiveImage\n    } = prevProps;\n    const {\n      activeImage\n    } = this.props;\n\n    if (activeImage !== prevActiveImage && this.getIsSlider()) {\n      const newTranslate = -activeImage * this.getSlideWidth();\n      this.setAnimationSpeedStyle(Math.abs((prevActiveImage - activeImage) * ANIMATION_DURATION));\n      this.setTranlateXStyle(newTranslate);\n    }\n  }\n\n  addWindowResizeWatcher() {\n    var _this2 = this;\n\n    window.addEventListener('resize', function () {\n      const {\n        activeImage\n      } = _this2.props;\n\n      const newTranslate = -activeImage * _this2.getSlideWidth();\n\n      _this2.setTranlateXStyle(newTranslate); // Removed animation to avoid image movement while changing window width.\n\n\n      _this2.setAnimationSpeedStyle(0);\n\n      const delay = 500;\n      setTimeout(function () {\n        _this2.setAnimationSpeedStyle();\n      }, delay);\n    });\n  }\n\n  setStyleVariablesOnMount() {\n    const {\n      sliderHeight,\n      isHeightTransitionDisabledOnMount,\n      activeImage\n    } = this.props;\n    const sliderRef = this.getSliderRef();\n\n    if (isHeightTransitionDisabledOnMount) {\n      const transitionSpeed = isHeightTransitionDisabledOnMount ? 0 : `${HEIGHT_TRANSITION_SPEED_ON_MOUNT}ms`;\n      CSS.setVariable(sliderRef, 'height-transition-speed', transitionSpeed);\n    }\n\n    if (sliderHeight) {\n      CSS.setVariable(sliderRef, 'slider-height', sliderHeight);\n    }\n\n    const newTranslate = -activeImage * this.getSlideWidth();\n    this.setTranlateXStyle(newTranslate);\n  }\n\n  setTranlateXStyle(translate) {\n    const {\n      isVertical\n    } = this.props;\n    CSS.setVariable(this.draggableRef, isVertical ? 'translateY' : 'translateX', `${translate}px`);\n  }\n\n  setAnimationSpeedStyle(animationDuration = ANIMATION_DURATION) {\n    CSS.setVariable(this.draggableRef, 'animation-speed', `${animationDuration}ms`);\n  }\n\n  getIsSlider() {\n    const {\n      children\n    } = this.props;\n    return children.length > 0;\n  }\n\n  getSlideWidth() {\n    const {\n      isVertical\n    } = this.props;\n    const {\n      offsetWidth = 0,\n      offsetHeight = 0\n    } = this.draggableRef.current || {};\n    return isVertical ? offsetHeight : offsetWidth;\n  }\n\n  getSliderRef() {\n    const {\n      sliderRef\n    } = this.props;\n    return sliderRef || this.sliderRef;\n  }\n\n  onClickChangeSlide(state, slideSize, lastTranslate, fullSliderSize) {\n    const {\n      originalX\n    } = state;\n    const {\n      prevActiveImage: prevActiveSlider\n    } = this.state;\n    const {\n      onActiveImageChange,\n      device,\n      onClick\n    } = this.props;\n\n    if (onClick) {\n      onClick();\n      return -prevActiveSlider;\n    }\n\n    const fullSliderPoss = Math.round(fullSliderSize / slideSize);\n    const elementPossitionInDOM = this.draggableRef.current.getBoundingClientRect().x;\n    const sliderPossition = -prevActiveSlider;\n    const realElementPossitionInDOM = elementPossitionInDOM - lastTranslate;\n    const mousePossitionInElement = originalX - realElementPossitionInDOM;\n\n    if (device.isMobile) {\n      return sliderPossition;\n    }\n\n    if (slideSize / 2 < mousePossitionInElement && -fullSliderPoss < sliderPossition) {\n      const activeSlide = sliderPossition - 1;\n      onActiveImageChange(-activeSlide);\n      return activeSlide;\n    }\n\n    if (slideSize / 2 > mousePossitionInElement && lastTranslate) {\n      const activeSlide = sliderPossition + 1;\n      onActiveImageChange(-activeSlide);\n      return activeSlide;\n    }\n\n    return sliderPossition;\n  }\n\n  getFullSliderWidth() {\n    const {\n      isVertical\n    } = this.props;\n    const {\n      scrollWidth: fullSliderWidth,\n      scrollHeight\n    } = this.draggableRef.current;\n    const width = isVertical ? scrollHeight : fullSliderWidth;\n    return width - this.getSlideWidth();\n  }\n\n  calculateNextSlide(state) {\n    const {\n      isVertical\n    } = this.props;\n    const {\n      translateX,\n      translateY,\n      lastTranslateX,\n      lastTranslateY\n    } = state;\n    const lastTranslate = isVertical ? lastTranslateY : lastTranslateX;\n    const translate = isVertical ? translateY : translateX;\n    const {\n      onActiveImageChange\n    } = this.props;\n    const slideSize = this.getSlideWidth();\n    const fullSliderSize = this.getFullSliderWidth();\n    const activeSlidePosition = translate / slideSize;\n    const activeSlidePercent = Math.abs(activeSlidePosition % 1);\n    const isSlideBack = translate > lastTranslate;\n\n    if (!translate) {\n      return this.onClickChangeSlide(state, slideSize, lastTranslate, fullSliderSize);\n    }\n\n    if (translate >= 0) {\n      onActiveImageChange(0);\n      return 0;\n    }\n\n    if (translate < -fullSliderSize) {\n      const activeSlide = Math.round(fullSliderSize / -slideSize);\n      onActiveImageChange(-activeSlide);\n      return activeSlide;\n    }\n\n    if (isSlideBack && activeSlidePercent < 1 - ACTIVE_SLIDE_PERCENT) {\n      const activeSlide = Math.ceil(activeSlidePosition);\n      onActiveImageChange(-activeSlide);\n      return activeSlide;\n    }\n\n    if (!isSlideBack && activeSlidePercent > ACTIVE_SLIDE_PERCENT) {\n      const activeSlide = Math.floor(activeSlidePosition);\n      onActiveImageChange(-activeSlide);\n      return activeSlide;\n    }\n\n    const activeSlide = Math.round(activeSlidePosition);\n    onActiveImageChange(-activeSlide);\n    return activeSlide;\n  }\n\n  handleDragStart() {\n    this.setAnimationSpeedStyle(0);\n  }\n\n  handleDrag(state) {\n    const {\n      isVertical\n    } = this.props;\n    const {\n      translateX,\n      translateY\n    } = state;\n    const translate = isVertical ? translateY : translateX;\n    const fullSliderSize = this.getFullSliderWidth();\n\n    if (translate < 0 && translate > -fullSliderSize) {\n      this.setTranlateXStyle(translate);\n    }\n  }\n\n  handleDragEnd(state, callback) {\n    const {\n      isVertical\n    } = this.props;\n    const activeSlide = this.calculateNextSlide(state);\n    const slideSize = this.getSlideWidth();\n    const newTranslate = activeSlide * slideSize;\n    this.setAnimationSpeedStyle();\n    this.setTranlateXStyle(newTranslate);\n\n    if (isVertical) {\n      callback({\n        originalY: newTranslate,\n        lastTranslateY: newTranslate\n      });\n      return;\n    }\n\n    callback({\n      originalX: newTranslate,\n      lastTranslateX: newTranslate\n    });\n  }\n\n  handleInteraction(callback, ...args) {\n    const {\n      isInteractionDisabled\n    } = this.props;\n\n    if (isInteractionDisabled || !callback) {\n      return;\n    }\n\n    callback.call(this, ...args);\n  }\n\n  changeActiveImage(activeImage) {\n    const {\n      onActiveImageChange\n    } = this.props;\n    onActiveImageChange(activeImage);\n  }\n\n  renderCrumbs() {\n    const {\n      children\n    } = this.props;\n\n    if (children.length <= 1) {\n      return null;\n    }\n\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: \"Slider\",\n      elem: \"Crumbs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 13\n      }\n    }, Children.map(children, this.renderCrumb));\n  }\n\n  renderCrumb(_, i) {\n    var _this3 = this;\n\n    const {\n      activeImage\n    } = this.props;\n    const isActive = i === Math.abs(-activeImage);\n    return /*#__PURE__*/_checkBEM(React, \"button\", {\n      block: \"Slider\",\n      elem: \"Image\",\n      mods: {\n        type: 'single'\n      } // eslint-disable-next-line react/jsx-no-bind\n      ,\n      onClick: function () {\n        return _this3.changeActiveImage(i);\n      },\n      \"aria-label\": __('Slide crumb'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: \"Slider\",\n      elem: \"Crumb\",\n      mods: {\n        isActive\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  renderSliderContent() {\n    const {\n      activeImage,\n      children,\n      isVertical\n    } = this.props;\n\n    if (!this.getIsSlider()) {\n      return children;\n    }\n\n    return /*#__PURE__*/_checkBEM(React, Draggable, {\n      mix: {\n        block: 'Slider',\n        elem: 'Wrapper',\n        mods: {\n          isVertical\n        }\n      },\n      draggableRef: this.draggableRef,\n      onDragStart: this.handleDragStart,\n      onDragEnd: this.handleDragEnd,\n      onDrag: this.handleDrag,\n      onClick: this.handleClick,\n      shiftX: -activeImage * this.getSlideWidth(),\n      shiftY: -activeImage * this.getSlideWidth(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 13\n      }\n    }, children);\n  }\n\n  render() {\n    const {\n      showCrumbs,\n      mix\n    } = this.props;\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: \"Slider\",\n      mix: mix,\n      ref: this.getSliderRef(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 13\n      }\n    }, this.renderSliderContent(), showCrumbs && this.renderCrumbs());\n  }\n\n}, _class.propTypes = {\n  showCrumbs: PropTypes.bool,\n  activeImage: PropTypes.number,\n  onActiveImageChange: PropTypes.func,\n  mix: MixType,\n  children: ChildrenType.isRequired,\n  isInteractionDisabled: PropTypes.bool,\n  device: DeviceType.isRequired,\n  onClick: PropTypes.func,\n  isVertical: PropTypes.bool,\n  isHeightTransitionDisabledOnMount: PropTypes.bool,\n  sliderHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  sliderRef: PropTypes.object\n}, _class.defaultProps = {\n  activeImage: 0,\n  onActiveImageChange: function () {},\n  showCrumbs: false,\n  isInteractionDisabled: false,\n  mix: {},\n  onClick: null,\n  isVertical: false,\n  isHeightTransitionDisabledOnMount: false,\n  sliderHeight: null,\n  sliderRef: null\n}, _temp), \"Component/Slider/Component\");\nexport default Slider;","map":{"version":3,"sources":["/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/component/Slider/Slider.component.js"],"names":["PropTypes","Children","createRef","PureComponent","Draggable","ChildrenType","MixType","DeviceType","CSS","ACTIVE_SLIDE_PERCENT","ANIMATION_DURATION","HEIGHT_TRANSITION_SPEED_ON_MOUNT","sliderWidth","prevPosition","draggableRef","sliderRef","handleDragStart","handleInteraction","bind","handleDrag","handleDragEnd","renderCrumb","handleClick","state","callback","e","type","__construct","props","activeImage","prevActiveImage","getDerivedStateFromProps","children","length","componentDidMount","addWindowResizeWatcher","getIsSlider","sliderChildren","current","offsetWidth","setStyleVariablesOnMount","getSliderRef","sliderHeight","offsetHeight","onload","setVariable","setTimeout","componentDidUpdate","prevProps","newTranslate","getSlideWidth","setAnimationSpeedStyle","Math","abs","setTranlateXStyle","window","addEventListener","delay","isHeightTransitionDisabledOnMount","transitionSpeed","translate","isVertical","animationDuration","onClickChangeSlide","slideSize","lastTranslate","fullSliderSize","originalX","prevActiveSlider","onActiveImageChange","device","onClick","fullSliderPoss","round","elementPossitionInDOM","getBoundingClientRect","x","sliderPossition","realElementPossitionInDOM","mousePossitionInElement","isMobile","activeSlide","getFullSliderWidth","scrollWidth","fullSliderWidth","scrollHeight","width","calculateNextSlide","translateX","translateY","lastTranslateX","lastTranslateY","activeSlidePosition","activeSlidePercent","isSlideBack","ceil","floor","originalY","args","isInteractionDisabled","call","changeActiveImage","renderCrumbs","map","_","i","isActive","__","renderSliderContent","block","elem","mods","render","showCrumbs","mix","propTypes","bool","number","func","isRequired","oneOfType","string","object","defaultProps","Slider"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-unused-state */\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { Children, createRef, PureComponent } from 'react';\n\nimport Draggable from 'Component/Draggable';\nimport { ChildrenType, MixType } from 'Type/Common';\nimport { DeviceType } from 'Type/Device';\nimport CSS from 'Util/CSS';\n\nimport {\n    ACTIVE_SLIDE_PERCENT,\n    ANIMATION_DURATION,\n    HEIGHT_TRANSITION_SPEED_ON_MOUNT\n} from './Slider.config';\n\nimport './Slider.style';\n\n/**\n * Slider component\n * @class Slider\n * @namespace Component/Slider/Component\n */\nexport class Slider extends PureComponent {\n    static propTypes = {\n        showCrumbs: PropTypes.bool,\n        activeImage: PropTypes.number,\n        onActiveImageChange: PropTypes.func,\n        mix: MixType,\n        children: ChildrenType.isRequired,\n        isInteractionDisabled: PropTypes.bool,\n        device: DeviceType.isRequired,\n        onClick: PropTypes.func,\n        isVertical: PropTypes.bool,\n        isHeightTransitionDisabledOnMount: PropTypes.bool,\n        sliderHeight: PropTypes.oneOfType([\n            PropTypes.number,\n            PropTypes.string\n        ]),\n        sliderRef: PropTypes.object\n    };\n\n    static defaultProps = {\n        activeImage: 0,\n        onActiveImageChange: () => {},\n        showCrumbs: false,\n        isInteractionDisabled: false,\n        mix: {},\n        onClick: null,\n        isVertical: false,\n        isHeightTransitionDisabledOnMount: false,\n        sliderHeight: null,\n        sliderRef: null\n    };\n\n    sliderWidth = 0;\n\n    prevPosition = 0;\n\n    draggableRef = createRef();\n\n    sliderRef = createRef();\n\n    handleDragStart = this.handleInteraction.bind(this, this.handleDragStart);\n\n    handleDrag = this.handleInteraction.bind(this, this.handleDrag);\n\n    handleDragEnd = this.handleInteraction.bind(this, this.handleDragEnd);\n\n    renderCrumb = this.renderCrumb.bind(this);\n\n    __construct(props) {\n        super.__construct(props);\n\n        const { activeImage } = this.props;\n\n        this.state = {\n            prevActiveImage: activeImage\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        const { activeImage, children } = props;\n        const { prevActiveImage } = state;\n\n        if (prevActiveImage !== activeImage && children.length !== 1) {\n            return { prevActiveImage: activeImage };\n        }\n\n        return null;\n    }\n\n    componentDidMount() {\n        this.addWindowResizeWatcher();\n\n        if (!this.getIsSlider()) {\n            return;\n        }\n\n        const sliderChildren = this.draggableRef.current.children;\n        const sliderWidth = this.draggableRef.current.offsetWidth;\n        this.sliderWidth = sliderWidth;\n\n        if (!sliderChildren || !sliderChildren[0]) {\n            return;\n        }\n\n        this.setStyleVariablesOnMount();\n\n        const sliderRef = this.getSliderRef();\n        const sliderHeight = `${ sliderChildren[0].offsetHeight }px`;\n\n        sliderChildren[0].onload = () => {\n            CSS.setVariable(sliderRef, 'slider-height', sliderHeight);\n        };\n\n        setTimeout(() => {\n            CSS.setVariable(sliderRef, 'slider-height', sliderHeight);\n        }, ANIMATION_DURATION);\n    }\n\n    componentDidUpdate(prevProps) {\n        const { activeImage: prevActiveImage } = prevProps;\n        const { activeImage } = this.props;\n\n        if (activeImage !== prevActiveImage && this.getIsSlider()) {\n            const newTranslate = -activeImage * this.getSlideWidth();\n\n            this.setAnimationSpeedStyle(Math.abs((prevActiveImage - activeImage) * ANIMATION_DURATION));\n            this.setTranlateXStyle(newTranslate);\n        }\n    }\n\n    addWindowResizeWatcher() {\n        window.addEventListener('resize', () => {\n            const { activeImage } = this.props;\n            const newTranslate = -activeImage * this.getSlideWidth();\n\n            this.setTranlateXStyle(newTranslate);\n\n            // Removed animation to avoid image movement while changing window width.\n            this.setAnimationSpeedStyle(0);\n\n            const delay = 500;\n            setTimeout(() => {\n                this.setAnimationSpeedStyle();\n            }, delay);\n        });\n    }\n\n    setStyleVariablesOnMount() {\n        const { sliderHeight, isHeightTransitionDisabledOnMount, activeImage } = this.props;\n\n        const sliderRef = this.getSliderRef();\n\n        if (isHeightTransitionDisabledOnMount) {\n            const transitionSpeed = isHeightTransitionDisabledOnMount\n                ? 0\n                : `${ HEIGHT_TRANSITION_SPEED_ON_MOUNT }ms`;\n\n            CSS.setVariable(\n                sliderRef,\n                'height-transition-speed',\n                transitionSpeed\n            );\n        }\n\n        if (sliderHeight) {\n            CSS.setVariable(sliderRef, 'slider-height', sliderHeight);\n        }\n\n        const newTranslate = -activeImage * this.getSlideWidth();\n        this.setTranlateXStyle(newTranslate);\n    }\n\n    setTranlateXStyle(translate) {\n        const { isVertical } = this.props;\n\n        CSS.setVariable(this.draggableRef, isVertical ? 'translateY' : 'translateX', `${ translate }px`);\n    }\n\n    setAnimationSpeedStyle(animationDuration = ANIMATION_DURATION) {\n        CSS.setVariable(this.draggableRef, 'animation-speed', `${ animationDuration }ms`);\n    }\n\n    getIsSlider() {\n        const { children } = this.props;\n\n        return children.length > 0;\n    }\n\n    getSlideWidth() {\n        const { isVertical } = this.props;\n        const { offsetWidth = 0, offsetHeight = 0 } = this.draggableRef.current || {};\n\n        return isVertical ? offsetHeight : offsetWidth;\n    }\n\n    getSliderRef() {\n        const { sliderRef } = this.props;\n\n        return sliderRef || this.sliderRef;\n    }\n\n    onClickChangeSlide(state, slideSize, lastTranslate, fullSliderSize) {\n        const { originalX } = state;\n        const { prevActiveImage: prevActiveSlider } = this.state;\n        const { onActiveImageChange, device, onClick } = this.props;\n\n        if (onClick) {\n            onClick();\n\n            return -prevActiveSlider;\n        }\n\n        const fullSliderPoss = Math.round(fullSliderSize / slideSize);\n        const elementPossitionInDOM = this.draggableRef.current.getBoundingClientRect().x;\n\n        const sliderPossition = -prevActiveSlider;\n        const realElementPossitionInDOM = elementPossitionInDOM - lastTranslate;\n        const mousePossitionInElement = originalX - realElementPossitionInDOM;\n\n        if (device.isMobile) {\n            return sliderPossition;\n        }\n\n        if (slideSize / 2 < mousePossitionInElement && -fullSliderPoss < sliderPossition) {\n            const activeSlide = sliderPossition - 1;\n            onActiveImageChange(-activeSlide);\n            return activeSlide;\n        }\n\n        if (slideSize / 2 > mousePossitionInElement && lastTranslate) {\n            const activeSlide = sliderPossition + 1;\n            onActiveImageChange(-activeSlide);\n            return activeSlide;\n        }\n\n        return sliderPossition;\n    }\n\n    getFullSliderWidth() {\n        const { isVertical } = this.props;\n        const { scrollWidth: fullSliderWidth, scrollHeight } = this.draggableRef.current;\n\n        const width = isVertical ? scrollHeight : fullSliderWidth;\n\n        return width - this.getSlideWidth();\n    }\n\n    calculateNextSlide(state) {\n        const { isVertical } = this.props;\n        const {\n            translateX,\n            translateY,\n            lastTranslateX,\n            lastTranslateY\n        } = state;\n\n        const lastTranslate = isVertical ? lastTranslateY : lastTranslateX;\n        const translate = isVertical ? translateY : translateX;\n\n        const { onActiveImageChange } = this.props;\n\n        const slideSize = this.getSlideWidth();\n\n        const fullSliderSize = this.getFullSliderWidth();\n\n        const activeSlidePosition = translate / slideSize;\n        const activeSlidePercent = Math.abs(activeSlidePosition % 1);\n        const isSlideBack = translate > lastTranslate;\n\n        if (!translate) {\n            return this.onClickChangeSlide(state, slideSize, lastTranslate, fullSliderSize);\n        }\n\n        if (translate >= 0) {\n            onActiveImageChange(0);\n            return 0;\n        }\n\n        if (translate < -fullSliderSize) {\n            const activeSlide = Math.round(fullSliderSize / -slideSize);\n            onActiveImageChange(-activeSlide);\n            return activeSlide;\n        }\n\n        if (isSlideBack && activeSlidePercent < 1 - ACTIVE_SLIDE_PERCENT) {\n            const activeSlide = Math.ceil(activeSlidePosition);\n            onActiveImageChange(-activeSlide);\n            return activeSlide;\n        }\n\n        if (!isSlideBack && activeSlidePercent > ACTIVE_SLIDE_PERCENT) {\n            const activeSlide = Math.floor(activeSlidePosition);\n            onActiveImageChange(-activeSlide);\n            return activeSlide;\n        }\n\n        const activeSlide = Math.round(activeSlidePosition);\n        onActiveImageChange(-activeSlide);\n        return activeSlide;\n    }\n\n    handleDragStart() {\n        this.setAnimationSpeedStyle(0);\n    }\n\n    handleDrag(state) {\n        const { isVertical } = this.props;\n        const { translateX, translateY } = state;\n\n        const translate = isVertical ? translateY : translateX;\n\n        const fullSliderSize = this.getFullSliderWidth();\n\n        if (translate < 0 && translate > -fullSliderSize) {\n            this.setTranlateXStyle(translate);\n        }\n    }\n\n    handleDragEnd(state, callback) {\n        const { isVertical } = this.props;\n        const activeSlide = this.calculateNextSlide(state);\n        const slideSize = this.getSlideWidth();\n        const newTranslate = activeSlide * slideSize;\n\n        this.setAnimationSpeedStyle();\n        this.setTranlateXStyle(newTranslate);\n\n        if (isVertical) {\n            callback({\n                originalY: newTranslate,\n                lastTranslateY: newTranslate\n            });\n\n            return;\n        }\n\n        callback({\n            originalX: newTranslate,\n            lastTranslateX: newTranslate\n        });\n    }\n\n    handleClick = (state, callback, e) => {\n        if (e.type === 'contextmenu') {\n            this.handleDragEnd(state, callback);\n        }\n    };\n\n    handleInteraction(callback, ...args) {\n        const { isInteractionDisabled } = this.props;\n\n        if (isInteractionDisabled || !callback) {\n            return;\n        }\n\n        callback.call(this, ...args);\n    }\n\n    changeActiveImage(activeImage) {\n        const { onActiveImageChange } = this.props;\n        onActiveImageChange(activeImage);\n    }\n\n    renderCrumbs() {\n        const { children } = this.props;\n        if (children.length <= 1) {\n            return null;\n        }\n\n        return (\n            <div\n              block=\"Slider\"\n              elem=\"Crumbs\"\n            >\n                { Children.map(children, this.renderCrumb) }\n            </div>\n        );\n    }\n\n    renderCrumb(_, i) {\n        const { activeImage } = this.props;\n        const isActive = i === Math.abs(-activeImage);\n\n        return (\n            <button\n              block=\"Slider\"\n              elem=\"Image\"\n              mods={ { type: 'single' } }\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={ () => this.changeActiveImage(i) }\n              aria-label={ __('Slide crumb') }\n            >\n                <div\n                  block=\"Slider\"\n                  elem=\"Crumb\"\n                  mods={ { isActive } }\n                />\n            </button>\n        );\n    }\n\n    renderSliderContent() {\n        const { activeImage, children, isVertical } = this.props;\n\n        if (!this.getIsSlider()) {\n            return children;\n        }\n\n        return (\n            <Draggable\n              mix={ { block: 'Slider', elem: 'Wrapper', mods: { isVertical } } }\n              draggableRef={ this.draggableRef }\n              onDragStart={ this.handleDragStart }\n              onDragEnd={ this.handleDragEnd }\n              onDrag={ this.handleDrag }\n              onClick={ this.handleClick }\n              shiftX={ -activeImage * this.getSlideWidth() }\n              shiftY={ -activeImage * this.getSlideWidth() }\n            >\n                { children }\n            </Draggable>\n        );\n    }\n\n    render() {\n        const {\n            showCrumbs,\n            mix\n        } = this.props;\n\n        return (\n            <div\n              block=\"Slider\"\n              mix={ mix }\n              ref={ this.getSliderRef() }\n            >\n                { this.renderSliderContent() }\n                { showCrumbs && this.renderCrumbs() }\n            </div>\n        );\n    }\n}\n\nexport default Slider;\n"]},"metadata":{},"sourceType":"module"}