{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/route/CategoryPage/CategoryPage.component.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport CategoryDetails from \"/home/arturs/scandiweb/extension/src/component/CategoryDetails\";\nimport CategoryFilterOverlay from \"/home/arturs/scandiweb/extension/src/component/CategoryFilterOverlay\";\nimport { CATEGORY_FILTER_OVERLAY_ID } from \"/home/arturs/scandiweb/extension/src/component/CategoryFilterOverlay/CategoryFilterOverlay.config\";\nimport CategoryItemsCount from \"/home/arturs/scandiweb/extension/src/component/CategoryItemsCount\";\nimport CategoryProductList from \"/home/arturs/scandiweb/extension/src/component/CategoryProductList\";\nimport CategorySort from \"/home/arturs/scandiweb/extension/src/component/CategorySort\";\nimport ContentWrapper from \"/home/arturs/scandiweb/extension/src/component/ContentWrapper\";\nimport Html from \"/home/arturs/scandiweb/extension/src/component/Html\";\nimport { CategoryTreeType } from \"/home/arturs/scandiweb/extension/src/type/Category\";\nimport { DeviceType } from \"/home/arturs/scandiweb/extension/src/type/Device\";\nimport { FilterInputType, FilterType } from \"/home/arturs/scandiweb/extension/src/type/ProductList\";\nimport BrowserDatabase from \"/home/arturs/scandiweb/extension/src/util/BrowserDatabase\";\nimport { DISPLAY_MODE_BOTH, DISPLAY_MODE_CMS_BLOCK, DISPLAY_MODE_PRODUCTS, GRID_LAYOUT, LAYOUT_KEY, LIST_LAYOUT } from \"./CategoryPage.config\";\nimport \"./CategoryPage.style\";\n/** #namespace Route/CategoryPage/Component */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const CategoryPage = Mosaic.middleware((_temp = _class = class CategoryPage_ extends Mosaic.Extensible(PureComponent) {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n    this.state = {};\n\n    this.onFilterButtonClick = function () {\n      const {\n        toggleOverlayByKey\n      } = _this.props;\n      toggleOverlayByKey(CATEGORY_FILTER_OVERLAY_ID);\n    };\n\n    this.renderLayoutButton = function (type) {\n      const {\n        onGridButtonClick,\n        onListButtonClick\n      } = _this.props;\n      const {\n        activeLayoutType\n      } = _this.state;\n\n      switch (type) {\n        case GRID_LAYOUT:\n          return /*#__PURE__*/_checkBEM(React, \"button\", {\n            key: type,\n            onClick: onGridButtonClick,\n            mix: {\n              block: GRID_LAYOUT,\n              mods: {\n                isActive: activeLayoutType === GRID_LAYOUT\n              }\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 17\n            }\n          }, __('Grid'));\n\n        case LIST_LAYOUT:\n          return /*#__PURE__*/_checkBEM(React, \"button\", {\n            key: type,\n            onClick: onListButtonClick,\n            mix: {\n              block: LIST_LAYOUT,\n              mods: {\n                isActive: activeLayoutType === LIST_LAYOUT\n              }\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 17\n            }\n          }, __('List'));\n\n        default:\n          return false;\n      }\n    };\n  }\n\n  static getDerivedStateFromProps(props) {\n    const {\n      isMobile,\n      defaultPlpType,\n      selectedLayoutType\n    } = props;\n    /*\n    * Use stored plpType from the BrowserDatabase\n    * if there is one\n    */\n\n    const storedPlpType = BrowserDatabase.getItem(LAYOUT_KEY) || selectedLayoutType;\n\n    if (storedPlpType) {\n      const activeLayoutType = isMobile ? GRID_LAYOUT : storedPlpType || defaultPlpType;\n      return {\n        activeLayoutType\n      };\n    }\n\n    const activeLayoutType = isMobile ? GRID_LAYOUT : selectedLayoutType || defaultPlpType;\n    return {\n      activeLayoutType\n    };\n  }\n\n  displayProducts() {\n    const {\n      category: {\n        display_mode = DISPLAY_MODE_PRODUCTS\n      } = {}\n    } = this.props;\n    return display_mode === null || display_mode === DISPLAY_MODE_PRODUCTS || display_mode === DISPLAY_MODE_BOTH;\n  }\n\n  displayCmsBlock() {\n    const {\n      category: {\n        display_mode\n      } = {}\n    } = this.props;\n    return display_mode === DISPLAY_MODE_CMS_BLOCK || display_mode === DISPLAY_MODE_BOTH;\n  }\n\n  renderCategoryDetails() {\n    const {\n      category,\n      isCurrentCategoryLoaded\n    } = this.props;\n    return /*#__PURE__*/_checkBEM(React, CategoryDetails, {\n      category: category,\n      isCurrentCategoryLoaded: isCurrentCategoryLoaded,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    });\n  }\n\n  renderFilterButton() {\n    const {\n      isContentFiltered,\n      totalPages,\n      category: {\n        is_anchor\n      }\n    } = this.props;\n\n    if (!isContentFiltered && totalPages === 0 || !is_anchor) {\n      return null;\n    }\n\n    return /*#__PURE__*/_checkBEM(React, \"button\", {\n      block: \"CategoryPage\",\n      elem: \"Filter\",\n      onClick: this.onFilterButtonClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }\n    }, __('Filter'));\n  }\n\n  renderFilterOverlay() {\n    const {\n      filters,\n      selectedFilters,\n      isMatchingInfoFilter\n    } = this.props;\n    const {\n      category: {\n        is_anchor\n      }\n    } = this.props;\n\n    if (!this.displayProducts()) {\n      return null;\n    }\n\n    return /*#__PURE__*/_checkBEM(React, CategoryFilterOverlay, {\n      availableFilters: filters,\n      customFiltersValues: selectedFilters,\n      isMatchingInfoFilter: isMatchingInfoFilter,\n      isCategoryAnchor: !!is_anchor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }\n    });\n  }\n\n  renderCategorySort() {\n    const {\n      sortFields,\n      selectedSort,\n      onSortChange,\n      isMatchingInfoFilter\n    } = this.props;\n    const {\n      options = {}\n    } = sortFields;\n    const updatedSortFields = Object.values(options).map(function ({\n      value: id,\n      label\n    }) {\n      return {\n        id,\n        label\n      };\n    });\n    const {\n      sortDirection,\n      sortKey\n    } = selectedSort;\n    return /*#__PURE__*/_checkBEM(React, CategorySort, {\n      isMatchingInfoFilter: isMatchingInfoFilter,\n      onSortChange: onSortChange,\n      sortFields: updatedSortFields,\n      sortKey: sortKey,\n      sortDirection: sortDirection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }\n    });\n  }\n\n  renderLayoutButtons() {\n    const {\n      plpTypes\n    } = this.props;\n    /*\n    * So far there is only two types of\n    * the Storefront list modes\n     */\n\n    if (plpTypes.length !== 2) {\n      return null;\n    }\n\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: \"CategoryPage\",\n      elem: \"LayoutButtons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 13\n      }\n    }, plpTypes.map(this.renderLayoutButton));\n  }\n\n  renderItemsCount(isVisibleOnMobile = false) {\n    const {\n      isMatchingListFilter,\n      device\n    } = this.props;\n\n    if (isVisibleOnMobile && !device.isMobile) {\n      return null;\n    }\n\n    if (!isVisibleOnMobile && device.isMobile) {\n      return null;\n    }\n\n    return /*#__PURE__*/_checkBEM(React, CategoryItemsCount, {\n      isMatchingListFilter: isMatchingListFilter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 13\n      }\n    });\n  }\n\n  renderCategoryProductList() {\n    const {\n      filter,\n      search,\n      selectedSort,\n      selectedFilters,\n      isMatchingListFilter,\n      isCurrentCategoryLoaded,\n      isMatchingInfoFilter\n    } = this.props;\n    const {\n      activeLayoutType\n    } = this.state;\n\n    if (!this.displayProducts()) {\n      return null;\n    }\n\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: \"CategoryPage\",\n      elem: \"ProductListWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 13\n      }\n    }, this.renderItemsCount(true), /*#__PURE__*/_checkBEM(React, CategoryProductList, {\n      filter: filter,\n      search: search,\n      sort: selectedSort,\n      selectedFilters: selectedFilters,\n      isCurrentCategoryLoaded: isCurrentCategoryLoaded,\n      isMatchingListFilter: isMatchingListFilter,\n      isMatchingInfoFilter: isMatchingInfoFilter,\n      layout: activeLayoutType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  renderCmsBlock() {\n    const {\n      category: {\n        cms_block\n      }\n    } = this.props;\n\n    if (!cms_block || !this.displayCmsBlock()) {\n      return null;\n    }\n\n    const {\n      content,\n      disabled\n    } = cms_block;\n\n    if (disabled) {\n      return null;\n    }\n\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: \"CategoryPage\",\n      elem: \"CMS\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/_checkBEM(React, Html, {\n      content: content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  renderMiscellaneous() {\n    if (!this.displayProducts()) {\n      return null;\n    }\n\n    return /*#__PURE__*/_checkBEM(React, \"aside\", {\n      block: \"CategoryPage\",\n      elem: \"Miscellaneous\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: \"CategoryPage\",\n      elem: \"LayoutWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 17\n      }\n    }, this.renderLayoutButtons(), this.renderItemsCount()), this.renderCategorySort(), this.renderFilterButton());\n  }\n\n  renderContent() {\n    return /*#__PURE__*/_checkBEM(React, React.Fragment, null, this.renderFilterOverlay(), this.renderCategoryDetails(), this.renderCmsBlock(), this.renderMiscellaneous(), this.renderCategoryProductList());\n  }\n\n  render() {\n    const hideProducts = !this.displayProducts();\n    return /*#__PURE__*/_checkBEM(React, \"main\", {\n      block: \"CategoryPage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/_checkBEM(React, ContentWrapper, {\n      wrapperMix: {\n        block: 'CategoryPage',\n        elem: 'Wrapper',\n        mods: {\n          hideProducts\n        }\n      },\n      label: \"Category page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 17\n      }\n    }, this.renderContent()));\n  }\n\n}, _class.propTypes = {\n  category: CategoryTreeType.isRequired,\n  filters: PropTypes.objectOf(PropTypes.shape).isRequired,\n  sortFields: PropTypes.shape({\n    options: PropTypes.array\n  }).isRequired,\n  selectedSort: PropTypes.shape({\n    sortDirection: PropTypes.oneOf(['ASC', 'DESC']),\n    sortKey: PropTypes.string\n  }).isRequired,\n  onSortChange: PropTypes.func.isRequired,\n  toggleOverlayByKey: PropTypes.func.isRequired,\n  selectedFilters: FilterType.isRequired,\n  filter: FilterInputType.isRequired,\n  search: PropTypes.string,\n  isContentFiltered: PropTypes.bool,\n  isCurrentCategoryLoaded: PropTypes.bool,\n  isMatchingListFilter: PropTypes.bool,\n  isMatchingInfoFilter: PropTypes.bool,\n  totalPages: PropTypes.number,\n  device: DeviceType.isRequired,\n  is_anchor: PropTypes.bool,\n  isMobile: PropTypes.bool.isRequired,\n  onGridButtonClick: PropTypes.func.isRequired,\n  onListButtonClick: PropTypes.func.isRequired,\n  defaultPlpType: PropTypes.string.isRequired,\n  selectedLayoutType: PropTypes.string,\n  plpTypes: PropTypes.arrayOf(PropTypes.string)\n}, _class.defaultProps = {\n  isContentFiltered: true,\n  isMatchingListFilter: false,\n  isCurrentCategoryLoaded: false,\n  isMatchingInfoFilter: false,\n  totalPages: 1,\n  is_anchor: true,\n  search: '',\n  selectedLayoutType: '',\n  plpTypes: []\n}, _temp), \"Route/CategoryPage/Component\");\nexport default CategoryPage;","map":{"version":3,"sources":["/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/route/CategoryPage/CategoryPage.component.js"],"names":["PropTypes","PureComponent","CategoryDetails","CategoryFilterOverlay","CATEGORY_FILTER_OVERLAY_ID","CategoryItemsCount","CategoryProductList","CategorySort","ContentWrapper","Html","CategoryTreeType","DeviceType","FilterInputType","FilterType","BrowserDatabase","DISPLAY_MODE_BOTH","DISPLAY_MODE_CMS_BLOCK","DISPLAY_MODE_PRODUCTS","GRID_LAYOUT","LAYOUT_KEY","LIST_LAYOUT","state","onFilterButtonClick","toggleOverlayByKey","props","renderLayoutButton","type","onGridButtonClick","onListButtonClick","activeLayoutType","block","mods","isActive","__","getDerivedStateFromProps","isMobile","defaultPlpType","selectedLayoutType","storedPlpType","getItem","displayProducts","category","display_mode","displayCmsBlock","renderCategoryDetails","isCurrentCategoryLoaded","renderFilterButton","isContentFiltered","totalPages","is_anchor","renderFilterOverlay","filters","selectedFilters","isMatchingInfoFilter","renderCategorySort","sortFields","selectedSort","onSortChange","options","updatedSortFields","Object","values","map","value","id","label","sortDirection","sortKey","renderLayoutButtons","plpTypes","length","renderItemsCount","isVisibleOnMobile","isMatchingListFilter","device","renderCategoryProductList","filter","search","renderCmsBlock","cms_block","content","disabled","renderMiscellaneous","renderContent","render","hideProducts","elem","propTypes","isRequired","objectOf","shape","array","oneOf","string","func","bool","number","arrayOf","defaultProps","CategoryPage"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport CategoryDetails from 'Component/CategoryDetails';\nimport CategoryFilterOverlay from 'Component/CategoryFilterOverlay';\nimport { CATEGORY_FILTER_OVERLAY_ID } from 'Component/CategoryFilterOverlay/CategoryFilterOverlay.config';\nimport CategoryItemsCount from 'Component/CategoryItemsCount';\nimport CategoryProductList from 'Component/CategoryProductList';\nimport CategorySort from 'Component/CategorySort';\nimport ContentWrapper from 'Component/ContentWrapper';\nimport Html from 'Component/Html';\nimport { CategoryTreeType } from 'Type/Category';\nimport { DeviceType } from 'Type/Device';\nimport { FilterInputType, FilterType } from 'Type/ProductList';\nimport BrowserDatabase from 'Util/BrowserDatabase';\n\nimport {\n    DISPLAY_MODE_BOTH,\n    DISPLAY_MODE_CMS_BLOCK,\n    DISPLAY_MODE_PRODUCTS,\n    GRID_LAYOUT,\n    LAYOUT_KEY,\n    LIST_LAYOUT\n} from './CategoryPage.config';\n\nimport './CategoryPage.style';\n\n/** @namespace Route/CategoryPage/Component */\nexport class CategoryPage extends PureComponent {\n    static propTypes = {\n        category: CategoryTreeType.isRequired,\n        filters: PropTypes.objectOf(PropTypes.shape).isRequired,\n        sortFields: PropTypes.shape({\n            options: PropTypes.array\n        }).isRequired,\n        selectedSort: PropTypes.shape({\n            sortDirection: PropTypes.oneOf([\n                'ASC',\n                'DESC'\n            ]),\n            sortKey: PropTypes.string\n        }).isRequired,\n        onSortChange: PropTypes.func.isRequired,\n        toggleOverlayByKey: PropTypes.func.isRequired,\n        selectedFilters: FilterType.isRequired,\n        filter: FilterInputType.isRequired,\n        search: PropTypes.string,\n        isContentFiltered: PropTypes.bool,\n        isCurrentCategoryLoaded: PropTypes.bool,\n        isMatchingListFilter: PropTypes.bool,\n        isMatchingInfoFilter: PropTypes.bool,\n        totalPages: PropTypes.number,\n        device: DeviceType.isRequired,\n        is_anchor: PropTypes.bool,\n        isMobile: PropTypes.bool.isRequired,\n        onGridButtonClick: PropTypes.func.isRequired,\n        onListButtonClick: PropTypes.func.isRequired,\n        defaultPlpType: PropTypes.string.isRequired,\n        selectedLayoutType: PropTypes.string,\n        plpTypes: PropTypes.arrayOf(PropTypes.string)\n    };\n\n    static defaultProps = {\n        isContentFiltered: true,\n        isMatchingListFilter: false,\n        isCurrentCategoryLoaded: false,\n        isMatchingInfoFilter: false,\n        totalPages: 1,\n        is_anchor: true,\n        search: '',\n        selectedLayoutType: '',\n        plpTypes: []\n    };\n\n    state = {};\n\n    static getDerivedStateFromProps(props) {\n        const {\n            isMobile,\n            defaultPlpType,\n            selectedLayoutType\n        } = props;\n\n        /*\n        * Use stored plpType from the BrowserDatabase\n        * if there is one\n        */\n        const storedPlpType = BrowserDatabase.getItem(LAYOUT_KEY) || selectedLayoutType;\n\n        if (storedPlpType) {\n            const activeLayoutType = isMobile\n                ? GRID_LAYOUT\n                : storedPlpType || defaultPlpType;\n\n            return { activeLayoutType };\n        }\n\n        const activeLayoutType = isMobile\n            ? GRID_LAYOUT\n            : selectedLayoutType || defaultPlpType;\n\n        return { activeLayoutType };\n    }\n\n    onFilterButtonClick = () => {\n        const { toggleOverlayByKey } = this.props;\n        toggleOverlayByKey(CATEGORY_FILTER_OVERLAY_ID);\n    };\n\n    displayProducts() {\n        const {\n            category: {\n                display_mode = DISPLAY_MODE_PRODUCTS\n            } = {}\n        } = this.props;\n\n        return display_mode === null\n            || display_mode === DISPLAY_MODE_PRODUCTS\n            || display_mode === DISPLAY_MODE_BOTH;\n    }\n\n    displayCmsBlock() {\n        const { category: { display_mode } = {} } = this.props;\n        return display_mode === DISPLAY_MODE_CMS_BLOCK\n            || display_mode === DISPLAY_MODE_BOTH;\n    }\n\n    renderCategoryDetails() {\n        const {\n            category,\n            isCurrentCategoryLoaded\n        } = this.props;\n\n        return (\n            <CategoryDetails\n              category={ category }\n              isCurrentCategoryLoaded={ isCurrentCategoryLoaded }\n            />\n        );\n    }\n\n    renderFilterButton() {\n        const { isContentFiltered, totalPages, category: { is_anchor } } = this.props;\n\n        if ((!isContentFiltered && totalPages === 0) || !is_anchor) {\n            return null;\n        }\n\n        return (\n            <button\n              block=\"CategoryPage\"\n              elem=\"Filter\"\n              onClick={ this.onFilterButtonClick }\n            >\n                { __('Filter') }\n            </button>\n        );\n    }\n\n    renderFilterOverlay() {\n        const {\n            filters,\n            selectedFilters,\n            isMatchingInfoFilter\n        } = this.props;\n\n        const { category: { is_anchor } } = this.props;\n\n        if (!this.displayProducts()) {\n            return null;\n        }\n\n        return (\n            <CategoryFilterOverlay\n              availableFilters={ filters }\n              customFiltersValues={ selectedFilters }\n              isMatchingInfoFilter={ isMatchingInfoFilter }\n              isCategoryAnchor={ !!is_anchor }\n            />\n        );\n    }\n\n    renderCategorySort() {\n        const {\n            sortFields,\n            selectedSort,\n            onSortChange,\n            isMatchingInfoFilter\n        } = this.props;\n\n        const { options = {} } = sortFields;\n        const updatedSortFields = Object.values(options).map(({ value: id, label }) => ({ id, label }));\n        const { sortDirection, sortKey } = selectedSort;\n\n        return (\n            <CategorySort\n              isMatchingInfoFilter={ isMatchingInfoFilter }\n              onSortChange={ onSortChange }\n              sortFields={ updatedSortFields }\n              sortKey={ sortKey }\n              sortDirection={ sortDirection }\n            />\n        );\n    }\n\n    renderLayoutButton = (type) => {\n        const {\n            onGridButtonClick,\n            onListButtonClick\n        } = this.props;\n\n        const { activeLayoutType } = this.state;\n\n        switch (type) {\n        case GRID_LAYOUT:\n            return (\n                <button\n                  key={ type }\n                  onClick={ onGridButtonClick }\n                  mix={ { block: GRID_LAYOUT, mods: { isActive: activeLayoutType === GRID_LAYOUT } } }\n                >\n                    { __('Grid') }\n                </button>\n            );\n        case LIST_LAYOUT:\n            return (\n                <button\n                  key={ type }\n                  onClick={ onListButtonClick }\n                  mix={ { block: LIST_LAYOUT, mods: { isActive: activeLayoutType === LIST_LAYOUT } } }\n                >\n                    { __('List') }\n                </button>\n            );\n        default:\n            return false;\n        }\n    };\n\n    renderLayoutButtons() {\n        const { plpTypes } = this.props;\n\n        /*\n        * So far there is only two types of\n        * the Storefront list modes\n         */\n        if (plpTypes.length !== 2) {\n            return null;\n        }\n\n        return (\n            <div block=\"CategoryPage\" elem=\"LayoutButtons\">\n                { plpTypes.map(this.renderLayoutButton) }\n            </div>\n        );\n    }\n\n    renderItemsCount(isVisibleOnMobile = false) {\n        const { isMatchingListFilter, device } = this.props;\n\n        if (isVisibleOnMobile && !device.isMobile) {\n            return null;\n        }\n\n        if (!isVisibleOnMobile && device.isMobile) {\n            return null;\n        }\n\n        return (\n            <CategoryItemsCount\n              isMatchingListFilter={ isMatchingListFilter }\n            />\n        );\n    }\n\n    renderCategoryProductList() {\n        const {\n            filter,\n            search,\n            selectedSort,\n            selectedFilters,\n            isMatchingListFilter,\n            isCurrentCategoryLoaded,\n            isMatchingInfoFilter\n        } = this.props;\n\n        const { activeLayoutType } = this.state;\n\n        if (!this.displayProducts()) {\n            return null;\n        }\n\n        return (\n            <div block=\"CategoryPage\" elem=\"ProductListWrapper\">\n                { this.renderItemsCount(true) }\n                <CategoryProductList\n                  filter={ filter }\n                  search={ search }\n                  sort={ selectedSort }\n                  selectedFilters={ selectedFilters }\n                  isCurrentCategoryLoaded={ isCurrentCategoryLoaded }\n                  isMatchingListFilter={ isMatchingListFilter }\n                  isMatchingInfoFilter={ isMatchingInfoFilter }\n                  layout={ activeLayoutType }\n                />\n            </div>\n        );\n    }\n\n    renderCmsBlock() {\n        const { category: { cms_block } } = this.props;\n\n        if (!cms_block || !this.displayCmsBlock()) {\n            return null;\n        }\n\n        const { content, disabled } = cms_block;\n\n        if (disabled) {\n            return null;\n        }\n\n        return (\n            <div\n              block=\"CategoryPage\"\n              elem=\"CMS\"\n            >\n                <Html content={ content } />\n            </div>\n        );\n    }\n\n    renderMiscellaneous() {\n        if (!this.displayProducts()) {\n            return null;\n        }\n\n        return (\n            <aside block=\"CategoryPage\" elem=\"Miscellaneous\">\n                <div block=\"CategoryPage\" elem=\"LayoutWrapper\">\n                    { this.renderLayoutButtons() }\n                    { this.renderItemsCount() }\n                </div>\n                { this.renderCategorySort() }\n                { this.renderFilterButton() }\n            </aside>\n        );\n    }\n\n    renderContent() {\n        return (\n            <>\n                { this.renderFilterOverlay() }\n                { this.renderCategoryDetails() }\n                { this.renderCmsBlock() }\n                { this.renderMiscellaneous() }\n                { this.renderCategoryProductList() }\n            </>\n        );\n    }\n\n    render() {\n        const hideProducts = !this.displayProducts();\n\n        return (\n            <main block=\"CategoryPage\">\n                <ContentWrapper\n                  wrapperMix={ {\n                      block: 'CategoryPage',\n                      elem: 'Wrapper',\n                      mods: { hideProducts }\n                  } }\n                  label=\"Category page\"\n                >\n                    { this.renderContent() }\n                </ContentWrapper>\n            </main>\n        );\n    }\n}\n\nexport default CategoryPage;\n"]},"metadata":{},"sourceType":"module"}