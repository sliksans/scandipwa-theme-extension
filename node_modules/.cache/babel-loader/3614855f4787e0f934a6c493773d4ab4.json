{"ast":null,"code":"import _asyncToGenerator from \"/home/arturs/scandiweb/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _class,\n    _temp,\n    _jsxFileName = \"/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/route/Checkout/Checkout.container.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { CART_TAB } from \"/home/arturs/scandiweb/scandipwa/src/component/NavigationTabs/NavigationTabs.config\";\nimport CheckoutQuery from \"/home/arturs/scandiweb/scandipwa/src/query/Checkout.query\";\nimport MyAccountQuery from \"/home/arturs/scandiweb/scandipwa/src/query/MyAccount.query\";\nimport { toggleBreadcrumbs } from \"/home/arturs/scandiweb/scandipwa/src/store/Breadcrumbs/Breadcrumbs.action\";\nimport { updateShippingPrice } from \"/home/arturs/scandiweb/scandipwa/src/store/Cart/Cart.action\";\nimport { updateEmail, updateShippingFields } from \"/home/arturs/scandiweb/scandipwa/src/store/Checkout/Checkout.action\";\nimport { updateMeta } from \"/home/arturs/scandiweb/scandipwa/src/store/Meta/Meta.action\";\nimport { changeNavigationState } from \"/home/arturs/scandiweb/scandipwa/src/store/Navigation/Navigation.action\";\nimport { BOTTOM_NAVIGATION_TYPE, TOP_NAVIGATION_TYPE } from \"/home/arturs/scandiweb/scandipwa/src/store/Navigation/Navigation.reducer\";\nimport { showNotification } from \"/home/arturs/scandiweb/scandipwa/src/store/Notification/Notification.action\";\nimport { customerType } from \"/home/arturs/scandiweb/scandipwa/src/type/Account\";\nimport { HistoryType } from \"/home/arturs/scandiweb/scandipwa/src/type/Common\";\nimport { TotalsType } from \"/home/arturs/scandiweb/scandipwa/src/type/MiniCart\";\nimport { isSignedIn } from \"/home/arturs/scandiweb/scandipwa/src/util/Auth\";\nimport BrowserDatabase from \"/home/arturs/scandiweb/scandipwa/src/util/BrowserDatabase\";\nimport { deleteGuestQuoteId, getGuestQuoteId } from \"/home/arturs/scandiweb/scandipwa/src/util/Cart\";\nimport history from \"/home/arturs/scandiweb/scandipwa/src/util/History\";\nimport { debounce, fetchMutation, fetchQuery, getErrorMessage } from \"/home/arturs/scandiweb/scandipwa/src/util/Request\";\nimport { ONE_MONTH_IN_SECONDS } from \"/home/arturs/scandiweb/scandipwa/src/util/Request/QueryDispatcher\";\nimport { appendWithStoreCode } from \"/home/arturs/scandiweb/scandipwa/src/util/Url\";\nimport Checkout from \"./Checkout.component\";\nimport { BILLING_STEP, DETAILS_STEP, PAYMENT_TOTALS, SHIPPING_STEP, UPDATE_EMAIL_CHECK_FREQUENCY } from \"./Checkout.config\";\nexport const CartDispatcher = import(\n/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n\"/home/arturs/scandiweb/scandipwa/src/store/Cart/Cart.dispatcher\");\nexport const MyAccountDispatcher = import(\n/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n\"/home/arturs/scandiweb/scandipwa/src/store/MyAccount/MyAccount.dispatcher\");\nexport const CheckoutDispatcher = import(\n/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n\"/home/arturs/scandiweb/scandipwa/src/store/Checkout/Checkout.dispatcher\");\n/** #namespace Route/Checkout/Container/mapStateToProps */\n\nexport const mapStateToProps = Mosaic.middleware(function (state) {\n  return {\n    totals: state.CartReducer.cartTotals,\n    customer: state.MyAccountReducer.customer,\n    guest_checkout: state.ConfigReducer.guest_checkout,\n    countries: state.ConfigReducer.countries,\n    isEmailAvailable: state.CheckoutReducer.isEmailAvailable,\n    isMobile: state.ConfigReducer.device.isMobile\n  };\n}, \"Route/Checkout/Container/mapStateToProps\");\n/** #namespace Route/Checkout/Container/mapDispatchToProps */\n\nexport const mapDispatchToProps = Mosaic.middleware(function (dispatch) {\n  return {\n    updateMeta: function (meta) {\n      return dispatch(updateMeta(meta));\n    },\n    resetCart: function () {\n      return CartDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.updateInitialCartData(dispatch);\n      });\n    },\n    resetGuestCart: function () {\n      return CartDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        dispatcher.resetGuestCart(dispatch);\n        dispatcher.createGuestEmptyCart(dispatch);\n      });\n    },\n    toggleBreadcrumbs: function (state) {\n      return dispatch(toggleBreadcrumbs(state));\n    },\n    showErrorNotification: function (message) {\n      return dispatch(showNotification('error', message));\n    },\n    showInfoNotification: function (message) {\n      return dispatch(showNotification('info', message));\n    },\n    showSuccessNotification: function (message) {\n      return dispatch(showNotification('success', message));\n    },\n    setHeaderState: function (stateName) {\n      return dispatch(changeNavigationState(TOP_NAVIGATION_TYPE, stateName));\n    },\n    setNavigationState: function (stateName) {\n      return dispatch(changeNavigationState(BOTTOM_NAVIGATION_TYPE, stateName));\n    },\n    createAccount: function (options) {\n      return MyAccountDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.createAccount(options, dispatch);\n      });\n    },\n    updateShippingFields: function (fields) {\n      return dispatch(updateShippingFields(fields));\n    },\n    updateEmail: function (email) {\n      return dispatch(updateEmail(email));\n    },\n    checkEmailAvailability: function (email) {\n      return CheckoutDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.handleData(dispatch, email);\n      });\n    },\n    updateShippingPrice: function (data) {\n      return dispatch(updateShippingPrice(data));\n    }\n  };\n}, \"Route/Checkout/Container/mapDispatchToProps\");\n/** #namespace Route/Checkout/Container */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const CheckoutContainer = Mosaic.middleware((_temp = _class = class CheckoutContainer_ extends Mosaic.Extensible(PureComponent) {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n    this.containerFunctions = {\n      setLoading: this.setLoading.bind(this),\n      setDetailsStep: this.setDetailsStep.bind(this),\n      savePaymentInformation: this.savePaymentInformation.bind(this),\n      saveAddressInformation: this.saveAddressInformation.bind(this),\n      onShippingEstimationFieldsChange: this.onShippingEstimationFieldsChange.bind(this),\n      onEmailChange: this.onEmailChange.bind(this),\n      onCreateUserChange: this.onCreateUserChange.bind(this),\n      onPasswordChange: this.onPasswordChange.bind(this),\n      onCouponCodeUpdate: this.onCouponCodeUpdate.bind(this),\n      goBack: this.goBack.bind(this)\n    };\n    this.checkEmailAvailability = debounce(function (email) {\n      const {\n        checkEmailAvailability\n      } = _this.props;\n      checkEmailAvailability(email);\n    }, UPDATE_EMAIL_CHECK_FREQUENCY);\n\n    this.setShippingAddress = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (isDefaultShipping = false) {\n        const {\n          shippingAddress\n        } = _this.state;\n        const {\n          region,\n          region_id,\n          ...address\n        } = shippingAddress;\n        const mutation = MyAccountQuery.getCreateAddressMutation({ ...address,\n          region: {\n            region,\n            region_id\n          },\n          default_shipping: isDefaultShipping\n        });\n        const data = yield fetchMutation(mutation);\n\n        if (data === null || data === void 0 ? void 0 : data.createCustomerAddress) {\n          _this.setState({\n            shippingAddress: { ...shippingAddress,\n              id: data.createCustomerAddress.id\n            }\n          });\n        }\n\n        return true;\n      });\n\n      return function () {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    this.containerProps = function () {\n      const {\n        paymentTotals\n      } = _this.state;\n      return {\n        checkoutTotals: _this._getCheckoutTotals(),\n        paymentTotals\n      };\n    };\n\n    this._handleError = function (error) {\n      const {\n        showErrorNotification\n      } = _this.props;\n\n      _this.setState({\n        isDeliveryOptionsLoading: false,\n        isLoading: false\n      }, function () {\n        showErrorNotification(getErrorMessage(error));\n      });\n\n      return false;\n    };\n  }\n\n  __construct(props) {\n    super.__construct(props);\n\n    const {\n      toggleBreadcrumbs,\n      totals: {\n        is_virtual\n      }\n    } = props;\n    toggleBreadcrumbs(false);\n    this.state = {\n      isLoading: is_virtual,\n      isDeliveryOptionsLoading: false,\n      requestsSent: 0,\n      paymentMethods: [],\n      shippingMethods: [],\n      shippingAddress: {},\n      billingAddress: {},\n      selectedShippingMethod: '',\n      checkoutStep: is_virtual ? BILLING_STEP : SHIPPING_STEP,\n      orderID: '',\n      paymentTotals: BrowserDatabase.getItem(PAYMENT_TOTALS) || {},\n      email: '',\n      isGuestEmailSaved: false,\n      isCreateUser: false,\n      estimateAddress: {}\n    };\n\n    if (is_virtual) {\n      this._getPaymentMethods();\n    }\n  }\n\n  componentDidMount() {\n    const {\n      history,\n      showInfoNotification,\n      guest_checkout,\n      updateMeta,\n      totals: {\n        items = []\n      }\n    } = this.props;\n\n    if (!items.length) {\n      showInfoNotification(__('Please add at least one product to cart!'));\n      history.push(appendWithStoreCode('/cart'));\n    } // if guest checkout is disabled and user is not logged in => throw him to homepage\n\n\n    if (!guest_checkout && !isSignedIn()) {\n      history.push(appendWithStoreCode('/'));\n    }\n\n    updateMeta({\n      title: __('Checkout')\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      match: {\n        params: {\n          step: urlStep\n        }\n      },\n      isEmailAvailable,\n      updateEmail\n    } = this.props;\n    const {\n      match: {\n        params: {\n          step: prevUrlStep\n        }\n      }\n    } = prevProps;\n    const {\n      email\n    } = this.state;\n    const {\n      email: prevEmail\n    } = prevState; // Handle going back from billing to shipping\n\n    if (/shipping/.test(urlStep) && /billing/.test(prevUrlStep)) {\n      BrowserDatabase.deleteItem(PAYMENT_TOTALS); // eslint-disable-next-line react/no-did-update-set-state\n\n      this.setState({\n        checkoutStep: SHIPPING_STEP,\n        isGuestEmailSaved: false\n      });\n    }\n\n    if (email !== prevEmail) {\n      this.checkEmailAvailability(email);\n    }\n\n    if (!isEmailAvailable) {\n      updateEmail(email);\n    }\n\n    return null;\n  }\n\n  componentWillUnmount() {\n    const {\n      toggleBreadcrumbs\n    } = this.props;\n    toggleBreadcrumbs(true);\n  }\n\n  onEmailChange(email) {\n    this.setState({\n      email\n    });\n  }\n\n  onCreateUserChange() {\n    const {\n      isCreateUser\n    } = this.state;\n    this.setState({\n      isCreateUser: !isCreateUser\n    });\n  }\n\n  onPasswordChange(password) {\n    this.setState({\n      password\n    });\n  }\n\n  onShippingEstimationFieldsChange(address) {\n    var _this2 = this;\n\n    const {\n      requestsSent\n    } = this.state;\n    const guestQuoteId = getGuestQuoteId();\n\n    if (!guestQuoteId) {\n      return;\n    }\n\n    this.setState({\n      isDeliveryOptionsLoading: true,\n      requestsSent: requestsSent + 1,\n      estimateAddress: address\n    });\n    fetchMutation(CheckoutQuery.getEstimateShippingCosts(address, guestQuoteId)).then(\n    /** #namespace Route/Checkout/Container/onShippingEstimationFieldsChangeFetchMutationThen */\n    Mosaic.middleware(function ({\n      estimateShippingCosts: shippingMethods\n    }) {\n      const {\n        requestsSent\n      } = _this2.state;\n\n      _this2.setState({\n        shippingMethods,\n        isDeliveryOptionsLoading: requestsSent > 1,\n        requestsSent: requestsSent - 1\n      });\n    }, \"Route/Checkout/Container/onShippingEstimationFieldsChangeFetchMutationThen\"), this._handleError);\n  }\n\n  onCouponCodeUpdate() {\n    const {\n      estimateAddress,\n      checkoutStep\n    } = this.state; // update delivery methods on coupon change\n    // in order ot fetch new available delivery methods\n    // if any could be applied by coupon\n\n    if (checkoutStep === SHIPPING_STEP) {\n      this.onShippingEstimationFieldsChange(estimateAddress);\n    }\n  }\n\n  goBack() {\n    const {\n      checkoutStep\n    } = this.state;\n\n    if (checkoutStep === BILLING_STEP) {\n      this.setState({\n        isLoading: false\n      });\n      BrowserDatabase.deleteItem(PAYMENT_TOTALS);\n    }\n\n    history.goBack();\n  }\n\n  setDetailsStep(orderID) {\n    const {\n      resetCart,\n      resetGuestCart,\n      setNavigationState\n    } = this.props;\n    deleteGuestQuoteId();\n    BrowserDatabase.deleteItem(PAYMENT_TOTALS);\n\n    if (isSignedIn()) {\n      resetCart();\n    } else {\n      resetGuestCart();\n    }\n\n    this.setState({\n      isLoading: false,\n      paymentTotals: {},\n      checkoutStep: DETAILS_STEP,\n      orderID\n    });\n    setNavigationState({\n      name: CART_TAB\n    });\n  }\n\n  setLoading(isLoading = true) {\n    this.setState({\n      isLoading\n    });\n  }\n\n  _getPaymentMethods() {\n    var _this3 = this;\n\n    fetchQuery(CheckoutQuery.getPaymentMethodsQuery(getGuestQuoteId())).then(\n    /** #namespace Route/Checkout/Container/fetchQueryThen */\n    Mosaic.middleware(function ({\n      getPaymentMethods: paymentMethods\n    }) {\n      _this3.setState({\n        isLoading: false,\n        paymentMethods\n      });\n    }, \"Route/Checkout/Container/fetchQueryThen\"), this._handleError);\n  }\n\n  _getCheckoutTotals() {\n    const {\n      totals: cartTotals\n    } = this.props;\n    const {\n      paymentTotals: {\n        shipping_amount\n      }\n    } = this.state;\n    return shipping_amount ? { ...cartTotals,\n      shipping_amount\n    } : cartTotals;\n  }\n\n  saveGuestEmail() {\n    var _this4 = this;\n\n    const {\n      email\n    } = this.state;\n    const {\n      updateEmail\n    } = this.props;\n    const guestCartId = getGuestQuoteId();\n\n    if (!guestCartId) {\n      return null;\n    }\n\n    const mutation = CheckoutQuery.getSaveGuestEmailMutation(email, guestCartId);\n    updateEmail(email);\n    return fetchMutation(mutation).then(\n    /** #namespace Route/Checkout/Container/saveGuestEmailFetchMutationThen */\n    Mosaic.middleware(function ({\n      setGuestEmailOnCart: data\n    }) {\n      if (data) {\n        _this4.setState({\n          isGuestEmailSaved: true\n        });\n      }\n\n      return data;\n    }, \"Route/Checkout/Container/saveGuestEmailFetchMutationThen\"), this._handleError);\n  }\n\n  createUserOrSaveGuest() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        createAccount,\n        totals: {\n          is_virtual\n        },\n        showSuccessNotification,\n        isEmailAvailable\n      } = _this5.props;\n      const {\n        email,\n        password,\n        isCreateUser,\n        shippingAddress: {\n          firstname,\n          lastname\n        }\n      } = _this5.state;\n\n      if (!isCreateUser || !isEmailAvailable) {\n        return _this5.saveGuestEmail();\n      }\n\n      const options = {\n        customer: {\n          email,\n          firstname,\n          lastname\n        },\n        password\n      };\n      const creation = yield createAccount(options);\n\n      if (!creation) {\n        return creation;\n      }\n\n      showSuccessNotification(__('Your account has been created successfully!'));\n\n      if (!is_virtual) {\n        return _this5.setShippingAddress(true);\n      }\n\n      return true;\n    })();\n  }\n\n  prepareAddressInformation(addressInformation) {\n    const {\n      shipping_address: {\n        id,\n        save_in_address_book,\n        ...shippingAddress\n      } = {},\n      billing_address: {\n        id: dropId,\n        save_in_address_book: dropSaveInAddressBook,\n        ...billingAddress\n      } = {},\n      ...data\n    } = addressInformation;\n    return { ...data,\n      shipping_address: shippingAddress,\n      billing_address: billingAddress\n    };\n  }\n\n  saveAddressInformation(addressInformation) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        updateShippingPrice\n      } = _this6.props;\n      const {\n        shipping_address,\n        shipping_method_code\n      } = addressInformation;\n\n      _this6.setState({\n        isLoading: true,\n        shippingAddress: shipping_address,\n        selectedShippingMethod: shipping_method_code\n      });\n\n      if (!isSignedIn()) {\n        if (!(yield _this6.createUserOrSaveGuest())) {\n          _this6.setState({\n            isLoading: false\n          });\n\n          return;\n        }\n      }\n\n      fetchMutation(CheckoutQuery.getSaveAddressInformation(_this6.prepareAddressInformation(addressInformation), getGuestQuoteId())).then(\n      /** #namespace Route/Checkout/Container/saveAddressInformationFetchMutationThen */\n      Mosaic.middleware(function ({\n        saveAddressInformation: data\n      }) {\n        const {\n          payment_methods,\n          totals\n        } = data;\n        updateShippingPrice(totals);\n        BrowserDatabase.setItem(totals, PAYMENT_TOTALS, ONE_MONTH_IN_SECONDS);\n\n        _this6.setState({\n          isLoading: false,\n          paymentMethods: payment_methods,\n          checkoutStep: BILLING_STEP,\n          paymentTotals: totals\n        });\n      }, \"Route/Checkout/Container/saveAddressInformationFetchMutationThen\"), _this6._handleError);\n    })();\n  }\n\n  savePaymentInformation(paymentInformation) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        totals: {\n          is_virtual\n        }\n      } = _this7.props;\n      const {\n        billing_address: {\n          firstname: billingFirstName,\n          lastname: billingLastName\n        },\n        billing_address: billingAddress\n      } = paymentInformation;\n      /**\n       * If cart contains only virtual products then set firstname & lastname\n       * from billing step into shippingAddress for user creating.\n       */\n\n      if (is_virtual) {\n        _this7.setState({\n          shippingAddress: {\n            firstname: billingFirstName,\n            lastname: billingLastName\n          }\n        });\n      }\n\n      _this7.setState({\n        isLoading: true,\n        billingAddress\n      });\n\n      if (!isSignedIn()) {\n        if (!(yield _this7.createUserOrSaveGuest())) {\n          _this7.setState({\n            isLoading: false\n          });\n\n          return;\n        }\n      }\n\n      yield _this7.saveBillingAddress(paymentInformation).then(\n      /** #namespace Route/Checkout/Container/saveBillingAddressThen */\n      Mosaic.middleware(function () {\n        return _this7.savePaymentMethodAndPlaceOrder(paymentInformation);\n      }, \"Route/Checkout/Container/saveBillingAddressThen\"), _this7._handleError);\n    })();\n  }\n\n  trimAddressMagentoStyle(address) {\n    const {\n      countries\n    } = this.props;\n    const {\n      id,\n      // drop this\n      country_id,\n      region_code,\n      // drop this\n      purchaseOrderNumber,\n      // drop this\n      region_id,\n      region,\n      ...restOfBillingAddress\n    } = address;\n    const newAddress = { ...restOfBillingAddress,\n      country_code: country_id,\n      region,\n      region_id\n    };\n    /**\n     * If there is no region specified, but there is region ID\n     * get the region code by the country ID\n     */\n\n    if (region_id) {\n      // find a country by country ID\n      const {\n        available_regions\n      } = countries.find(function ({\n        id\n      }) {\n        return id === country_id;\n      }) || {};\n\n      if (!available_regions) {\n        return newAddress;\n      } // find region by region ID\n\n\n      const {\n        code\n      } = available_regions.find(function ({\n        id\n      }) {\n        return +id === +region_id;\n      }) || {};\n\n      if (!code) {\n        return newAddress;\n      }\n\n      newAddress.region = code;\n    }\n\n    return newAddress;\n  }\n\n  saveBillingAddress(paymentInformation) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      const isCustomerSignedIn = isSignedIn();\n      const guest_cart_id = !isCustomerSignedIn ? getGuestQuoteId() : '';\n\n      if (!isCustomerSignedIn && !getGuestQuoteId) {\n        return;\n      }\n\n      const {\n        billing_address,\n        same_as_shipping\n      } = paymentInformation;\n      const {\n        shippingAddress: {\n          id: shippingAddressId = null\n        } = {}\n      } = _this8.state;\n      const billingAddress = {\n        address: _this8.trimAddressMagentoStyle(billing_address)\n      };\n\n      if (same_as_shipping && shippingAddressId) {\n        billingAddress.customer_address_id = shippingAddressId;\n      }\n\n      yield fetchMutation(CheckoutQuery.getSetBillingAddressOnCart({\n        guest_cart_id,\n        same_as_shipping,\n        billing_address: billingAddress\n      }));\n    })();\n  }\n\n  savePaymentMethodAndPlaceOrder(paymentInformation) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        paymentMethod: {\n          code,\n          additional_data,\n          purchase_order_number\n        }\n      } = paymentInformation;\n      const isCustomerSignedIn = isSignedIn();\n      const guest_cart_id = !isCustomerSignedIn ? getGuestQuoteId() : '';\n\n      if (!isCustomerSignedIn && !guest_cart_id) {\n        return;\n      }\n\n      try {\n        yield fetchMutation(CheckoutQuery.getSetPaymentMethodOnCartMutation({\n          guest_cart_id,\n          payment_method: {\n            code,\n            [code]: additional_data,\n            purchase_order_number\n          }\n        }));\n        const orderData = yield fetchMutation(CheckoutQuery.getPlaceOrderMutation(guest_cart_id));\n        const {\n          placeOrder: {\n            order: {\n              order_id\n            }\n          }\n        } = orderData;\n\n        _this9.setDetailsStep(order_id);\n      } catch (e) {\n        _this9._handleError(e);\n      }\n    })();\n  }\n\n  render() {\n    return /*#__PURE__*/_checkBEM(React, Checkout, Object.assign({}, this.props, this.state, this.containerFunctions, this.containerProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}, _class.propTypes = {\n  showErrorNotification: PropTypes.func.isRequired,\n  showInfoNotification: PropTypes.func.isRequired,\n  showSuccessNotification: PropTypes.func.isRequired,\n  toggleBreadcrumbs: PropTypes.func.isRequired,\n  setNavigationState: PropTypes.func.isRequired,\n  createAccount: PropTypes.func.isRequired,\n  updateMeta: PropTypes.func.isRequired,\n  resetCart: PropTypes.func.isRequired,\n  resetGuestCart: PropTypes.func.isRequired,\n  guest_checkout: PropTypes.bool.isRequired,\n  totals: TotalsType.isRequired,\n  history: HistoryType.isRequired,\n  customer: customerType.isRequired,\n  countries: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string,\n    id: PropTypes.string,\n    available_regions: PropTypes.arrayOf(PropTypes.shape({\n      code: PropTypes.string,\n      name: PropTypes.string,\n      id: PropTypes.number\n    }))\n  })).isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      step: PropTypes.string\n    })\n  }).isRequired,\n  updateShippingFields: PropTypes.func.isRequired,\n  updateEmail: PropTypes.func.isRequired,\n  checkEmailAvailability: PropTypes.func.isRequired,\n  isEmailAvailable: PropTypes.bool.isRequired,\n  updateShippingPrice: PropTypes.func.isRequired\n}, _temp), \"Route/Checkout/Container\");\nexport default connect(mapStateToProps, mapDispatchToProps)(CheckoutContainer);","map":{"version":3,"sources":["/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/route/Checkout/Checkout.container.js"],"names":["PropTypes","PureComponent","connect","CART_TAB","CheckoutQuery","MyAccountQuery","toggleBreadcrumbs","updateShippingPrice","updateEmail","updateShippingFields","updateMeta","changeNavigationState","BOTTOM_NAVIGATION_TYPE","TOP_NAVIGATION_TYPE","showNotification","customerType","HistoryType","TotalsType","isSignedIn","BrowserDatabase","deleteGuestQuoteId","getGuestQuoteId","history","debounce","fetchMutation","fetchQuery","getErrorMessage","ONE_MONTH_IN_SECONDS","appendWithStoreCode","Checkout","BILLING_STEP","DETAILS_STEP","PAYMENT_TOTALS","SHIPPING_STEP","UPDATE_EMAIL_CHECK_FREQUENCY","CartDispatcher","MyAccountDispatcher","CheckoutDispatcher","mapStateToProps","state","totals","CartReducer","cartTotals","customer","MyAccountReducer","guest_checkout","ConfigReducer","countries","isEmailAvailable","CheckoutReducer","isMobile","device","mapDispatchToProps","dispatch","meta","resetCart","then","default","dispatcher","updateInitialCartData","resetGuestCart","createGuestEmptyCart","showErrorNotification","message","showInfoNotification","showSuccessNotification","setHeaderState","stateName","setNavigationState","createAccount","options","fields","email","checkEmailAvailability","handleData","data","containerFunctions","setLoading","bind","setDetailsStep","savePaymentInformation","saveAddressInformation","onShippingEstimationFieldsChange","onEmailChange","onCreateUserChange","onPasswordChange","onCouponCodeUpdate","goBack","props","setShippingAddress","isDefaultShipping","shippingAddress","region","region_id","address","mutation","getCreateAddressMutation","default_shipping","createCustomerAddress","setState","id","containerProps","paymentTotals","checkoutTotals","_getCheckoutTotals","_handleError","error","isDeliveryOptionsLoading","isLoading","__construct","is_virtual","requestsSent","paymentMethods","shippingMethods","billingAddress","selectedShippingMethod","checkoutStep","orderID","getItem","isGuestEmailSaved","isCreateUser","estimateAddress","_getPaymentMethods","componentDidMount","items","length","__","push","title","componentDidUpdate","prevProps","prevState","match","params","step","urlStep","prevUrlStep","prevEmail","test","deleteItem","componentWillUnmount","password","guestQuoteId","getEstimateShippingCosts","estimateShippingCosts","name","getPaymentMethodsQuery","getPaymentMethods","shipping_amount","saveGuestEmail","guestCartId","getSaveGuestEmailMutation","setGuestEmailOnCart","createUserOrSaveGuest","firstname","lastname","creation","prepareAddressInformation","addressInformation","shipping_address","save_in_address_book","billing_address","dropId","dropSaveInAddressBook","shipping_method_code","getSaveAddressInformation","payment_methods","setItem","paymentInformation","billingFirstName","billingLastName","saveBillingAddress","savePaymentMethodAndPlaceOrder","trimAddressMagentoStyle","country_id","region_code","purchaseOrderNumber","restOfBillingAddress","newAddress","country_code","available_regions","find","code","isCustomerSignedIn","guest_cart_id","same_as_shipping","shippingAddressId","customer_address_id","getSetBillingAddressOnCart","paymentMethod","additional_data","purchase_order_number","getSetPaymentMethodOnCartMutation","payment_method","orderData","getPlaceOrderMutation","placeOrder","order","order_id","e","render","propTypes","func","isRequired","bool","arrayOf","shape","label","string","number","CheckoutContainer"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport { CART_TAB } from 'Component/NavigationTabs/NavigationTabs.config';\nimport CheckoutQuery from 'Query/Checkout.query';\nimport MyAccountQuery from 'Query/MyAccount.query';\nimport { toggleBreadcrumbs } from 'Store/Breadcrumbs/Breadcrumbs.action';\nimport { updateShippingPrice } from 'Store/Cart/Cart.action';\nimport { updateEmail, updateShippingFields } from 'Store/Checkout/Checkout.action';\nimport { updateMeta } from 'Store/Meta/Meta.action';\nimport { changeNavigationState } from 'Store/Navigation/Navigation.action';\nimport { BOTTOM_NAVIGATION_TYPE, TOP_NAVIGATION_TYPE } from 'Store/Navigation/Navigation.reducer';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { customerType } from 'Type/Account';\nimport { HistoryType } from 'Type/Common';\nimport { TotalsType } from 'Type/MiniCart';\nimport { isSignedIn } from 'Util/Auth';\nimport BrowserDatabase from 'Util/BrowserDatabase';\nimport { deleteGuestQuoteId, getGuestQuoteId } from 'Util/Cart';\nimport history from 'Util/History';\nimport {\n    debounce,\n    fetchMutation,\n    fetchQuery,\n    getErrorMessage\n} from 'Util/Request';\nimport { ONE_MONTH_IN_SECONDS } from 'Util/Request/QueryDispatcher';\nimport { appendWithStoreCode } from 'Util/Url';\n\nimport Checkout from './Checkout.component';\nimport {\n    BILLING_STEP, DETAILS_STEP, PAYMENT_TOTALS, SHIPPING_STEP, UPDATE_EMAIL_CHECK_FREQUENCY\n} from './Checkout.config';\n\nexport const CartDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Cart/Cart.dispatcher'\n);\nexport const MyAccountDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/MyAccount/MyAccount.dispatcher'\n);\nexport const CheckoutDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Checkout/Checkout.dispatcher'\n);\n\n/** @namespace Route/Checkout/Container/mapStateToProps */\nexport const mapStateToProps = (state) => ({\n    totals: state.CartReducer.cartTotals,\n    customer: state.MyAccountReducer.customer,\n    guest_checkout: state.ConfigReducer.guest_checkout,\n    countries: state.ConfigReducer.countries,\n    isEmailAvailable: state.CheckoutReducer.isEmailAvailable,\n    isMobile: state.ConfigReducer.device.isMobile\n});\n\n/** @namespace Route/Checkout/Container/mapDispatchToProps */\nexport const mapDispatchToProps = (dispatch) => ({\n    updateMeta: (meta) => dispatch(updateMeta(meta)),\n    resetCart: () => CartDispatcher.then(\n        ({ default: dispatcher }) => dispatcher.updateInitialCartData(dispatch)\n    ),\n    resetGuestCart: () => CartDispatcher.then(\n        ({ default: dispatcher }) => {\n            dispatcher.resetGuestCart(dispatch);\n            dispatcher.createGuestEmptyCart(dispatch);\n        }\n    ),\n    toggleBreadcrumbs: (state) => dispatch(toggleBreadcrumbs(state)),\n    showErrorNotification: (message) => dispatch(showNotification('error', message)),\n    showInfoNotification: (message) => dispatch(showNotification('info', message)),\n    showSuccessNotification: (message) => dispatch(showNotification('success', message)),\n    setHeaderState: (stateName) => dispatch(changeNavigationState(TOP_NAVIGATION_TYPE, stateName)),\n    setNavigationState: (stateName) => dispatch(changeNavigationState(BOTTOM_NAVIGATION_TYPE, stateName)),\n    createAccount: (options) => MyAccountDispatcher.then(\n        ({ default: dispatcher }) => dispatcher.createAccount(options, dispatch)\n    ),\n    updateShippingFields: (fields) => dispatch(updateShippingFields(fields)),\n    updateEmail: (email) => dispatch(updateEmail(email)),\n    checkEmailAvailability: (email) => CheckoutDispatcher.then(\n        ({ default: dispatcher }) => dispatcher.handleData(dispatch, email)\n    ),\n    updateShippingPrice: (data) => dispatch(updateShippingPrice(data))\n});\n\n/** @namespace Route/Checkout/Container */\nexport class CheckoutContainer extends PureComponent {\n    static propTypes = {\n        showErrorNotification: PropTypes.func.isRequired,\n        showInfoNotification: PropTypes.func.isRequired,\n        showSuccessNotification: PropTypes.func.isRequired,\n        toggleBreadcrumbs: PropTypes.func.isRequired,\n        setNavigationState: PropTypes.func.isRequired,\n        createAccount: PropTypes.func.isRequired,\n        updateMeta: PropTypes.func.isRequired,\n        resetCart: PropTypes.func.isRequired,\n        resetGuestCart: PropTypes.func.isRequired,\n        guest_checkout: PropTypes.bool.isRequired,\n        totals: TotalsType.isRequired,\n        history: HistoryType.isRequired,\n        customer: customerType.isRequired,\n        countries: PropTypes.arrayOf(\n            PropTypes.shape({\n                label: PropTypes.string,\n                id: PropTypes.string,\n                available_regions: PropTypes.arrayOf(\n                    PropTypes.shape({\n                        code: PropTypes.string,\n                        name: PropTypes.string,\n                        id: PropTypes.number\n                    })\n                )\n            })\n        ).isRequired,\n        match: PropTypes.shape({\n            params: PropTypes.shape({\n                step: PropTypes.string\n            })\n        }).isRequired,\n        updateShippingFields: PropTypes.func.isRequired,\n        updateEmail: PropTypes.func.isRequired,\n        checkEmailAvailability: PropTypes.func.isRequired,\n        isEmailAvailable: PropTypes.bool.isRequired,\n        updateShippingPrice: PropTypes.func.isRequired\n    };\n\n    containerFunctions = {\n        setLoading: this.setLoading.bind(this),\n        setDetailsStep: this.setDetailsStep.bind(this),\n        savePaymentInformation: this.savePaymentInformation.bind(this),\n        saveAddressInformation: this.saveAddressInformation.bind(this),\n        onShippingEstimationFieldsChange: this.onShippingEstimationFieldsChange.bind(this),\n        onEmailChange: this.onEmailChange.bind(this),\n        onCreateUserChange: this.onCreateUserChange.bind(this),\n        onPasswordChange: this.onPasswordChange.bind(this),\n        onCouponCodeUpdate: this.onCouponCodeUpdate.bind(this),\n        goBack: this.goBack.bind(this)\n    };\n\n    checkEmailAvailability = debounce((email) => {\n        const { checkEmailAvailability } = this.props;\n        checkEmailAvailability(email);\n    }, UPDATE_EMAIL_CHECK_FREQUENCY);\n\n    __construct(props) {\n        super.__construct(props);\n\n        const {\n            toggleBreadcrumbs,\n            totals: {\n                is_virtual\n            }\n        } = props;\n\n        toggleBreadcrumbs(false);\n\n        this.state = {\n            isLoading: is_virtual,\n            isDeliveryOptionsLoading: false,\n            requestsSent: 0,\n            paymentMethods: [],\n            shippingMethods: [],\n            shippingAddress: {},\n            billingAddress: {},\n            selectedShippingMethod: '',\n            checkoutStep: is_virtual ? BILLING_STEP : SHIPPING_STEP,\n            orderID: '',\n            paymentTotals: BrowserDatabase.getItem(PAYMENT_TOTALS) || {},\n            email: '',\n            isGuestEmailSaved: false,\n            isCreateUser: false,\n            estimateAddress: {}\n        };\n\n        if (is_virtual) {\n            this._getPaymentMethods();\n        }\n    }\n\n    componentDidMount() {\n        const {\n            history,\n            showInfoNotification,\n            guest_checkout,\n            updateMeta,\n            totals: {\n                items = []\n            }\n        } = this.props;\n\n        if (!items.length) {\n            showInfoNotification(__('Please add at least one product to cart!'));\n            history.push(appendWithStoreCode('/cart'));\n        }\n\n        // if guest checkout is disabled and user is not logged in => throw him to homepage\n        if (!guest_checkout && !isSignedIn()) {\n            history.push(appendWithStoreCode('/'));\n        }\n\n        updateMeta({ title: __('Checkout') });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const { match: { params: { step: urlStep } }, isEmailAvailable, updateEmail } = this.props;\n        const { match: { params: { step: prevUrlStep } } } = prevProps;\n        const { email } = this.state;\n        const { email: prevEmail } = prevState;\n\n        // Handle going back from billing to shipping\n        if (/shipping/.test(urlStep) && /billing/.test(prevUrlStep)) {\n            BrowserDatabase.deleteItem(PAYMENT_TOTALS);\n\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState({\n                checkoutStep: SHIPPING_STEP,\n                isGuestEmailSaved: false\n            });\n        }\n\n        if (email !== prevEmail) {\n            this.checkEmailAvailability(email);\n        }\n\n        if (!isEmailAvailable) {\n            updateEmail(email);\n        }\n\n        return null;\n    }\n\n    componentWillUnmount() {\n        const { toggleBreadcrumbs } = this.props;\n        toggleBreadcrumbs(true);\n    }\n\n    onEmailChange(email) {\n        this.setState({ email });\n    }\n\n    onCreateUserChange() {\n        const { isCreateUser } = this.state;\n        this.setState({ isCreateUser: !isCreateUser });\n    }\n\n    onPasswordChange(password) {\n        this.setState({ password });\n    }\n\n    onShippingEstimationFieldsChange(address) {\n        const { requestsSent } = this.state;\n        const guestQuoteId = getGuestQuoteId();\n\n        if (!guestQuoteId) {\n            return;\n        }\n\n        this.setState({\n            isDeliveryOptionsLoading: true,\n            requestsSent: requestsSent + 1,\n            estimateAddress: address\n        });\n\n        fetchMutation(CheckoutQuery.getEstimateShippingCosts(\n            address,\n            guestQuoteId\n        )).then(\n            /** @namespace Route/Checkout/Container/onShippingEstimationFieldsChangeFetchMutationThen */\n            ({ estimateShippingCosts: shippingMethods }) => {\n                const { requestsSent } = this.state;\n\n                this.setState({\n                    shippingMethods,\n                    isDeliveryOptionsLoading: requestsSent > 1,\n                    requestsSent: requestsSent - 1\n                });\n            },\n            this._handleError\n        );\n    }\n\n    onCouponCodeUpdate() {\n        const { estimateAddress, checkoutStep } = this.state;\n\n        // update delivery methods on coupon change\n        // in order ot fetch new available delivery methods\n        // if any could be applied by coupon\n        if (checkoutStep === SHIPPING_STEP) {\n            this.onShippingEstimationFieldsChange(estimateAddress);\n        }\n    }\n\n    goBack() {\n        const { checkoutStep } = this.state;\n\n        if (checkoutStep === BILLING_STEP) {\n            this.setState({\n                isLoading: false\n            });\n            BrowserDatabase.deleteItem(PAYMENT_TOTALS);\n        }\n\n        history.goBack();\n    }\n\n    setDetailsStep(orderID) {\n        const { resetCart, resetGuestCart, setNavigationState } = this.props;\n\n        deleteGuestQuoteId();\n        BrowserDatabase.deleteItem(PAYMENT_TOTALS);\n\n        if (isSignedIn()) {\n            resetCart();\n        } else {\n            resetGuestCart();\n        }\n\n        this.setState({\n            isLoading: false,\n            paymentTotals: {},\n            checkoutStep: DETAILS_STEP,\n            orderID\n        });\n\n        setNavigationState({\n            name: CART_TAB\n        });\n    }\n\n    setLoading(isLoading = true) {\n        this.setState({ isLoading });\n    }\n\n    setShippingAddress = async (isDefaultShipping = false) => {\n        const { shippingAddress } = this.state;\n        const { region, region_id, ...address } = shippingAddress;\n\n        const mutation = MyAccountQuery.getCreateAddressMutation({\n            ...address,\n            region: { region, region_id },\n            default_shipping: isDefaultShipping\n        });\n\n        const data = await fetchMutation(mutation);\n\n        if (data?.createCustomerAddress) {\n            this.setState({\n                shippingAddress: {\n                    ...shippingAddress,\n                    id: data.createCustomerAddress.id\n                }\n            });\n        }\n\n        return true;\n    };\n\n    containerProps = () => {\n        const { paymentTotals } = this.state;\n\n        return {\n            checkoutTotals: this._getCheckoutTotals(),\n            paymentTotals\n        };\n    };\n\n    _handleError = (error) => {\n        const { showErrorNotification } = this.props;\n\n        this.setState({\n            isDeliveryOptionsLoading: false,\n            isLoading: false\n        }, () => {\n            showErrorNotification(getErrorMessage(error));\n        });\n\n        return false;\n    };\n\n    _getPaymentMethods() {\n        fetchQuery(CheckoutQuery.getPaymentMethodsQuery(\n            getGuestQuoteId()\n        )).then(\n            /** @namespace Route/Checkout/Container/fetchQueryThen */\n            ({ getPaymentMethods: paymentMethods }) => {\n                this.setState({ isLoading: false, paymentMethods });\n            },\n            this._handleError\n        );\n    }\n\n    _getCheckoutTotals() {\n        const { totals: cartTotals } = this.props;\n        const { paymentTotals: { shipping_amount } } = this.state;\n\n        return shipping_amount\n            ? { ...cartTotals, shipping_amount }\n            : cartTotals;\n    }\n\n    saveGuestEmail() {\n        const { email } = this.state;\n        const { updateEmail } = this.props;\n        const guestCartId = getGuestQuoteId();\n\n        if (!guestCartId) {\n            return null;\n        }\n\n        const mutation = CheckoutQuery.getSaveGuestEmailMutation(email, guestCartId);\n\n        updateEmail(email);\n        return fetchMutation(mutation).then(\n            /** @namespace Route/Checkout/Container/saveGuestEmailFetchMutationThen */\n            ({ setGuestEmailOnCart: data }) => {\n                if (data) {\n                    this.setState({ isGuestEmailSaved: true });\n                }\n\n                return data;\n            },\n            this._handleError\n        );\n    }\n\n    async createUserOrSaveGuest() {\n        const {\n            createAccount,\n            totals: { is_virtual },\n            showSuccessNotification,\n            isEmailAvailable\n        } = this.props;\n\n        const {\n            email,\n            password,\n            isCreateUser,\n            shippingAddress: {\n                firstname,\n                lastname\n            }\n        } = this.state;\n\n        if (!isCreateUser || !isEmailAvailable) {\n            return this.saveGuestEmail();\n        }\n\n        const options = {\n            customer: {\n                email,\n                firstname,\n                lastname\n            },\n            password\n        };\n\n        const creation = await createAccount(options);\n\n        if (!creation) {\n            return creation;\n        }\n\n        showSuccessNotification(__('Your account has been created successfully!'));\n\n        if (!is_virtual) {\n            return this.setShippingAddress(true);\n        }\n\n        return true;\n    }\n\n    prepareAddressInformation(addressInformation) {\n        const {\n            shipping_address: {\n                id,\n                save_in_address_book,\n                ...shippingAddress\n            } = {},\n            billing_address: {\n                id: dropId,\n                save_in_address_book: dropSaveInAddressBook,\n                ...billingAddress\n            } = {},\n            ...data\n        } = addressInformation;\n\n        return {\n            ...data,\n            shipping_address: shippingAddress,\n            billing_address: billingAddress\n        };\n    }\n\n    async saveAddressInformation(addressInformation) {\n        const { updateShippingPrice } = this.props;\n        const { shipping_address, shipping_method_code } = addressInformation;\n\n        this.setState({\n            isLoading: true,\n            shippingAddress: shipping_address,\n            selectedShippingMethod: shipping_method_code\n        });\n\n        if (!isSignedIn()) {\n            if (!await this.createUserOrSaveGuest()) {\n                this.setState({ isLoading: false });\n                return;\n            }\n        }\n\n        fetchMutation(CheckoutQuery.getSaveAddressInformation(\n            this.prepareAddressInformation(addressInformation),\n            getGuestQuoteId()\n        )).then(\n            /** @namespace Route/Checkout/Container/saveAddressInformationFetchMutationThen */\n            ({ saveAddressInformation: data }) => {\n                const { payment_methods, totals } = data;\n\n                updateShippingPrice(totals);\n\n                BrowserDatabase.setItem(\n                    totals,\n                    PAYMENT_TOTALS,\n                    ONE_MONTH_IN_SECONDS\n                );\n\n                this.setState({\n                    isLoading: false,\n                    paymentMethods: payment_methods,\n                    checkoutStep: BILLING_STEP,\n                    paymentTotals: totals\n                });\n            },\n            this._handleError\n        );\n    }\n\n    async savePaymentInformation(paymentInformation) {\n        const { totals: { is_virtual } } = this.props;\n        const {\n            billing_address: {\n                firstname: billingFirstName,\n                lastname: billingLastName\n            },\n            billing_address: billingAddress\n        } = paymentInformation;\n\n        /**\n         * If cart contains only virtual products then set firstname & lastname\n         * from billing step into shippingAddress for user creating.\n         */\n        if (is_virtual) {\n            this.setState({\n                shippingAddress: {\n                    firstname: billingFirstName,\n                    lastname: billingLastName\n                }\n            });\n        }\n\n        this.setState({ isLoading: true, billingAddress });\n\n        if (!isSignedIn()) {\n            if (!await this.createUserOrSaveGuest()) {\n                this.setState({ isLoading: false });\n                return;\n            }\n        }\n\n        await this.saveBillingAddress(paymentInformation).then(\n            /** @namespace Route/Checkout/Container/saveBillingAddressThen */\n            () => this.savePaymentMethodAndPlaceOrder(paymentInformation),\n            this._handleError\n        );\n    }\n\n    trimAddressMagentoStyle(address) {\n        const { countries } = this.props;\n\n        const {\n            id, // drop this\n            country_id,\n            region_code, // drop this\n            purchaseOrderNumber, // drop this\n            region_id,\n            region,\n            ...restOfBillingAddress\n        } = address;\n\n        const newAddress = {\n            ...restOfBillingAddress,\n            country_code: country_id,\n            region,\n            region_id\n        };\n\n        /**\n         * If there is no region specified, but there is region ID\n         * get the region code by the country ID\n         */\n        if (region_id) {\n            // find a country by country ID\n            const { available_regions } = countries.find(\n                ({ id }) => id === country_id\n            ) || {};\n\n            if (!available_regions) {\n                return newAddress;\n            }\n\n            // find region by region ID\n            const { code } = available_regions.find(\n                ({ id }) => +id === +region_id\n            ) || {};\n\n            if (!code) {\n                return newAddress;\n            }\n\n            newAddress.region = code;\n        }\n\n        return newAddress;\n    }\n\n    async saveBillingAddress(paymentInformation) {\n        const isCustomerSignedIn = isSignedIn();\n        const guest_cart_id = !isCustomerSignedIn ? getGuestQuoteId() : '';\n\n        if (!isCustomerSignedIn && !getGuestQuoteId) {\n            return;\n        }\n\n        const { billing_address, same_as_shipping } = paymentInformation;\n        const {\n            shippingAddress: {\n                id: shippingAddressId = null\n            } = {}\n        } = this.state;\n        const billingAddress = {\n            address: this.trimAddressMagentoStyle(billing_address)\n        };\n\n        if (same_as_shipping && shippingAddressId) {\n            billingAddress.customer_address_id = shippingAddressId;\n        }\n\n        await fetchMutation(CheckoutQuery.getSetBillingAddressOnCart({\n            guest_cart_id,\n            same_as_shipping,\n            billing_address: billingAddress\n        }));\n    }\n\n    async savePaymentMethodAndPlaceOrder(paymentInformation) {\n        const { paymentMethod: { code, additional_data, purchase_order_number } } = paymentInformation;\n        const isCustomerSignedIn = isSignedIn();\n        const guest_cart_id = !isCustomerSignedIn ? getGuestQuoteId() : '';\n\n        if (!isCustomerSignedIn && !guest_cart_id) {\n            return;\n        }\n\n        try {\n            await fetchMutation(CheckoutQuery.getSetPaymentMethodOnCartMutation({\n                guest_cart_id,\n                payment_method: {\n                    code,\n                    [code]: additional_data,\n                    purchase_order_number\n                }\n            }));\n\n            const orderData = await fetchMutation(CheckoutQuery.getPlaceOrderMutation(guest_cart_id));\n            const { placeOrder: { order: { order_id } } } = orderData;\n\n            this.setDetailsStep(order_id);\n        } catch (e) {\n            this._handleError(e);\n        }\n    }\n\n    render() {\n        return (\n            <Checkout\n              { ...this.props }\n              { ...this.state }\n              { ...this.containerFunctions }\n              { ...this.containerProps() }\n            />\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CheckoutContainer);\n"]},"metadata":{},"sourceType":"module"}