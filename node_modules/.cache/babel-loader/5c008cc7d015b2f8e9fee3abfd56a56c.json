{"ast":null,"code":"import _asyncToGenerator from \"/home/arturs/scandiweb/extension/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport { CHECKOUT, MY_ACCOUNT } from \"/home/arturs/scandiweb/extension/src/component/Header/Header.config\";\nimport MyAccountQuery from \"/home/arturs/scandiweb/extension/src/query/MyAccount.query\";\nimport { updateCustomerDetails, updateCustomerPasswordForgotStatus, updateCustomerPasswordResetStatus, updateCustomerSignInStatus, updateIsLoading } from \"/home/arturs/scandiweb/extension/src/store/MyAccount/MyAccount.action\";\nimport { showNotification } from \"/home/arturs/scandiweb/extension/src/store/Notification/Notification.action\";\nimport { ORDERS } from \"/home/arturs/scandiweb/extension/src/store/Order/Order.reducer\";\nimport { hideActiveOverlay } from \"/home/arturs/scandiweb/extension/src/store/Overlay/Overlay.action\";\nimport { clearComparedProducts } from \"/home/arturs/scandiweb/extension/src/store/ProductCompare/ProductCompare.action\";\nimport { deleteAuthorizationToken, isSignedIn, setAuthorizationToken } from \"/home/arturs/scandiweb/extension/src/util/Auth\";\nimport BrowserDatabase from \"/home/arturs/scandiweb/extension/src/util/BrowserDatabase\";\nimport { deleteGuestQuoteId, getGuestQuoteId, setGuestQuoteId } from \"/home/arturs/scandiweb/extension/src/util/Cart\";\nimport { removeUid } from \"/home/arturs/scandiweb/extension/src/util/Compare\";\nimport history from \"/home/arturs/scandiweb/extension/src/util/History\";\nimport { prepareQuery } from \"/home/arturs/scandiweb/extension/src/util/Query\";\nimport { executePost, fetchMutation, getErrorMessage } from \"/home/arturs/scandiweb/extension/src/util/Request\";\nexport const CartDispatcher = import(\n/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n\"/home/arturs/scandiweb/extension/src/store/Cart/Cart.dispatcher\");\nexport const WishlistDispatcher = import(\n/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n\"/home/arturs/scandiweb/extension/src/store/Wishlist/Wishlist.dispatcher\");\nexport const ProductCompareDispatcher = import(\n/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n\"/home/arturs/scandiweb/extension/src/store/ProductCompare/ProductCompare.dispatcher\");\nexport const CUSTOMER = 'customer';\nexport const ONE_MONTH_IN_SECONDS = 2628000;\n/**\n * My account actions\n * @class MyAccount\n * #namespace Store/MyAccount/Dispatcher\n */\n\nexport const MyAccountDispatcher = Mosaic.middleware(class MyAccountDispatcher_ extends Mosaic.Extensible() {\n  constructor(...args) {\n    super(...args);\n    this.forceLogoutRedirectPages = [CHECKOUT, MY_ACCOUNT];\n  }\n\n  requestCustomerData(dispatch) {\n    const query = MyAccountQuery.getCustomerQuery();\n    const customer = BrowserDatabase.getItem(CUSTOMER) || {};\n\n    if (customer.id) {\n      dispatch(updateCustomerDetails(customer));\n    }\n\n    return executePost(prepareQuery([query])).then(\n    /** #namespace Store/MyAccount/Dispatcher/requestCustomerDataExecutePostThen */\n    Mosaic.middleware(function ({\n      customer\n    }) {\n      dispatch(updateCustomerDetails(customer));\n      BrowserDatabase.setItem(customer, CUSTOMER, ONE_MONTH_IN_SECONDS);\n    }, \"Store/MyAccount/Dispatcher/requestCustomerDataExecutePostThen\"),\n    /** #namespace Store/MyAccount/Dispatcher/requestCustomerDataExecutePostError */\n    Mosaic.middleware(function (error) {\n      return dispatch(showNotification('error', getErrorMessage(error)));\n    }, \"Store/MyAccount/Dispatcher/requestCustomerDataExecutePostError\"));\n  }\n\n  logout(authTokenExpired = false, dispatch) {\n    if (authTokenExpired) {\n      dispatch(showNotification('error', __('Your session is over, you are logged out!')));\n      this.handleForceRedirectToLoginPage();\n    } else {\n      deleteAuthorizationToken();\n      dispatch(showNotification('success', __('You are successfully logged out!')));\n    }\n\n    deleteGuestQuoteId();\n    BrowserDatabase.deleteItem(ORDERS);\n    BrowserDatabase.deleteItem(CUSTOMER);\n    removeUid();\n    dispatch(updateCustomerSignInStatus(false));\n    dispatch(updateCustomerDetails({})); // After logout cart, wishlist and compared product list is always empty.\n    // There is no need to fetch it from the backend.\n\n    CartDispatcher.then(function ({\n      default: dispatcher\n    }) {\n      dispatcher.resetGuestCart(dispatch);\n      dispatcher.createGuestEmptyCart(dispatch);\n    });\n    WishlistDispatcher.then(function ({\n      default: dispatcher\n    }) {\n      return dispatcher.resetWishlist(dispatch);\n    });\n    dispatch(clearComparedProducts());\n    dispatch(updateCustomerDetails({}));\n  }\n  /**\n   * Forgot password action\n   * @param {{email: String}} [options={}]\n   * @returns {Promise<{status: String}>} Reset password token\n   * @memberof MyAccountDispatcher\n   */\n\n\n  forgotPassword(options = {}, dispatch) {\n    const mutation = MyAccountQuery.getForgotPasswordMutation(options);\n    return fetchMutation(mutation).then(\n    /** #namespace Store/MyAccount/Dispatcher/forgotPasswordFetchMutationThen */\n    Mosaic.middleware(function () {\n      return dispatch(updateCustomerPasswordForgotStatus());\n    }, \"Store/MyAccount/Dispatcher/forgotPasswordFetchMutationThen\"),\n    /** #namespace Store/MyAccount/Dispatcher/forgotPasswordFetchMutationError */\n    Mosaic.middleware(function (error) {\n      return dispatch(showNotification('error', getErrorMessage(error)));\n    }, \"Store/MyAccount/Dispatcher/forgotPasswordFetchMutationError\"));\n  }\n  /**\n   * Reset password action\n   * @param {{token: String, password: String, password_confirmation: String}} [options={}]\n   * @returns {Promise<{status: String}>} Reset password token\n   * @memberof MyAccountDispatcher\n   */\n\n\n  resetPassword(options = {}, dispatch) {\n    const mutation = MyAccountQuery.getResetPasswordMutation(options);\n    return fetchMutation(mutation).then(\n    /** #namespace Store/MyAccount/Dispatcher/resetPasswordFetchMutationThen */\n    Mosaic.middleware(function ({\n      s_resetPassword: {\n        status\n      }\n    }) {\n      return dispatch(updateCustomerPasswordResetStatus(status));\n    }, \"Store/MyAccount/Dispatcher/resetPasswordFetchMutationThen\"),\n    /** #namespace Store/MyAccount/Dispatcher/resetPasswordFetchMutationError */\n    Mosaic.middleware(function (errors) {\n      return dispatch(updateCustomerPasswordResetStatus('error', getErrorMessage(errors)));\n    }, \"Store/MyAccount/Dispatcher/resetPasswordFetchMutationError\"));\n  }\n  /**\n   * Create account action\n   * @param {{customer: Object, password: String}} [options={}]\n   * @memberof MyAccountDispatcher\n   */\n\n\n  createAccount(options = {}, dispatch) {\n    var _this = this;\n\n    const {\n      customer: {\n        email\n      },\n      password\n    } = options;\n    const mutation = MyAccountQuery.getCreateAccountMutation(options);\n    dispatch(updateIsLoading(true));\n    return fetchMutation(mutation).then(\n    /** #namespace Store/MyAccount/Dispatcher/createAccountFetchMutationThen */\n    Mosaic.middleware(function (data) {\n      const {\n        createCustomer: {\n          customer\n        }\n      } = data;\n      const {\n        confirmation_required\n      } = customer;\n\n      if (confirmation_required) {\n        dispatch(updateIsLoading(false));\n        return 2;\n      }\n\n      return _this.signIn({\n        email,\n        password\n      }, dispatch);\n    }, \"Store/MyAccount/Dispatcher/createAccountFetchMutationThen\"),\n    /** #namespace Store/MyAccount/Dispatcher/createAccountFetchMutationError */\n    Mosaic.middleware(function (error) {\n      dispatch(updateIsLoading(false));\n      dispatch(showNotification('error', getErrorMessage(error)));\n      Promise.reject();\n      return false;\n    }, \"Store/MyAccount/Dispatcher/createAccountFetchMutationError\"));\n  }\n  /**\n   * Confirm account action\n   * @param {{key: String, email: String, password: String}} [options={}]\n   * @memberof MyAccountDispatcher\n   */\n\n\n  confirmAccount(options = {}, dispatch) {\n    const mutation = MyAccountQuery.getConfirmAccountMutation(options);\n    return fetchMutation(mutation).then(\n    /** #namespace Store/MyAccount/Dispatcher/confirmAccountFetchMutationThen */\n    Mosaic.middleware(function () {\n      return dispatch(showNotification('success', __('Your account is confirmed!')));\n    }, \"Store/MyAccount/Dispatcher/confirmAccountFetchMutationThen\"),\n    /** #namespace Store/MyAccount/Dispatcher/confirmAccountFetchMutationError */\n    Mosaic.middleware(function (error) {\n      return dispatch(showNotification('error', getErrorMessage(error, __('Something went wrong! Please, try again!'))));\n    }, \"Store/MyAccount/Dispatcher/confirmAccountFetchMutationError\"));\n  }\n  /**\n   * Sign in action\n   * @param {{email: String, password: String}} [options={}]\n   * @memberof MyAccountDispatcher\n   */\n\n\n  signIn(options = {}, dispatch) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const mutation = MyAccountQuery.getSignInMutation(options);\n      const result = yield fetchMutation(mutation);\n      const {\n        generateCustomerToken: {\n          token\n        }\n      } = result;\n      setAuthorizationToken(token);\n      const cartDispatcher = (yield CartDispatcher).default;\n      const guestCartToken = getGuestQuoteId(); // if customer is authorized, `createEmptyCart` mutation returns customer cart token\n\n      const customerCartToken = yield cartDispatcher.createGuestEmptyCart(dispatch);\n\n      if (guestCartToken && guestCartToken !== customerCartToken) {\n        // merge guest cart id and customer cart id using magento capabilities\n        yield cartDispatcher.mergeCarts(guestCartToken, customerCartToken, dispatch);\n      }\n\n      setGuestQuoteId(customerCartToken);\n      cartDispatcher.updateInitialCartData(dispatch);\n      WishlistDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.updateInitialWishlistData(dispatch);\n      });\n      ProductCompareDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.assignCompareList(dispatch);\n      });\n      yield _this2.requestCustomerData(dispatch);\n      dispatch(updateCustomerSignInStatus(true));\n      dispatch(updateIsLoading(false));\n      dispatch(hideActiveOverlay());\n      dispatch(showNotification('success', __('You are successfully logged in!')));\n      return true;\n    })();\n  }\n\n  handleForceRedirectToLoginPage() {\n    const {\n      location: {\n        pathname = ''\n      } = {}\n    } = history;\n    const doRedirect = this.forceLogoutRedirectPages.reduce(function (result, urlPart) {\n      if (pathname.includes(urlPart)) {\n        return true;\n      }\n\n      return result;\n    }, false);\n\n    if (doRedirect) {\n      history.push({\n        pathname: '/account/login'\n      });\n    }\n  }\n\n  handleCustomerDataOnInit(dispatch) {\n    if (isSignedIn()) {\n      return;\n    }\n\n    BrowserDatabase.deleteItem(ORDERS);\n    BrowserDatabase.deleteItem(CUSTOMER);\n    CartDispatcher.then(function ({\n      default: dispatcher\n    }) {\n      return dispatcher.resetGuestCart(dispatch);\n    });\n  }\n\n}, \"Store/MyAccount/Dispatcher\");\nexport default new MyAccountDispatcher();","map":{"version":3,"sources":["/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/store/MyAccount/MyAccount.dispatcher.js"],"names":["CHECKOUT","MY_ACCOUNT","MyAccountQuery","updateCustomerDetails","updateCustomerPasswordForgotStatus","updateCustomerPasswordResetStatus","updateCustomerSignInStatus","updateIsLoading","showNotification","ORDERS","hideActiveOverlay","clearComparedProducts","deleteAuthorizationToken","isSignedIn","setAuthorizationToken","BrowserDatabase","deleteGuestQuoteId","getGuestQuoteId","setGuestQuoteId","removeUid","history","prepareQuery","executePost","fetchMutation","getErrorMessage","CartDispatcher","WishlistDispatcher","ProductCompareDispatcher","CUSTOMER","ONE_MONTH_IN_SECONDS","forceLogoutRedirectPages","requestCustomerData","dispatch","query","getCustomerQuery","customer","getItem","id","then","setItem","error","logout","authTokenExpired","__","handleForceRedirectToLoginPage","deleteItem","default","dispatcher","resetGuestCart","createGuestEmptyCart","resetWishlist","forgotPassword","options","mutation","getForgotPasswordMutation","resetPassword","getResetPasswordMutation","s_resetPassword","status","errors","createAccount","email","password","getCreateAccountMutation","data","createCustomer","confirmation_required","signIn","Promise","reject","confirmAccount","getConfirmAccountMutation","getSignInMutation","result","generateCustomerToken","token","cartDispatcher","guestCartToken","customerCartToken","mergeCarts","updateInitialCartData","updateInitialWishlistData","assignCompareList","location","pathname","doRedirect","reduce","urlPart","includes","push","handleCustomerDataOnInit","MyAccountDispatcher"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport { CHECKOUT, MY_ACCOUNT } from 'Component/Header/Header.config';\nimport MyAccountQuery from 'Query/MyAccount.query';\nimport {\n    updateCustomerDetails,\n    updateCustomerPasswordForgotStatus,\n    updateCustomerPasswordResetStatus,\n    updateCustomerSignInStatus,\n    updateIsLoading\n} from 'Store/MyAccount/MyAccount.action';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { ORDERS } from 'Store/Order/Order.reducer';\nimport { hideActiveOverlay } from 'Store/Overlay/Overlay.action';\nimport { clearComparedProducts } from 'Store/ProductCompare/ProductCompare.action';\nimport {\n    deleteAuthorizationToken,\n    isSignedIn,\n    setAuthorizationToken\n} from 'Util/Auth';\nimport BrowserDatabase from 'Util/BrowserDatabase';\nimport { deleteGuestQuoteId, getGuestQuoteId, setGuestQuoteId } from 'Util/Cart';\nimport { removeUid } from 'Util/Compare';\nimport history from 'Util/History';\nimport { prepareQuery } from 'Util/Query';\nimport { executePost, fetchMutation, getErrorMessage } from 'Util/Request';\n\nexport const CartDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Cart/Cart.dispatcher'\n);\n\nexport const WishlistDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Wishlist/Wishlist.dispatcher'\n);\n\nexport const ProductCompareDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/ProductCompare/ProductCompare.dispatcher'\n);\n\nexport const CUSTOMER = 'customer';\n\nexport const ONE_MONTH_IN_SECONDS = 2628000;\n\n/**\n * My account actions\n * @class MyAccount\n * @namespace Store/MyAccount/Dispatcher\n */\nexport class MyAccountDispatcher {\n    forceLogoutRedirectPages = [\n        CHECKOUT,\n        MY_ACCOUNT\n    ];\n\n    requestCustomerData(dispatch) {\n        const query = MyAccountQuery.getCustomerQuery();\n\n        const customer = BrowserDatabase.getItem(CUSTOMER) || {};\n        if (customer.id) {\n            dispatch(updateCustomerDetails(customer));\n        }\n\n        return executePost(prepareQuery([query])).then(\n            /** @namespace Store/MyAccount/Dispatcher/requestCustomerDataExecutePostThen */\n            ({ customer }) => {\n                dispatch(updateCustomerDetails(customer));\n                BrowserDatabase.setItem(customer, CUSTOMER, ONE_MONTH_IN_SECONDS);\n            },\n            /** @namespace Store/MyAccount/Dispatcher/requestCustomerDataExecutePostError */\n            (error) => dispatch(showNotification('error', getErrorMessage(error)))\n        );\n    }\n\n    logout(authTokenExpired = false, dispatch) {\n        if (authTokenExpired) {\n            dispatch(showNotification('error', __('Your session is over, you are logged out!')));\n            this.handleForceRedirectToLoginPage();\n        } else {\n            deleteAuthorizationToken();\n            dispatch(showNotification('success', __('You are successfully logged out!')));\n        }\n\n        deleteGuestQuoteId();\n        BrowserDatabase.deleteItem(ORDERS);\n        BrowserDatabase.deleteItem(CUSTOMER);\n        removeUid();\n\n        dispatch(updateCustomerSignInStatus(false));\n        dispatch(updateCustomerDetails({}));\n\n        // After logout cart, wishlist and compared product list is always empty.\n        // There is no need to fetch it from the backend.\n        CartDispatcher.then(\n            ({ default: dispatcher }) => {\n                dispatcher.resetGuestCart(dispatch);\n                dispatcher.createGuestEmptyCart(dispatch);\n            }\n        );\n        WishlistDispatcher.then(\n            ({ default: dispatcher }) => dispatcher.resetWishlist(dispatch)\n        );\n\n        dispatch(clearComparedProducts());\n        dispatch(updateCustomerDetails({}));\n    }\n\n    /**\n     * Forgot password action\n     * @param {{email: String}} [options={}]\n     * @returns {Promise<{status: String}>} Reset password token\n     * @memberof MyAccountDispatcher\n     */\n    forgotPassword(options = {}, dispatch) {\n        const mutation = MyAccountQuery.getForgotPasswordMutation(options);\n        return fetchMutation(mutation).then(\n            /** @namespace Store/MyAccount/Dispatcher/forgotPasswordFetchMutationThen */\n            () => dispatch(updateCustomerPasswordForgotStatus()),\n            /** @namespace Store/MyAccount/Dispatcher/forgotPasswordFetchMutationError */\n            (error) => dispatch(showNotification('error', getErrorMessage(error)))\n        );\n    }\n\n    /**\n     * Reset password action\n     * @param {{token: String, password: String, password_confirmation: String}} [options={}]\n     * @returns {Promise<{status: String}>} Reset password token\n     * @memberof MyAccountDispatcher\n     */\n    resetPassword(options = {}, dispatch) {\n        const mutation = MyAccountQuery.getResetPasswordMutation(options);\n\n        return fetchMutation(mutation).then(\n            /** @namespace Store/MyAccount/Dispatcher/resetPasswordFetchMutationThen */\n            ({ s_resetPassword: { status } }) => dispatch(updateCustomerPasswordResetStatus(status)),\n            /** @namespace Store/MyAccount/Dispatcher/resetPasswordFetchMutationError */\n            (errors) => dispatch(updateCustomerPasswordResetStatus('error', getErrorMessage(errors)))\n        );\n    }\n\n    /**\n     * Create account action\n     * @param {{customer: Object, password: String}} [options={}]\n     * @memberof MyAccountDispatcher\n     */\n    createAccount(options = {}, dispatch) {\n        const { customer: { email }, password } = options;\n        const mutation = MyAccountQuery.getCreateAccountMutation(options);\n        dispatch(updateIsLoading(true));\n\n        return fetchMutation(mutation).then(\n            /** @namespace Store/MyAccount/Dispatcher/createAccountFetchMutationThen */\n            (data) => {\n                const { createCustomer: { customer } } = data;\n                const { confirmation_required } = customer;\n\n                if (confirmation_required) {\n                    dispatch(updateIsLoading(false));\n                    return 2;\n                }\n\n                return this.signIn({ email, password }, dispatch);\n            },\n\n            /** @namespace Store/MyAccount/Dispatcher/createAccountFetchMutationError */\n            (error) => {\n                dispatch(updateIsLoading(false));\n                dispatch(showNotification('error', getErrorMessage(error)));\n                Promise.reject();\n\n                return false;\n            }\n        );\n    }\n\n    /**\n     * Confirm account action\n     * @param {{key: String, email: String, password: String}} [options={}]\n     * @memberof MyAccountDispatcher\n     */\n    confirmAccount(options = {}, dispatch) {\n        const mutation = MyAccountQuery.getConfirmAccountMutation(options);\n\n        return fetchMutation(mutation).then(\n            /** @namespace Store/MyAccount/Dispatcher/confirmAccountFetchMutationThen */\n            () => dispatch(showNotification('success', __('Your account is confirmed!'))),\n            /** @namespace Store/MyAccount/Dispatcher/confirmAccountFetchMutationError */\n            (error) => dispatch(\n                showNotification(\n                    'error',\n                    getErrorMessage(error, __('Something went wrong! Please, try again!'))\n                )\n            )\n        );\n    }\n\n    /**\n     * Sign in action\n     * @param {{email: String, password: String}} [options={}]\n     * @memberof MyAccountDispatcher\n     */\n    async signIn(options = {}, dispatch) {\n        const mutation = MyAccountQuery.getSignInMutation(options);\n\n        const result = await fetchMutation(mutation);\n        const { generateCustomerToken: { token } } = result;\n\n        setAuthorizationToken(token);\n\n        const cartDispatcher = (await CartDispatcher).default;\n        const guestCartToken = getGuestQuoteId();\n        // if customer is authorized, `createEmptyCart` mutation returns customer cart token\n        const customerCartToken = await cartDispatcher.createGuestEmptyCart(dispatch);\n\n        if (guestCartToken && guestCartToken !== customerCartToken) {\n            // merge guest cart id and customer cart id using magento capabilities\n            await cartDispatcher.mergeCarts(guestCartToken, customerCartToken, dispatch);\n        }\n\n        setGuestQuoteId(customerCartToken);\n        cartDispatcher.updateInitialCartData(dispatch);\n\n        WishlistDispatcher.then(\n            ({ default: dispatcher }) => dispatcher.updateInitialWishlistData(dispatch)\n        );\n\n        ProductCompareDispatcher.then(\n            ({ default: dispatcher }) => dispatcher.assignCompareList(dispatch)\n        );\n\n        await this.requestCustomerData(dispatch);\n\n        dispatch(updateCustomerSignInStatus(true));\n        dispatch(updateIsLoading(false));\n        dispatch(hideActiveOverlay());\n        dispatch(showNotification('success', __('You are successfully logged in!')));\n\n        return true;\n    }\n\n    handleForceRedirectToLoginPage() {\n        const { location: { pathname = '' } = {} } = history;\n        const doRedirect = this.forceLogoutRedirectPages.reduce((result, urlPart) => {\n            if (pathname.includes(urlPart)) {\n                return true;\n            }\n\n            return result;\n        }, false);\n\n        if (doRedirect) {\n            history.push({ pathname: '/account/login' });\n        }\n    }\n\n    handleCustomerDataOnInit(dispatch) {\n        if (isSignedIn()) {\n            return;\n        }\n\n        BrowserDatabase.deleteItem(ORDERS);\n        BrowserDatabase.deleteItem(CUSTOMER);\n        CartDispatcher.then(\n            ({ default: dispatcher }) => dispatcher.resetGuestCart(dispatch)\n        );\n    }\n}\n\nexport default new MyAccountDispatcher();\n"]},"metadata":{},"sourceType":"module"}