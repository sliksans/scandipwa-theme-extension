{"ast":null,"code":"/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport { updateCustomerSignInStatus } from \"/home/arturs/scandiweb/scandipwa/src/store/MyAccount/MyAccount.action\";\nimport BrowserDatabase from \"/home/arturs/scandiweb/scandipwa/src/util/BrowserDatabase\";\nimport { deleteGuestQuoteId } from \"/home/arturs/scandiweb/scandipwa/src/util/Cart\";\nimport getStore from \"/home/arturs/scandiweb/scandipwa/src/util/Store\";\nexport const AUTH_TOKEN = 'auth_token';\nexport const ONE_HOUR = 3600;\n/** #namespace Util/Auth/setAuthorizationToken */\n\nexport const setAuthorizationToken = Mosaic.middleware(function (token) {\n  const state = getStore().getState();\n  const {\n    cookie_lifetime = ONE_HOUR\n  } = state.ConfigReducer;\n  BrowserDatabase.setItem(token, AUTH_TOKEN, cookie_lifetime);\n}, \"Util/Auth/setAuthorizationToken\");\n/** #namespace Util/Auth/deleteAuthorizationToken */\n\nexport const deleteAuthorizationToken = Mosaic.middleware(function () {\n  return BrowserDatabase.deleteItem(AUTH_TOKEN);\n}, \"Util/Auth/deleteAuthorizationToken\");\n/** #namespace Util/Auth/getAuthorizationToken */\n\nexport const getAuthorizationToken = Mosaic.middleware(function () {\n  return BrowserDatabase.getItem(AUTH_TOKEN);\n}, \"Util/Auth/getAuthorizationToken\");\n/** #namespace Util/Auth/refreshAuthorizationToken */\n\nexport const refreshAuthorizationToken = Mosaic.middleware(function () {\n  return setAuthorizationToken(getAuthorizationToken());\n}, \"Util/Auth/refreshAuthorizationToken\");\n/** #namespace Util/Auth/isInitiallySignedIn */\n\nexport const isInitiallySignedIn = Mosaic.middleware(function () {\n  return !!getAuthorizationToken();\n}, \"Util/Auth/isInitiallySignedIn\");\n/** #namespace Util/Auth/isSignedIn */\n\nexport const isSignedIn = Mosaic.middleware(function () {\n  const _isSignedIn = !!getAuthorizationToken();\n\n  const store = getStore();\n  const {\n    MyAccountReducer: {\n      isSignedIn: isCustomerSignedIn\n    } = {}\n  } = store.getState();\n  const {\n    dispatch\n  } = store;\n\n  if (!_isSignedIn && isCustomerSignedIn) {\n    // since logout is async and slow, remove cart id\n    // and set customer sign in status here on auth token expiration\n    deleteGuestQuoteId();\n    dispatch(updateCustomerSignInStatus(false));\n    const MyAccountDispatcher = import(\"../../store/MyAccount/MyAccount.dispatcher\");\n    MyAccountDispatcher.then(function ({\n      default: dispatcher\n    }) {\n      return dispatcher.logout(true, dispatch);\n    });\n  } else if (_isSignedIn && isCustomerSignedIn) {\n    refreshAuthorizationToken();\n  }\n\n  return _isSignedIn;\n}, \"Util/Auth/isSignedIn\");","map":{"version":3,"sources":["/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/util/Auth/Token.js"],"names":["updateCustomerSignInStatus","BrowserDatabase","deleteGuestQuoteId","getStore","AUTH_TOKEN","ONE_HOUR","setAuthorizationToken","token","state","getState","cookie_lifetime","ConfigReducer","setItem","deleteAuthorizationToken","deleteItem","getAuthorizationToken","getItem","refreshAuthorizationToken","isInitiallySignedIn","isSignedIn","_isSignedIn","store","MyAccountReducer","isCustomerSignedIn","dispatch","MyAccountDispatcher","then","default","dispatcher","logout"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,0BAAT;AACA,OAAOC,eAAP;AACA,SAASC,kBAAT;AACA,OAAOC,QAAP;AAEA,OAAO,MAAMC,UAAU,GAAG,YAAnB;AAEP,OAAO,MAAMC,QAAQ,GAAG,IAAjB;AAEP;;AACA,OAAO,MAAMC,qBAAqB,qBAAG,UAACC,KAAD,EAAW;AAC5C,QAAMC,KAAK,GAAGL,QAAQ,GAAGM,QAAX,EAAd;AACA,QAAM;AACFC,IAAAA,eAAe,GAAGL;AADhB,MAEFG,KAAK,CAACG,aAFV;AAIAV,EAAAA,eAAe,CAACW,OAAhB,CAAwBL,KAAxB,EAA+BH,UAA/B,EAA2CM,eAA3C;AACH,CAPiC,oCAA3B;AASP;;AACA,OAAO,MAAMG,wBAAwB,qBAAG;AAAA,SAAMZ,eAAe,CAACa,UAAhB,CAA2BV,UAA3B,CAAN;AAAA,CAAH,uCAA9B;AAEP;;AACA,OAAO,MAAMW,qBAAqB,qBAAG;AAAA,SAAMd,eAAe,CAACe,OAAhB,CAAwBZ,UAAxB,CAAN;AAAA,CAAH,oCAA3B;AAEP;;AACA,OAAO,MAAMa,yBAAyB,qBAAG;AAAA,SAAMX,qBAAqB,CAACS,qBAAqB,EAAtB,CAA3B;AAAA,CAAH,wCAA/B;AAEP;;AACA,OAAO,MAAMG,mBAAmB,qBAAG;AAAA,SAAM,CAAC,CAACH,qBAAqB,EAA7B;AAAA,CAAH,kCAAzB;AAEP;;AACA,OAAO,MAAMI,UAAU,qBAAG,YAAM;AAC5B,QAAMC,WAAW,GAAG,CAAC,CAACL,qBAAqB,EAA3C;;AACA,QAAMM,KAAK,GAAGlB,QAAQ,EAAtB;AACA,QAAM;AACFmB,IAAAA,gBAAgB,EAAE;AACdH,MAAAA,UAAU,EAAEI;AADE,QAEd;AAHF,MAIFF,KAAK,CAACZ,QAAN,EAJJ;AAKA,QAAM;AAAEe,IAAAA;AAAF,MAAeH,KAArB;;AAEA,MAAI,CAACD,WAAD,IAAgBG,kBAApB,EAAwC;AACpC;AACA;AACArB,IAAAA,kBAAkB;AAClBsB,IAAAA,QAAQ,CAACxB,0BAA0B,CAAC,KAAD,CAA3B,CAAR;AAEA,UAAMyB,mBAAmB,GAAG,oDAA5B;AACAA,IAAAA,mBAAmB,CAACC,IAApB,CACI,UAAC;AAAEC,MAAAA,OAAO,EAAEC;AAAX,KAAD;AAAA,aAA6BA,UAAU,CAACC,MAAX,CAAkB,IAAlB,EAAwBL,QAAxB,CAA7B;AAAA,KADJ;AAGH,GAVD,MAUO,IAAIJ,WAAW,IAAIG,kBAAnB,EAAuC;AAC1CN,IAAAA,yBAAyB;AAC5B;;AAED,SAAOG,WAAP;AACH,CAzBsB,yBAAhB","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport { updateCustomerSignInStatus } from 'Store/MyAccount/MyAccount.action';\nimport BrowserDatabase from 'Util/BrowserDatabase';\nimport { deleteGuestQuoteId } from 'Util/Cart';\nimport getStore from 'Util/Store';\n\nexport const AUTH_TOKEN = 'auth_token';\n\nexport const ONE_HOUR = 3600;\n\n/** @namespace Util/Auth/setAuthorizationToken */\nexport const setAuthorizationToken = (token) => {\n    const state = getStore().getState();\n    const {\n        cookie_lifetime = ONE_HOUR\n    } = state.ConfigReducer;\n\n    BrowserDatabase.setItem(token, AUTH_TOKEN, cookie_lifetime);\n};\n\n/** @namespace Util/Auth/deleteAuthorizationToken */\nexport const deleteAuthorizationToken = () => BrowserDatabase.deleteItem(AUTH_TOKEN);\n\n/** @namespace Util/Auth/getAuthorizationToken */\nexport const getAuthorizationToken = () => BrowserDatabase.getItem(AUTH_TOKEN);\n\n/** @namespace Util/Auth/refreshAuthorizationToken */\nexport const refreshAuthorizationToken = () => setAuthorizationToken(getAuthorizationToken());\n\n/** @namespace Util/Auth/isInitiallySignedIn */\nexport const isInitiallySignedIn = () => !!getAuthorizationToken();\n\n/** @namespace Util/Auth/isSignedIn */\nexport const isSignedIn = () => {\n    const _isSignedIn = !!getAuthorizationToken();\n    const store = getStore();\n    const {\n        MyAccountReducer: {\n            isSignedIn: isCustomerSignedIn\n        } = {}\n    } = store.getState();\n    const { dispatch } = store;\n\n    if (!_isSignedIn && isCustomerSignedIn) {\n        // since logout is async and slow, remove cart id\n        // and set customer sign in status here on auth token expiration\n        deleteGuestQuoteId();\n        dispatch(updateCustomerSignInStatus(false));\n\n        const MyAccountDispatcher = import('../../store/MyAccount/MyAccount.dispatcher');\n        MyAccountDispatcher.then(\n            ({ default: dispatcher }) => dispatcher.logout(true, dispatch)\n        );\n    } else if (_isSignedIn && isCustomerSignedIn) {\n        refreshAuthorizationToken();\n    }\n\n    return _isSignedIn;\n};\n"]},"metadata":{},"sourceType":"module"}