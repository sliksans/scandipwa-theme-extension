{"ast":null,"code":"/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport WishlistQuery from \"/home/arturs/scandiweb/extension/src/query/Wishlist.query\";\nimport { showNotification } from \"/home/arturs/scandiweb/extension/src/store/Notification/Notification.action\";\nimport { clearWishlist, removeItemFromWishlist, updateAllProductsInWishlist, updateIsLoading, updateItemOptions } from \"/home/arturs/scandiweb/extension/src/store/Wishlist/Wishlist.action\";\nimport { isSignedIn } from \"/home/arturs/scandiweb/extension/src/util/Auth\";\nimport { fetchMutation, fetchQuery, getErrorMessage } from \"/home/arturs/scandiweb/extension/src/util/Request\";\nimport getStore from \"/home/arturs/scandiweb/extension/src/util/Store\";\nimport { getPriceRange } from \"/home/arturs/scandiweb/extension/src/util/Wishlist\";\nexport const CartDispatcher = import(\n/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n\"/home/arturs/scandiweb/extension/src/store/Cart/Cart.dispatcher\");\n/**\n * Get wishlist setting.\n * #namespace /Store/Wishlist/Dispatcher/isWishlistEnabled\n */\n\nexport const isWishlistEnabled = Mosaic.middleware(function () {\n  const state = getStore().getState();\n  const {\n    wishlist_general_active = false\n  } = state.ConfigReducer;\n  return wishlist_general_active;\n}, \"/Store/Wishlist/Dispatcher/isWishlistEnabled\");\n/**\n * Product Wishlist Dispatcher\n * @class WishlistDispatcher\n * #namespace Store/Wishlist/Dispatcher\n */\n\nexport const WishlistDispatcher = Mosaic.middleware(class WishlistDispatcher_ extends Mosaic.Extensible() {\n  updateInitialWishlistData(dispatch) {\n    if (isSignedIn() && isWishlistEnabled()) {\n      this._syncWishlistWithBE(dispatch);\n    } else {\n      dispatch(updateAllProductsInWishlist({}));\n    }\n  }\n\n  _syncWishlistWithBE(dispatch) {\n    // Need to get current wishlist from BE, update wishlist\n    return fetchQuery(WishlistQuery.getWishlistQuery()).then(\n    /** #namespace Store/Wishlist/Dispatcher/_syncWishlistWithBEFetchQueryThen */\n    Mosaic.middleware(function (data) {\n      if (data && data.wishlist) {\n        const {\n          wishlist\n        } = data;\n        const productsToAdd = wishlist.items.reduce(function (prev, wishlistItem) {\n          const {\n            id,\n            sku,\n            product,\n            description,\n            price,\n            price_without_tax,\n            buy_request,\n            options,\n            qty: quantity\n          } = wishlistItem;\n          const priceRange = getPriceRange(product, price, price_without_tax);\n          return { ...prev,\n            [id]: { ...product,\n              ...priceRange,\n              quantity,\n              wishlist: {\n                id,\n                sku,\n                quantity,\n                description,\n                buy_request,\n                options\n              }\n            }\n          };\n        }, {});\n        dispatch(updateAllProductsInWishlist(productsToAdd));\n      } else {\n        dispatch(updateIsLoading(false));\n      }\n    }, \"Store/Wishlist/Dispatcher/_syncWishlistWithBEFetchQueryThen\"),\n    /** #namespace Store/Wishlist/Dispatcher/_syncWishlistWithBEFetchQueryError */\n    Mosaic.middleware(function () {\n      dispatch(updateIsLoading(false));\n    }, \"Store/Wishlist/Dispatcher/_syncWishlistWithBEFetchQueryError\"));\n  }\n\n  addItemToWishlist(dispatch, wishlistItem) {\n    var _this = this;\n\n    if (!isSignedIn()) {\n      return Promise.reject();\n    }\n\n    dispatch(updateIsLoading(true));\n    dispatch(showNotification('success', __('Product added to wish-list!')));\n    return fetchMutation(WishlistQuery.getSaveWishlistItemMutation(wishlistItem)).then(\n    /** #namespace Store/Wishlist/Dispatcher/addItemToWishlistFetchMutationThen */\n    Mosaic.middleware(function () {\n      return _this._syncWishlistWithBE(dispatch);\n    }, \"Store/Wishlist/Dispatcher/addItemToWishlistFetchMutationThen\"),\n    /** #namespace Store/Wishlist/Dispatcher/addItemToWishlistFetchMutationError */\n    Mosaic.middleware(function () {\n      dispatch(showNotification('error', __('Error updating wish list!')));\n    }, \"Store/Wishlist/Dispatcher/addItemToWishlistFetchMutationError\"));\n  }\n\n  updateWishlistItem(dispatch, options) {\n    if (!isSignedIn()) {\n      return Promise.reject();\n    }\n\n    return fetchMutation(WishlistQuery.getSaveWishlistItemMutation(options)).then(\n    /** #namespace Store/Wishlist/Dispatcher/updateWishlistItemFetchMutationThen */\n    Mosaic.middleware(function () {\n      return dispatch(updateItemOptions(options));\n    }, \"Store/Wishlist/Dispatcher/updateWishlistItemFetchMutationThen\"));\n  }\n\n  clearWishlist(dispatch) {\n    if (!isSignedIn()) {\n      return Promise.reject();\n    }\n\n    return fetchMutation(WishlistQuery.getClearWishlist()).then(\n    /** #namespace Store/Wishlist/Dispatcher/clearWishlistFetchMutationThen */\n    Mosaic.middleware(function () {\n      return dispatch(clearWishlist());\n    }, \"Store/Wishlist/Dispatcher/clearWishlistFetchMutationThen\")).catch(\n    /** #namespace Store/Wishlist/Dispatcher/clearWishlistFetchMutationThenCatch */\n    Mosaic.middleware(function () {\n      return dispatch(showNotification('error', __('Error clearing wish list!')));\n    }, \"Store/Wishlist/Dispatcher/clearWishlistFetchMutationThenCatch\"));\n  }\n\n  moveWishlistToCart(dispatch, sharingCode) {\n    var _this2 = this;\n\n    if (!isSignedIn()) {\n      return Promise.reject();\n    }\n\n    return fetchMutation(WishlistQuery.getMoveWishlistToCart(sharingCode)).then(\n    /** #namespace Store/Wishlist/Dispatcher/moveWishlistToCartFetchMutationThen */\n    Mosaic.middleware(function () {\n      _this2._syncWishlistWithBE(dispatch);\n\n      CartDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.updateInitialCartData(dispatch);\n      });\n    }, \"Store/Wishlist/Dispatcher/moveWishlistToCartFetchMutationThen\"));\n  }\n\n  removeItemFromWishlist(dispatch, {\n    item_id,\n    noMessages\n  }) {\n    if (!item_id || !isSignedIn()) {\n      return Promise.reject();\n    }\n\n    dispatch(updateIsLoading(true));\n\n    if (noMessages) {\n      return fetchMutation(WishlistQuery.getRemoveProductFromWishlistMutation(item_id)).then(\n      /** #namespace Store/Wishlist/Dispatcher/removeItemFromWishlistNoMessagesFetchMutationThen */\n      Mosaic.middleware(function () {\n        return dispatch(removeItemFromWishlist(item_id));\n      }, \"Store/Wishlist/Dispatcher/removeItemFromWishlistNoMessagesFetchMutationThen\"));\n    }\n\n    dispatch(showNotification('info', __('Product has been removed from your Wish List!')));\n    return fetchMutation(WishlistQuery.getRemoveProductFromWishlistMutation(item_id)).then(\n    /** #namespace Store/Wishlist/Dispatcher/removeItemFromWishlistFetchMutationThen */\n    Mosaic.middleware(function () {\n      return dispatch(removeItemFromWishlist(item_id));\n    }, \"Store/Wishlist/Dispatcher/removeItemFromWishlistFetchMutationThen\"),\n    /** #namespace Store/Wishlist/Dispatcher/removeItemFromWishlistFetchMutationError */\n    Mosaic.middleware(function () {\n      dispatch(showNotification('error', __('Error updating wish list!')));\n    }, \"Store/Wishlist/Dispatcher/removeItemFromWishlistFetchMutationError\"));\n  } // TODO: Need to make it in one request\n\n\n  removeItemsFromWishlist(dispatch, itemIdMap) {\n    if (!itemIdMap.length || !isSignedIn()) {\n      return Promise.reject();\n    }\n\n    return itemIdMap.map(function (id) {\n      return fetchMutation(WishlistQuery.getRemoveProductFromWishlistMutation(id)).then(\n      /** #namespace Store/Wishlist/Dispatcher/removeItemsFromWishlistNoMessagesFetchMutationThen */\n      Mosaic.middleware(function () {\n        dispatch(removeItemFromWishlist(id));\n        dispatch(showNotification('info', __('Product has been removed from your Wish List!')));\n      }, \"Store/Wishlist/Dispatcher/removeItemsFromWishlistNoMessagesFetchMutationThen\"),\n      /** #namespace Store/Wishlist/Dispatcher/removeItemsFromWishlistFetchMutationError */\n      Mosaic.middleware(function (error) {\n        dispatch(showNotification('error', getErrorMessage(error, __('Error updating wishlist!'))));\n      }, \"Store/Wishlist/Dispatcher/removeItemsFromWishlistFetchMutationError\"));\n    });\n  }\n\n  resetWishlist(dispatch) {\n    dispatch(clearWishlist());\n  }\n\n}, \"Store/Wishlist/Dispatcher\");\nexport default new WishlistDispatcher();","map":{"version":3,"sources":["/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/store/Wishlist/Wishlist.dispatcher.js"],"names":["WishlistQuery","showNotification","clearWishlist","removeItemFromWishlist","updateAllProductsInWishlist","updateIsLoading","updateItemOptions","isSignedIn","fetchMutation","fetchQuery","getErrorMessage","getStore","getPriceRange","CartDispatcher","isWishlistEnabled","state","getState","wishlist_general_active","ConfigReducer","updateInitialWishlistData","dispatch","_syncWishlistWithBE","getWishlistQuery","then","data","wishlist","productsToAdd","items","reduce","prev","wishlistItem","id","sku","product","description","price","price_without_tax","buy_request","options","qty","quantity","priceRange","addItemToWishlist","Promise","reject","__","getSaveWishlistItemMutation","updateWishlistItem","getClearWishlist","catch","moveWishlistToCart","sharingCode","getMoveWishlistToCart","default","dispatcher","updateInitialCartData","item_id","noMessages","getRemoveProductFromWishlistMutation","removeItemsFromWishlist","itemIdMap","length","map","error","resetWishlist","WishlistDispatcher"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport WishlistQuery from 'Query/Wishlist.query';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport {\n    clearWishlist,\n    removeItemFromWishlist,\n    updateAllProductsInWishlist,\n    updateIsLoading,\n    updateItemOptions\n} from 'Store/Wishlist/Wishlist.action';\nimport { isSignedIn } from 'Util/Auth';\nimport { fetchMutation, fetchQuery, getErrorMessage } from 'Util/Request';\nimport getStore from 'Util/Store';\nimport { getPriceRange } from 'Util/Wishlist';\n\nexport const CartDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Cart/Cart.dispatcher'\n);\n\n/**\n * Get wishlist setting.\n * @namespace /Store/Wishlist/Dispatcher/isWishlistEnabled\n */\nexport const isWishlistEnabled = () => {\n    const state = getStore().getState();\n    const {\n        wishlist_general_active = false\n    } = state.ConfigReducer;\n\n    return wishlist_general_active;\n};\n\n/**\n * Product Wishlist Dispatcher\n * @class WishlistDispatcher\n * @namespace Store/Wishlist/Dispatcher\n */\nexport class WishlistDispatcher {\n    updateInitialWishlistData(dispatch) {\n        if (isSignedIn() && isWishlistEnabled()) {\n            this._syncWishlistWithBE(dispatch);\n        } else {\n            dispatch(updateAllProductsInWishlist({}));\n        }\n    }\n\n    _syncWishlistWithBE(dispatch) {\n        // Need to get current wishlist from BE, update wishlist\n        return fetchQuery(WishlistQuery.getWishlistQuery()).then(\n            /** @namespace Store/Wishlist/Dispatcher/_syncWishlistWithBEFetchQueryThen */\n            (data) => {\n                if (data && data.wishlist) {\n                    const { wishlist } = data;\n                    const productsToAdd = wishlist.items.reduce((prev, wishlistItem) => {\n                        const {\n                            id,\n                            sku,\n                            product,\n                            description,\n                            price,\n                            price_without_tax,\n                            buy_request,\n                            options,\n                            qty: quantity\n                        } = wishlistItem;\n\n                        const priceRange = getPriceRange(product, price, price_without_tax);\n\n                        return {\n                            ...prev,\n                            [id]: {\n                                ...product,\n                                ...priceRange,\n                                quantity,\n                                wishlist: {\n                                    id,\n                                    sku,\n                                    quantity,\n                                    description,\n                                    buy_request,\n                                    options\n                                }\n                            }\n                        };\n                    }, {});\n\n                    dispatch(updateAllProductsInWishlist(productsToAdd));\n                } else {\n                    dispatch(updateIsLoading(false));\n                }\n            },\n            /** @namespace Store/Wishlist/Dispatcher/_syncWishlistWithBEFetchQueryError */\n            () => {\n                dispatch(updateIsLoading(false));\n            }\n        );\n    }\n\n    addItemToWishlist(dispatch, wishlistItem) {\n        if (!isSignedIn()) {\n            return Promise.reject();\n        }\n\n        dispatch(updateIsLoading(true));\n        dispatch(showNotification('success', __('Product added to wish-list!')));\n\n        return fetchMutation(WishlistQuery.getSaveWishlistItemMutation(wishlistItem)).then(\n            /** @namespace Store/Wishlist/Dispatcher/addItemToWishlistFetchMutationThen */\n            () => this._syncWishlistWithBE(dispatch),\n            /** @namespace Store/Wishlist/Dispatcher/addItemToWishlistFetchMutationError */\n            () => {\n                dispatch(showNotification('error', __('Error updating wish list!')));\n            }\n        );\n    }\n\n    updateWishlistItem(dispatch, options) {\n        if (!isSignedIn()) {\n            return Promise.reject();\n        }\n\n        return fetchMutation(WishlistQuery.getSaveWishlistItemMutation(options)).then(\n            /** @namespace Store/Wishlist/Dispatcher/updateWishlistItemFetchMutationThen */\n            () => dispatch(updateItemOptions(options))\n        );\n    }\n\n    clearWishlist(dispatch) {\n        if (!isSignedIn()) {\n            return Promise.reject();\n        }\n\n        return fetchMutation(WishlistQuery.getClearWishlist())\n            .then(\n                /** @namespace Store/Wishlist/Dispatcher/clearWishlistFetchMutationThen */\n                () => dispatch(clearWishlist())\n            )\n            .catch(\n                /** @namespace Store/Wishlist/Dispatcher/clearWishlistFetchMutationThenCatch */\n                () => dispatch(showNotification('error', __('Error clearing wish list!')))\n            );\n    }\n\n    moveWishlistToCart(dispatch, sharingCode) {\n        if (!isSignedIn()) {\n            return Promise.reject();\n        }\n\n        return fetchMutation(WishlistQuery.getMoveWishlistToCart(sharingCode))\n            .then(\n                /** @namespace Store/Wishlist/Dispatcher/moveWishlistToCartFetchMutationThen */\n                () => {\n                    this._syncWishlistWithBE(dispatch);\n                    CartDispatcher.then(\n                        ({ default: dispatcher }) => dispatcher.updateInitialCartData(dispatch)\n                    );\n                }\n            );\n    }\n\n    removeItemFromWishlist(dispatch, { item_id, noMessages }) {\n        if (!item_id || !isSignedIn()) {\n            return Promise.reject();\n        }\n        dispatch(updateIsLoading(true));\n\n        if (noMessages) {\n            return fetchMutation(WishlistQuery.getRemoveProductFromWishlistMutation(item_id)).then(\n                /** @namespace Store/Wishlist/Dispatcher/removeItemFromWishlistNoMessagesFetchMutationThen */\n                () => dispatch(removeItemFromWishlist(item_id))\n            );\n        }\n\n        dispatch(showNotification('info', __('Product has been removed from your Wish List!')));\n\n        return fetchMutation(WishlistQuery.getRemoveProductFromWishlistMutation(item_id)).then(\n            /** @namespace Store/Wishlist/Dispatcher/removeItemFromWishlistFetchMutationThen */\n            () => dispatch(removeItemFromWishlist(item_id)),\n            /** @namespace Store/Wishlist/Dispatcher/removeItemFromWishlistFetchMutationError */\n            () => {\n                dispatch(showNotification('error', __('Error updating wish list!')));\n            }\n        );\n    }\n\n    // TODO: Need to make it in one request\n    removeItemsFromWishlist(dispatch, itemIdMap) {\n        if (!itemIdMap.length || !isSignedIn()) {\n            return Promise.reject();\n        }\n\n        return itemIdMap.map((id) => (\n            fetchMutation(WishlistQuery.getRemoveProductFromWishlistMutation(id)).then(\n                /** @namespace Store/Wishlist/Dispatcher/removeItemsFromWishlistNoMessagesFetchMutationThen */\n                () => {\n                    dispatch(removeItemFromWishlist(id));\n                    dispatch(showNotification('info', __('Product has been removed from your Wish List!')));\n                },\n                /** @namespace Store/Wishlist/Dispatcher/removeItemsFromWishlistFetchMutationError */\n                (error) => {\n                    dispatch(showNotification('error', getErrorMessage(error, __('Error updating wishlist!'))));\n                }\n            )\n        ));\n    }\n\n    resetWishlist(dispatch) {\n        dispatch(clearWishlist());\n    }\n}\n\nexport default new WishlistDispatcher();\n"]},"metadata":{},"sourceType":"module"}