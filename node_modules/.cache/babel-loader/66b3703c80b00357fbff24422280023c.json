{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/route/CategoryPage/CategoryPage.container.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { CATEGORY } from \"/home/arturs/scandiweb/scandipwa/src/component/Header/Header.config\";\nimport { MENU_TAB } from \"/home/arturs/scandiweb/scandipwa/src/component/NavigationTabs/NavigationTabs.config\";\nimport { GRID_LAYOUT, LAYOUT_KEY, LIST_LAYOUT } from \"/home/arturs/scandiweb/scandipwa/src/route/CategoryPage/CategoryPage.config\";\nimport { updateCurrentCategory } from \"/home/arturs/scandiweb/scandipwa/src/store/Category/Category.action\";\nimport { changeNavigationState } from \"/home/arturs/scandiweb/scandipwa/src/store/Navigation/Navigation.action\";\nimport { BOTTOM_NAVIGATION_TYPE, TOP_NAVIGATION_TYPE } from \"/home/arturs/scandiweb/scandipwa/src/store/Navigation/Navigation.reducer\";\nimport { setBigOfflineNotice } from \"/home/arturs/scandiweb/scandipwa/src/store/Offline/Offline.action\";\nimport { toggleOverlayByKey } from \"/home/arturs/scandiweb/scandipwa/src/store/Overlay/Overlay.action\";\nimport { updateInfoLoadStatus } from \"/home/arturs/scandiweb/scandipwa/src/store/ProductListInfo/ProductListInfo.action\";\nimport { CategoryTreeType } from \"/home/arturs/scandiweb/scandipwa/src/type/Category\";\nimport { HistoryType, LocationType, MatchType } from \"/home/arturs/scandiweb/scandipwa/src/type/Common\";\nimport BrowserDatabase from \"/home/arturs/scandiweb/scandipwa/src/util/BrowserDatabase\";\nimport { debounce } from \"/home/arturs/scandiweb/scandipwa/src/util/Request\";\nimport { appendWithStoreCode, getQueryParam, setQueryParams } from \"/home/arturs/scandiweb/scandipwa/src/util/Url\";\nimport CategoryPage from \"./CategoryPage.component\";\nimport { LOADING_TIME } from \"./CategoryPage.config\";\nexport const ProductListInfoDispatcher = import(\n/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n\"/home/arturs/scandiweb/scandipwa/src/store/ProductListInfo/ProductListInfo.dispatcher\");\nexport const BreadcrumbsDispatcher = import(\n/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n\"/home/arturs/scandiweb/scandipwa/src/store/Breadcrumbs/Breadcrumbs.dispatcher\");\nexport const CategoryDispatcher = import(\n/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n\"/home/arturs/scandiweb/scandipwa/src/store/Category/Category.dispatcher\");\nexport const MetaDispatcher = import(\n/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n\"/home/arturs/scandiweb/scandipwa/src/store/Meta/Meta.dispatcher\");\nexport const NoMatchDispatcher = import(\n/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n\"/home/arturs/scandiweb/scandipwa/src/store/NoMatch/NoMatch.dispatcher\");\n/** #namespace Route/CategoryPage/Container/mapStateToProps */\n\nexport const mapStateToProps = Mosaic.middleware(function (state) {\n  return {\n    category: state.CategoryReducer.category,\n    isOffline: state.OfflineReducer.isOffline,\n    filters: state.ProductListInfoReducer.filters,\n    sortFields: state.ProductListInfoReducer.sortFields,\n    currentArgs: state.ProductListReducer.currentArgs,\n    selectedInfoFilter: state.ProductListInfoReducer.selectedFilter,\n    isInfoLoading: state.ProductListInfoReducer.isLoading,\n    totalPages: state.ProductListReducer.totalPages,\n    device: state.ConfigReducer.device,\n    plpType: state.ConfigReducer.plp_list_mode,\n    isMobile: state.ConfigReducer.device.isMobile\n  };\n}, \"Route/CategoryPage/Container/mapStateToProps\");\n/** #namespace Route/CategoryPage/Container/mapDispatchToProps */\n\nexport const mapDispatchToProps = Mosaic.middleware(function (dispatch) {\n  return {\n    toggleOverlayByKey: function (key) {\n      return dispatch(toggleOverlayByKey(key));\n    },\n    changeHeaderState: function (state) {\n      return dispatch(changeNavigationState(TOP_NAVIGATION_TYPE, state));\n    },\n    changeNavigationState: function (state) {\n      return dispatch(changeNavigationState(BOTTOM_NAVIGATION_TYPE, state));\n    },\n    requestCategory: function (options) {\n      return CategoryDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.handleData(dispatch, options);\n      });\n    },\n    updateBreadcrumbs: function (breadcrumbs) {\n      return Object.keys(breadcrumbs).length ? BreadcrumbsDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.updateWithCategory(breadcrumbs, dispatch);\n      }) : BreadcrumbsDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.update([], dispatch);\n      });\n    },\n    requestProductListInfo: function (options) {\n      return ProductListInfoDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.handleData(dispatch, options);\n      });\n    },\n    updateLoadStatus: function (isLoading) {\n      return dispatch(updateInfoLoadStatus(isLoading));\n    },\n    updateNoMatch: function (options) {\n      return NoMatchDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.updateNoMatch(dispatch, options);\n      });\n    },\n    setBigOfflineNotice: function (isBig) {\n      return dispatch(setBigOfflineNotice(isBig));\n    },\n    updateMetaFromCategory: function (category) {\n      return MetaDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.updateWithCategory(category, dispatch);\n      });\n    },\n    clearCategory: function () {\n      return dispatch(updateCurrentCategory({}));\n    }\n  };\n}, \"Route/CategoryPage/Container/mapDispatchToProps\");\n/** #namespace Route/CategoryPage/Container */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const CategoryPageContainer = Mosaic.middleware((_temp = _class = class CategoryPageContainer_ extends Mosaic.Extensible(PureComponent) {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n    this.state = {\n      currentCategoryIds: -1,\n      breadcrumbsWereUpdated: false,\n      selectedLayoutType: null\n    };\n    this.config = {\n      sortKey: 'name',\n      sortDirection: 'ASC'\n    };\n    this.containerFunctions = {\n      onSortChange: this.onSortChange.bind(this),\n      onGridButtonClick: this.onGridButtonClick.bind(this),\n      onListButtonClick: this.onListButtonClick.bind(this)\n    };\n\n    this.setOfflineNoticeSize = function () {\n      const {\n        setBigOfflineNotice,\n        isInfoLoading\n      } = _this.props;\n\n      if (isInfoLoading) {\n        setBigOfflineNotice(true);\n      } else {\n        setBigOfflineNotice(false);\n      }\n    };\n\n    this.containerProps = function () {\n      return {\n        filter: _this.getFilter(),\n        isCurrentCategoryLoaded: _this.isCurrentCategoryLoaded(),\n        isMatchingListFilter: _this.getIsMatchingListFilter(),\n        isMatchingInfoFilter: _this.getIsMatchingInfoFilter(),\n        selectedSort: _this.getSelectedSortFromUrl(),\n        selectedFilters: _this.getSelectedFiltersFromUrl(),\n        isContentFiltered: _this.isContentFiltered(),\n        defaultPlpType: _this.getDefaultPlpType(),\n        plpTypes: _this.getPlpTypes()\n      };\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const {\n      currentCategoryIds,\n      defaultPlpType,\n      plpTypes\n    } = state;\n    const {\n      category: {\n        id\n      },\n      plpType,\n      isMobile\n    } = props;\n    const update = {};\n    /**\n     * Determine default plpType and the other ones\n     */\n\n    if (!defaultPlpType || !plpTypes) {\n      if (plpType.match('-')) {\n        const plpTypes = plpType.split('-');\n        const defaultType = isMobile ? GRID_LAYOUT : plpTypes[0];\n        Object.assign(update, {\n          defaultPlpType: defaultType,\n          plpTypes\n        });\n      } else {\n        const defaultType = isMobile ? GRID_LAYOUT : plpType;\n        Object.assign(update, {\n          defaultPlpType: defaultType,\n          plpTypes: [plpType]\n        });\n      }\n    }\n    /**\n     * If the category we expect to load is loaded - reset it\n     */\n\n\n    if (currentCategoryIds === id) {\n      Object.assign(update, {\n        currentCategoryIds: -1\n      });\n    }\n\n    if (!Object.keys(update).length) {\n      return null;\n    }\n\n    return update;\n  }\n\n  componentDidMount() {\n    const {\n      categoryIds,\n      category: {\n        id\n      }\n    } = this.props;\n    window.scrollTo(0, 0);\n    /**\n     * Ensure transition PLP => homepage => PLP always having proper meta\n     */\n\n    this.updateMeta();\n    /**\n     * Always make sure the navigation show / hide mode (on scroll)\n     * is activated when entering the category page.\n     * */\n\n    this.updateNavigationState();\n    /**\n     * Always update the history, ensure the history contains category\n     */\n\n    this.updateHistory();\n    /**\n     * Make sure to update header state, if the category visited\n     * was already loaded.\n     */\n\n    if (categoryIds === id) {\n      this.updateBreadcrumbs();\n      this.updateHeaderState();\n    } else {\n      /**\n       * Still update header and breadcrumbs, but ignore\n       * the category data, as it is outdated\n       */\n      this.updateHeaderState(true);\n      this.updateBreadcrumbs(true);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      isOffline,\n      categoryIds,\n      category: {\n        id\n      },\n      currentArgs: {\n        filter\n      } = {}\n    } = this.props;\n    const {\n      breadcrumbsWereUpdated\n    } = this.state;\n    const {\n      categoryIds: prevCategoryIds,\n      category: {\n        id: prevId\n      },\n      currentArgs: {\n        filter: prevFilter\n      } = {}\n    } = prevProps; // TODO: category scrolls up when coming from PDP\n\n    if (isOffline) {\n      debounce(this.setOfflineNoticeSize, LOADING_TIME)();\n    }\n    /**\n     * If the URL rewrite has been changed, make sure the category ID\n     * will persist in the history state.\n     */\n\n\n    if (categoryIds !== prevCategoryIds) {\n      this.updateHistory();\n    }\n    /**\n     * If the currently loaded category ID does not match the ID of\n     * category from URL rewrite, request category.\n     */\n\n\n    if (categoryIds !== id) {\n      this.requestCategory();\n    }\n    /**\n     * If category ID was changed => it is loaded => we need to\n     * update category specific information, i.e. breadcrumbs.\n     *\n     * Or if the breadcrumbs were not yet updated after category request,\n     * and the category ID expected to load was loaded, update data.\n     */\n\n\n    const categoryChange = id !== prevId || !breadcrumbsWereUpdated && id === categoryIds;\n\n    if (categoryChange) {\n      this.checkIsActive();\n      this.updateMeta();\n      this.updateBreadcrumbs();\n      this.updateHeaderState();\n    }\n    /*\n    ** if category wasn't changed we still need to update meta for correct robots meta tag [#928](https://github.com/scandipwa/base-theme/issues/928)\n    */\n\n\n    if (!categoryChange && filter && prevFilter && Object.keys(filter.customFilters).length !== Object.keys(prevFilter.customFilters).length) {\n      this.updateMeta();\n    }\n  }\n\n  onGridButtonClick() {\n    BrowserDatabase.setItem(GRID_LAYOUT, LAYOUT_KEY);\n    this.setState({\n      selectedLayoutType: GRID_LAYOUT\n    });\n  }\n\n  onListButtonClick() {\n    BrowserDatabase.setItem(LIST_LAYOUT, LAYOUT_KEY);\n    this.setState({\n      selectedLayoutType: LIST_LAYOUT\n    });\n  }\n\n  onSortChange(sortDirection, sortKey) {\n    const {\n      location,\n      history\n    } = this.props;\n    setQueryParams({\n      sortKey,\n      sortDirection,\n      page: ''\n    }, location, history);\n    this.updateMeta();\n  }\n\n  getIsMatchingListFilter() {\n    const {\n      location,\n      currentArgs: {\n        currentPage,\n        sort,\n        filter\n      } = {}\n    } = this.props;\n    /**\n     * ? implementation bellow blinks, implementation with categoryIds check only does not show loading when selecting filters.\n     * TODO: resolve it to be a combination of these two behaviour\n     */\n    // Data used to request category matches current data\n\n    return JSON.stringify(filter) === JSON.stringify(this.getFilter()) && JSON.stringify(sort) === JSON.stringify(this.getSelectedSortFromUrl()) && currentPage === +(getQueryParam('page', location) || 1);\n  }\n\n  getIsMatchingInfoFilter() {\n    const {\n      categoryIds,\n      selectedInfoFilter: {\n        categoryIds: selectedCategoryIds\n      }\n    } = this.props; // Requested category is equal to current category\n\n    return categoryIds === selectedCategoryIds;\n  }\n\n  isCurrentCategoryLoaded() {\n    const {\n      categoryIds,\n      category: {\n        id\n      },\n      isSearchPage\n    } = this.props;\n    return isSearchPage || categoryIds === id;\n  }\n\n  isContentFiltered() {\n    const {\n      customFilters,\n      priceMin,\n      priceMax\n    } = this.urlStringToObject();\n    return !!(customFilters || priceMin || priceMax);\n  }\n\n  urlStringToObject() {\n    const {\n      location: {\n        search\n      }\n    } = this.props;\n    return search.substr(1).split('&').reduce(function (acc, part) {\n      const [key, value] = part.split('=');\n      return { ...acc,\n        [key]: value\n      };\n    }, {});\n  }\n\n  getSelectedFiltersFromUrl() {\n    const {\n      location\n    } = this.props;\n    const selectedFiltersString = (getQueryParam('customFilters', location) || '').split(';');\n    return selectedFiltersString.reduce(function (acc, filter) {\n      if (!filter) {\n        return acc;\n      }\n\n      const [key, value] = filter.split(':');\n      return { ...acc,\n        [key]: value.split(',')\n      };\n    }, {});\n  }\n\n  getSelectedSortFromUrl() {\n    const {\n      location,\n      category: {\n        default_sort_by\n      }\n    } = this.props;\n    const {\n      sortKey: globalDefaultSortKey,\n      sortDirection: defaultSortDirection\n    } = this.config;\n    /**\n     * Default SORT DIRECTION is taken from (sequentially):\n     * - URL param \"sortDirection\"\n     * - CategoryPage class property \"config\"\n     * */\n\n    const sortDirection = getQueryParam('sortDirection', location) || defaultSortDirection;\n    /**\n     * Default SORT KEY is taken from (sequentially):\n     * - URL param \"sortKey\"\n     * - Category default sort key (Magento 2 configuration)\n     * - CategoryPage class property \"config\"\n     * */\n\n    const defaultSortKey = default_sort_by || globalDefaultSortKey;\n    const sortKey = getQueryParam('sortKey', location) || defaultSortKey;\n    return {\n      sortDirection,\n      sortKey\n    };\n  }\n\n  getSelectedPriceRangeFromUrl() {\n    const {\n      location\n    } = this.props;\n    const min = +getQueryParam('priceMin', location);\n    const max = +getQueryParam('priceMax', location);\n    return {\n      min,\n      max\n    };\n  }\n\n  getDefaultPlpType() {\n    const {\n      defaultPlpType\n    } = this.state;\n    return defaultPlpType;\n  }\n\n  getPlpTypes() {\n    const {\n      plpTypes\n    } = this.state;\n    return plpTypes;\n  }\n\n  getFilter() {\n    const {\n      categoryIds\n    } = this.props;\n    const customFilters = this.getSelectedFiltersFromUrl();\n    const priceRange = this.getSelectedPriceRangeFromUrl();\n\n    if (categoryIds === -1) {\n      return {\n        priceRange,\n        customFilters\n      };\n    }\n\n    return {\n      priceRange,\n      customFilters,\n      categoryIds\n    };\n  }\n\n  updateHistory() {\n    const {\n      history,\n      location,\n      categoryIds\n    } = this.props;\n    const {\n      search,\n      pathname,\n      state = {}\n    } = location;\n    const {\n      category\n    } = state;\n    /**\n     * Prevent pushing non-existent category into the state\n     */\n\n    if (categoryIds === -1) {\n      return;\n    }\n\n    if (category !== categoryIds) {\n      history.replace({\n        pathname,\n        search,\n        state: { ...state,\n          category: categoryIds\n        }\n      });\n    }\n  }\n\n  checkIsActive() {\n    const {\n      category: {\n        is_active\n      },\n      updateNoMatch\n    } = this.props;\n\n    if (!is_active) {\n      updateNoMatch({\n        noMatch: true\n      });\n    }\n  }\n\n  updateMeta() {\n    const {\n      updateMetaFromCategory,\n      category,\n      history\n    } = this.props;\n    const meta_robots = history.location.search ? '' : 'follow, index';\n    updateMetaFromCategory({ ...category,\n      meta_robots\n    });\n  }\n\n  updateBreadcrumbs(isUnmatchedCategory = false) {\n    const {\n      updateBreadcrumbs,\n      category\n    } = this.props;\n    const breadcrumbs = isUnmatchedCategory ? {} : category;\n    updateBreadcrumbs(breadcrumbs);\n    this.setState({\n      breadcrumbsWereUpdated: true\n    });\n  }\n\n  updateNavigationState() {\n    const {\n      changeNavigationState\n    } = this.props;\n    changeNavigationState({\n      name: MENU_TAB,\n      isVisibleOnScroll: true\n    });\n  }\n\n  updateHeaderState(isUnmatchedCategory = false) {\n    var _history$location;\n\n    const {\n      changeHeaderState,\n      category: {\n        name\n      },\n      history\n    } = this.props;\n    const {\n      category\n    } = (history === null || history === void 0 ? void 0 : (_history$location = history.location) === null || _history$location === void 0 ? void 0 : _history$location.state) || {};\n    const onBackClick = category ? function () {\n      return history.goBack();\n    } : function () {\n      return history.push(appendWithStoreCode('/menu'));\n    };\n    /**\n     * Ensure the name is not set if the category IDs do not\n     * match. Otherwise, the previous value is displayed.\n     */\n\n    const title = isUnmatchedCategory ? undefined : name;\n    changeHeaderState({\n      name: CATEGORY,\n      title,\n      onBackClick\n    });\n  }\n\n  requestCategory() {\n    const {\n      categoryIds,\n      isSearchPage,\n      requestCategory\n    } = this.props;\n    const {\n      currentCategoryIds\n    } = this.state;\n    /**\n     * Prevent non-existent category from being requested\n     */\n\n    if (categoryIds === -1) {\n      return;\n    }\n    /**\n     * Do not request a category again! We are still waiting for\n     * a requested category to load!\n     */\n\n\n    if (categoryIds === currentCategoryIds) {\n      return;\n    }\n    /**\n     * Update current category to track if it is loaded or not - useful,\n     * to prevent category from requesting itself multiple times.\n     */\n\n\n    this.setState({\n      currentCategoryIds: categoryIds,\n      breadcrumbsWereUpdated: false\n    });\n    requestCategory({\n      isSearchPage,\n      categoryIds\n    });\n  }\n\n  render() {\n    const {\n      pageSize\n    } = this.config;\n    const {\n      defaultPlpType,\n      selectedLayoutType,\n      activeLayoutType\n    } = this.state;\n    return /*#__PURE__*/_checkBEM(React, CategoryPage, Object.assign({}, this.props, {\n      pageSize: pageSize,\n      defaultPlpType: defaultPlpType,\n      selectedLayoutType: selectedLayoutType,\n      activeLayoutType: activeLayoutType\n    }, this.containerFunctions, this.containerProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}, _class.propTypes = {\n  history: HistoryType.isRequired,\n  category: CategoryTreeType.isRequired,\n  location: LocationType.isRequired,\n  match: MatchType.isRequired,\n  requestCategory: PropTypes.func.isRequired,\n  changeHeaderState: PropTypes.func.isRequired,\n  changeNavigationState: PropTypes.func.isRequired,\n  requestProductListInfo: PropTypes.func.isRequired,\n  setBigOfflineNotice: PropTypes.func.isRequired,\n  updateMetaFromCategory: PropTypes.func.isRequired,\n  updateBreadcrumbs: PropTypes.func.isRequired,\n  updateLoadStatus: PropTypes.func.isRequired,\n  updateNoMatch: PropTypes.func.isRequired,\n  filters: PropTypes.objectOf(PropTypes.shape).isRequired,\n  sortFields: PropTypes.shape({\n    options: PropTypes.array\n  }).isRequired,\n  currentArgs: PropTypes.shape({\n    filter: PropTypes.shape({\n      categoryIds: PropTypes.number\n    })\n  }),\n  selectedInfoFilter: PropTypes.shape({\n    categoryIds: PropTypes.number\n  }),\n  isInfoLoading: PropTypes.bool.isRequired,\n  isOffline: PropTypes.bool.isRequired,\n  categoryIds: PropTypes.number,\n  isSearchPage: PropTypes.bool,\n  isMobile: PropTypes.bool.isRequired,\n  plpType: PropTypes.string\n}, _class.defaultProps = {\n  categoryIds: -1,\n  isSearchPage: false,\n  currentArgs: {},\n  selectedInfoFilter: {},\n  plpType: ''\n}, _temp), \"Route/CategoryPage/Container\");\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryPageContainer);","map":{"version":3,"sources":["/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/route/CategoryPage/CategoryPage.container.js"],"names":["PropTypes","PureComponent","connect","CATEGORY","MENU_TAB","GRID_LAYOUT","LAYOUT_KEY","LIST_LAYOUT","updateCurrentCategory","changeNavigationState","BOTTOM_NAVIGATION_TYPE","TOP_NAVIGATION_TYPE","setBigOfflineNotice","toggleOverlayByKey","updateInfoLoadStatus","CategoryTreeType","HistoryType","LocationType","MatchType","BrowserDatabase","debounce","appendWithStoreCode","getQueryParam","setQueryParams","CategoryPage","LOADING_TIME","ProductListInfoDispatcher","BreadcrumbsDispatcher","CategoryDispatcher","MetaDispatcher","NoMatchDispatcher","mapStateToProps","state","category","CategoryReducer","isOffline","OfflineReducer","filters","ProductListInfoReducer","sortFields","currentArgs","ProductListReducer","selectedInfoFilter","selectedFilter","isInfoLoading","isLoading","totalPages","device","ConfigReducer","plpType","plp_list_mode","isMobile","mapDispatchToProps","dispatch","key","changeHeaderState","requestCategory","options","then","default","dispatcher","handleData","updateBreadcrumbs","breadcrumbs","Object","keys","length","updateWithCategory","update","requestProductListInfo","updateLoadStatus","updateNoMatch","isBig","updateMetaFromCategory","clearCategory","currentCategoryIds","breadcrumbsWereUpdated","selectedLayoutType","config","sortKey","sortDirection","containerFunctions","onSortChange","bind","onGridButtonClick","onListButtonClick","setOfflineNoticeSize","props","containerProps","filter","getFilter","isCurrentCategoryLoaded","isMatchingListFilter","getIsMatchingListFilter","isMatchingInfoFilter","getIsMatchingInfoFilter","selectedSort","getSelectedSortFromUrl","selectedFilters","getSelectedFiltersFromUrl","isContentFiltered","defaultPlpType","getDefaultPlpType","plpTypes","getPlpTypes","getDerivedStateFromProps","id","match","split","defaultType","assign","componentDidMount","categoryIds","window","scrollTo","updateMeta","updateNavigationState","updateHistory","updateHeaderState","componentDidUpdate","prevProps","prevCategoryIds","prevId","prevFilter","categoryChange","checkIsActive","customFilters","setItem","setState","location","history","page","currentPage","sort","JSON","stringify","selectedCategoryIds","isSearchPage","priceMin","priceMax","urlStringToObject","search","substr","reduce","acc","part","value","selectedFiltersString","default_sort_by","globalDefaultSortKey","defaultSortDirection","defaultSortKey","getSelectedPriceRangeFromUrl","min","max","priceRange","pathname","replace","is_active","noMatch","meta_robots","isUnmatchedCategory","name","isVisibleOnScroll","onBackClick","goBack","push","title","undefined","render","pageSize","activeLayoutType","propTypes","isRequired","func","objectOf","shape","array","number","bool","string","defaultProps","CategoryPageContainer"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport { CATEGORY } from 'Component/Header/Header.config';\nimport { MENU_TAB } from 'Component/NavigationTabs/NavigationTabs.config';\nimport { GRID_LAYOUT, LAYOUT_KEY, LIST_LAYOUT } from 'Route/CategoryPage/CategoryPage.config';\nimport { updateCurrentCategory } from 'Store/Category/Category.action';\nimport { changeNavigationState } from 'Store/Navigation/Navigation.action';\nimport { BOTTOM_NAVIGATION_TYPE, TOP_NAVIGATION_TYPE } from 'Store/Navigation/Navigation.reducer';\nimport { setBigOfflineNotice } from 'Store/Offline/Offline.action';\nimport { toggleOverlayByKey } from 'Store/Overlay/Overlay.action';\nimport {\n    updateInfoLoadStatus\n} from 'Store/ProductListInfo/ProductListInfo.action';\nimport { CategoryTreeType } from 'Type/Category';\nimport { HistoryType, LocationType, MatchType } from 'Type/Common';\nimport BrowserDatabase from 'Util/BrowserDatabase';\nimport { debounce } from 'Util/Request';\nimport {\n    appendWithStoreCode,\n    getQueryParam,\n    setQueryParams\n} from 'Util/Url';\n\nimport CategoryPage from './CategoryPage.component';\nimport { LOADING_TIME } from './CategoryPage.config';\n\nexport const ProductListInfoDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/ProductListInfo/ProductListInfo.dispatcher'\n);\n\nexport const BreadcrumbsDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Breadcrumbs/Breadcrumbs.dispatcher'\n);\n\nexport const CategoryDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Category/Category.dispatcher'\n);\n\nexport const MetaDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Meta/Meta.dispatcher'\n);\n\nexport const NoMatchDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/NoMatch/NoMatch.dispatcher'\n);\n\n/** @namespace Route/CategoryPage/Container/mapStateToProps */\nexport const mapStateToProps = (state) => ({\n    category: state.CategoryReducer.category,\n    isOffline: state.OfflineReducer.isOffline,\n    filters: state.ProductListInfoReducer.filters,\n    sortFields: state.ProductListInfoReducer.sortFields,\n    currentArgs: state.ProductListReducer.currentArgs,\n    selectedInfoFilter: state.ProductListInfoReducer.selectedFilter,\n    isInfoLoading: state.ProductListInfoReducer.isLoading,\n    totalPages: state.ProductListReducer.totalPages,\n    device: state.ConfigReducer.device,\n    plpType: state.ConfigReducer.plp_list_mode,\n    isMobile: state.ConfigReducer.device.isMobile\n});\n\n/** @namespace Route/CategoryPage/Container/mapDispatchToProps */\nexport const mapDispatchToProps = (dispatch) => ({\n    toggleOverlayByKey: (key) => dispatch(toggleOverlayByKey(key)),\n    changeHeaderState: (state) => dispatch(changeNavigationState(TOP_NAVIGATION_TYPE, state)),\n    changeNavigationState: (state) => dispatch(changeNavigationState(BOTTOM_NAVIGATION_TYPE, state)),\n    requestCategory: (options) => CategoryDispatcher.then(\n        ({ default: dispatcher }) => dispatcher.handleData(dispatch, options)\n    ),\n    updateBreadcrumbs: (breadcrumbs) => ((Object.keys(breadcrumbs).length)\n        ? BreadcrumbsDispatcher.then(\n            ({ default: dispatcher }) => dispatcher.updateWithCategory(breadcrumbs, dispatch)\n        )\n        : BreadcrumbsDispatcher.then(\n            ({ default: dispatcher }) => dispatcher.update([], dispatch)\n        )\n    ),\n    requestProductListInfo: (options) => ProductListInfoDispatcher.then(\n        ({ default: dispatcher }) => dispatcher.handleData(dispatch, options)\n    ),\n    updateLoadStatus: (isLoading) => dispatch(updateInfoLoadStatus(isLoading)),\n    updateNoMatch: (options) => NoMatchDispatcher.then(\n        ({ default: dispatcher }) => dispatcher.updateNoMatch(dispatch, options)\n    ),\n    setBigOfflineNotice: (isBig) => dispatch(setBigOfflineNotice(isBig)),\n    updateMetaFromCategory: (category) => MetaDispatcher.then(\n        ({ default: dispatcher }) => dispatcher.updateWithCategory(category, dispatch)\n    ),\n    clearCategory: () => dispatch(updateCurrentCategory({}))\n});\n\n/** @namespace Route/CategoryPage/Container */\nexport class CategoryPageContainer extends PureComponent {\n    static propTypes = {\n        history: HistoryType.isRequired,\n        category: CategoryTreeType.isRequired,\n        location: LocationType.isRequired,\n        match: MatchType.isRequired,\n        requestCategory: PropTypes.func.isRequired,\n        changeHeaderState: PropTypes.func.isRequired,\n        changeNavigationState: PropTypes.func.isRequired,\n        requestProductListInfo: PropTypes.func.isRequired,\n        setBigOfflineNotice: PropTypes.func.isRequired,\n        updateMetaFromCategory: PropTypes.func.isRequired,\n        updateBreadcrumbs: PropTypes.func.isRequired,\n        updateLoadStatus: PropTypes.func.isRequired,\n        updateNoMatch: PropTypes.func.isRequired,\n        filters: PropTypes.objectOf(PropTypes.shape).isRequired,\n        sortFields: PropTypes.shape({\n            options: PropTypes.array\n        }).isRequired,\n        currentArgs: PropTypes.shape({\n            filter: PropTypes.shape({\n                categoryIds: PropTypes.number\n            })\n        }),\n        selectedInfoFilter: PropTypes.shape({\n            categoryIds: PropTypes.number\n        }),\n        isInfoLoading: PropTypes.bool.isRequired,\n        isOffline: PropTypes.bool.isRequired,\n        categoryIds: PropTypes.number,\n        isSearchPage: PropTypes.bool,\n        isMobile: PropTypes.bool.isRequired,\n        plpType: PropTypes.string\n    };\n\n    static defaultProps = {\n        categoryIds: -1,\n        isSearchPage: false,\n        currentArgs: {},\n        selectedInfoFilter: {},\n        plpType: ''\n    };\n\n    state = {\n        currentCategoryIds: -1,\n        breadcrumbsWereUpdated: false,\n        selectedLayoutType: null\n    };\n\n    config = {\n        sortKey: 'name',\n        sortDirection: 'ASC'\n    };\n\n    containerFunctions = {\n        onSortChange: this.onSortChange.bind(this),\n        onGridButtonClick: this.onGridButtonClick.bind(this),\n        onListButtonClick: this.onListButtonClick.bind(this)\n    };\n\n    static getDerivedStateFromProps(props, state) {\n        const {\n            currentCategoryIds,\n            defaultPlpType,\n            plpTypes\n        } = state;\n\n        const {\n            category: { id },\n            plpType,\n            isMobile\n        } = props;\n\n        const update = {};\n\n        /**\n         * Determine default plpType and the other ones\n         */\n        if (!defaultPlpType || !plpTypes) {\n            if (plpType.match('-')) {\n                const plpTypes = plpType.split('-');\n                const defaultType = isMobile ? GRID_LAYOUT : plpTypes[0];\n\n                Object.assign(update, { defaultPlpType: defaultType, plpTypes });\n            } else {\n                const defaultType = isMobile ? GRID_LAYOUT : plpType;\n                Object.assign(update, { defaultPlpType: defaultType, plpTypes: [plpType] });\n            }\n        }\n\n        /**\n         * If the category we expect to load is loaded - reset it\n         */\n        if (currentCategoryIds === id) {\n            Object.assign(update, { currentCategoryIds: -1 });\n        }\n\n        if (!Object.keys(update).length) {\n            return null;\n        }\n\n        return update;\n    }\n\n    componentDidMount() {\n        const {\n            categoryIds,\n            category: {\n                id\n            }\n        } = this.props;\n\n        window.scrollTo(0, 0);\n\n        /**\n         * Ensure transition PLP => homepage => PLP always having proper meta\n         */\n        this.updateMeta();\n\n        /**\n         * Always make sure the navigation show / hide mode (on scroll)\n         * is activated when entering the category page.\n         * */\n        this.updateNavigationState();\n\n        /**\n         * Always update the history, ensure the history contains category\n         */\n        this.updateHistory();\n\n        /**\n         * Make sure to update header state, if the category visited\n         * was already loaded.\n         */\n        if (categoryIds === id) {\n            this.updateBreadcrumbs();\n            this.updateHeaderState();\n        } else {\n            /**\n             * Still update header and breadcrumbs, but ignore\n             * the category data, as it is outdated\n             */\n            this.updateHeaderState(true);\n            this.updateBreadcrumbs(true);\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        const {\n            isOffline,\n            categoryIds,\n            category: {\n                id\n            },\n            currentArgs: {\n                filter\n            } = {}\n        } = this.props;\n\n        const {\n            breadcrumbsWereUpdated\n        } = this.state;\n\n        const {\n            categoryIds: prevCategoryIds,\n            category: {\n                id: prevId\n            },\n            currentArgs: {\n                filter: prevFilter\n            } = {}\n        } = prevProps;\n\n        // TODO: category scrolls up when coming from PDP\n\n        if (isOffline) {\n            debounce(this.setOfflineNoticeSize, LOADING_TIME)();\n        }\n\n        /**\n         * If the URL rewrite has been changed, make sure the category ID\n         * will persist in the history state.\n         */\n        if (categoryIds !== prevCategoryIds) {\n            this.updateHistory();\n        }\n\n        /**\n         * If the currently loaded category ID does not match the ID of\n         * category from URL rewrite, request category.\n         */\n        if (categoryIds !== id) {\n            this.requestCategory();\n        }\n\n        /**\n         * If category ID was changed => it is loaded => we need to\n         * update category specific information, i.e. breadcrumbs.\n         *\n         * Or if the breadcrumbs were not yet updated after category request,\n         * and the category ID expected to load was loaded, update data.\n         */\n        const categoryChange = id !== prevId || (!breadcrumbsWereUpdated && id === categoryIds);\n\n        if (categoryChange) {\n            this.checkIsActive();\n            this.updateMeta();\n            this.updateBreadcrumbs();\n            this.updateHeaderState();\n        }\n\n        /*\n        ** if category wasn't changed we still need to update meta for correct robots meta tag [#928](https://github.com/scandipwa/base-theme/issues/928)\n        */\n        if (!categoryChange\n            && filter\n            && prevFilter\n            && Object.keys(filter.customFilters).length !== Object.keys(prevFilter.customFilters).length\n        ) {\n            this.updateMeta();\n        }\n    }\n\n    onGridButtonClick() {\n        BrowserDatabase.setItem(GRID_LAYOUT, LAYOUT_KEY);\n        this.setState({ selectedLayoutType: GRID_LAYOUT });\n    }\n\n    onListButtonClick() {\n        BrowserDatabase.setItem(LIST_LAYOUT, LAYOUT_KEY);\n        this.setState({ selectedLayoutType: LIST_LAYOUT });\n    }\n\n    onSortChange(sortDirection, sortKey) {\n        const { location, history } = this.props;\n\n        setQueryParams({ sortKey, sortDirection, page: '' }, location, history);\n        this.updateMeta();\n    }\n\n    setOfflineNoticeSize = () => {\n        const { setBigOfflineNotice, isInfoLoading } = this.props;\n\n        if (isInfoLoading) {\n            setBigOfflineNotice(true);\n        } else {\n            setBigOfflineNotice(false);\n        }\n    };\n\n    getIsMatchingListFilter() {\n        const {\n            location,\n            currentArgs: {\n                currentPage,\n                sort,\n                filter\n            } = {}\n        } = this.props;\n\n        /**\n         * ? implementation bellow blinks, implementation with categoryIds check only does not show loading when selecting filters.\n         * TODO: resolve it to be a combination of these two behaviour\n         */\n\n        // Data used to request category matches current data\n        return JSON.stringify(filter) === JSON.stringify(this.getFilter())\n            && JSON.stringify(sort) === JSON.stringify(this.getSelectedSortFromUrl())\n            && currentPage === +(getQueryParam('page', location) || 1);\n    }\n\n    getIsMatchingInfoFilter() {\n        const {\n            categoryIds,\n            selectedInfoFilter: {\n                categoryIds: selectedCategoryIds\n            }\n        } = this.props;\n\n        // Requested category is equal to current category\n        return categoryIds === selectedCategoryIds;\n    }\n\n    isCurrentCategoryLoaded() {\n        const {\n            categoryIds,\n            category: {\n                id\n            },\n            isSearchPage\n        } = this.props;\n\n        return isSearchPage || categoryIds === id;\n    }\n\n    containerProps = () => ({\n        filter: this.getFilter(),\n        isCurrentCategoryLoaded: this.isCurrentCategoryLoaded(),\n        isMatchingListFilter: this.getIsMatchingListFilter(),\n        isMatchingInfoFilter: this.getIsMatchingInfoFilter(),\n        selectedSort: this.getSelectedSortFromUrl(),\n        selectedFilters: this.getSelectedFiltersFromUrl(),\n        isContentFiltered: this.isContentFiltered(),\n        defaultPlpType: this.getDefaultPlpType(),\n        plpTypes: this.getPlpTypes()\n    });\n\n    isContentFiltered() {\n        const {\n            customFilters,\n            priceMin,\n            priceMax\n        } = this.urlStringToObject();\n\n        return !!(customFilters || priceMin || priceMax);\n    }\n\n    urlStringToObject() {\n        const { location: { search } } = this.props;\n\n        return search.substr(1).split('&').reduce((acc, part) => {\n            const [key, value] = part.split('=');\n            return { ...acc, [key]: value };\n        }, {});\n    }\n\n    getSelectedFiltersFromUrl() {\n        const { location } = this.props;\n        const selectedFiltersString = (getQueryParam('customFilters', location) || '').split(';');\n\n        return selectedFiltersString.reduce((acc, filter) => {\n            if (!filter) {\n                return acc;\n            }\n            const [key, value] = filter.split(':');\n            return { ...acc, [key]: value.split(',') };\n        }, {});\n    }\n\n    getSelectedSortFromUrl() {\n        const {\n            location,\n            category: {\n                default_sort_by\n            }\n        } = this.props;\n\n        const {\n            sortKey: globalDefaultSortKey,\n            sortDirection: defaultSortDirection\n        } = this.config;\n\n        /**\n         * Default SORT DIRECTION is taken from (sequentially):\n         * - URL param \"sortDirection\"\n         * - CategoryPage class property \"config\"\n         * */\n        const sortDirection = getQueryParam('sortDirection', location) || defaultSortDirection;\n\n        /**\n         * Default SORT KEY is taken from (sequentially):\n         * - URL param \"sortKey\"\n         * - Category default sort key (Magento 2 configuration)\n         * - CategoryPage class property \"config\"\n         * */\n        const defaultSortKey = default_sort_by || globalDefaultSortKey;\n        const sortKey = getQueryParam('sortKey', location) || defaultSortKey;\n\n        return {\n            sortDirection,\n            sortKey\n        };\n    }\n\n    getSelectedPriceRangeFromUrl() {\n        const { location } = this.props;\n        const min = +getQueryParam('priceMin', location);\n        const max = +getQueryParam('priceMax', location);\n        return { min, max };\n    }\n\n    getDefaultPlpType() {\n        const { defaultPlpType } = this.state;\n\n        return defaultPlpType;\n    }\n\n    getPlpTypes() {\n        const { plpTypes } = this.state;\n\n        return plpTypes;\n    }\n\n    getFilter() {\n        const { categoryIds } = this.props;\n        const customFilters = this.getSelectedFiltersFromUrl();\n        const priceRange = this.getSelectedPriceRangeFromUrl();\n\n        if (categoryIds === -1) {\n            return {\n                priceRange,\n                customFilters\n            };\n        }\n\n        return {\n            priceRange,\n            customFilters,\n            categoryIds\n        };\n    }\n\n    updateHistory() {\n        const {\n            history,\n            location,\n            categoryIds\n        } = this.props;\n\n        const {\n            search,\n            pathname,\n            state = {}\n        } = location;\n\n        const { category } = state;\n\n        /**\n         * Prevent pushing non-existent category into the state\n         */\n        if (categoryIds === -1) {\n            return;\n        }\n\n        if (category !== categoryIds) {\n            history.replace({\n                pathname,\n                search,\n                state: {\n                    ...state,\n                    category: categoryIds\n                }\n            });\n        }\n    }\n\n    checkIsActive() {\n        const {\n            category: { is_active },\n            updateNoMatch\n        } = this.props;\n\n        if (!is_active) {\n            updateNoMatch({ noMatch: true });\n        }\n    }\n\n    updateMeta() {\n        const { updateMetaFromCategory, category, history } = this.props;\n        const meta_robots = history.location.search\n            ? ''\n            : 'follow, index';\n\n        updateMetaFromCategory({\n            ...category,\n            meta_robots\n        });\n    }\n\n    updateBreadcrumbs(isUnmatchedCategory = false) {\n        const { updateBreadcrumbs, category } = this.props;\n        const breadcrumbs = isUnmatchedCategory ? {} : category;\n        updateBreadcrumbs(breadcrumbs);\n\n        this.setState({ breadcrumbsWereUpdated: true });\n    }\n\n    updateNavigationState() {\n        const { changeNavigationState } = this.props;\n\n        changeNavigationState({\n            name: MENU_TAB,\n            isVisibleOnScroll: true\n        });\n    }\n\n    updateHeaderState(isUnmatchedCategory = false) {\n        const {\n            changeHeaderState,\n            category: {\n                name\n            },\n            history\n        } = this.props;\n\n        const { category } = history?.location?.state || {};\n\n        const onBackClick = category\n            ? () => history.goBack()\n            : () => history.push(appendWithStoreCode('/menu'));\n\n        /**\n         * Ensure the name is not set if the category IDs do not\n         * match. Otherwise, the previous value is displayed.\n         */\n        const title = isUnmatchedCategory ? undefined : name;\n\n        changeHeaderState({\n            name: CATEGORY,\n            title,\n            onBackClick\n        });\n    }\n\n    requestCategory() {\n        const {\n            categoryIds,\n            isSearchPage,\n            requestCategory\n        } = this.props;\n\n        const {\n            currentCategoryIds\n        } = this.state;\n\n        /**\n         * Prevent non-existent category from being requested\n         */\n        if (categoryIds === -1) {\n            return;\n        }\n\n        /**\n         * Do not request a category again! We are still waiting for\n         * a requested category to load!\n         */\n        if (categoryIds === currentCategoryIds) {\n            return;\n        }\n\n        /**\n         * Update current category to track if it is loaded or not - useful,\n         * to prevent category from requesting itself multiple times.\n         */\n        this.setState({\n            currentCategoryIds: categoryIds,\n            breadcrumbsWereUpdated: false\n        });\n\n        requestCategory({\n            isSearchPage,\n            categoryIds\n        });\n    }\n\n    render() {\n        const { pageSize } = this.config;\n        const {\n            defaultPlpType,\n            selectedLayoutType,\n            activeLayoutType\n        } = this.state;\n\n        return (\n            <CategoryPage\n              { ...this.props }\n              pageSize={ pageSize }\n              defaultPlpType={ defaultPlpType }\n              selectedLayoutType={ selectedLayoutType }\n              activeLayoutType={ activeLayoutType }\n              { ...this.containerFunctions }\n              { ...this.containerProps() }\n            />\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryPageContainer);\n"]},"metadata":{},"sourceType":"module"}