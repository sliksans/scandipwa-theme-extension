{"ast":null,"code":"/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport ProductListQuery from \"/home/arturs/scandiweb/extension/src/query/ProductList.query\";\nimport { showNotification } from \"/home/arturs/scandiweb/extension/src/store/Notification/Notification.action\";\nimport { updateRecentlyViewedProducts } from \"/home/arturs/scandiweb/extension/src/store/RecentlyViewedProducts/RecentlyViewedProducts.action\";\nimport { QueryDispatcher } from \"/home/arturs/scandiweb/extension/src/util/Request\";\nimport getStore from \"/home/arturs/scandiweb/extension/src/util/Store\";\n/**\n * RecentlyViewedProducts Dispatcher\n * @class RecentlyViewedProductsDispatcher\n * @extends QueryDispatcher\n * #namespace Store/RecentlyViewedProducts/Dispatcher\n */\n\nexport const RecentlyViewedProductsDispatcher = Mosaic.middleware(class RecentlyViewedProductsDispatcher_ extends Mosaic.Extensible(QueryDispatcher) {\n  __construct() {\n    super.__construct('recentlyViewedProducts');\n  }\n\n  onSuccess({\n    products: {\n      items\n    }\n  }, dispatch) {\n    const state = getStore().getState();\n    const {\n      code: storeCode\n    } = state.ConfigReducer;\n    dispatch(updateRecentlyViewedProducts(items, storeCode));\n  }\n\n  onError(error, dispatch) {\n    dispatch(showNotification('error', __('Error fetching Recently Viewed Products Information!'), error));\n  }\n  /**\n   * Prepare recentlyViewedProducts query\n   * @return {Query} RecentlyViewedProducts query\n   * @memberof recentlyViewedProductsDispatcher\n   * @param recentlyViewedProducts\n   */\n\n\n  prepareRequest(options) {\n    const {\n      recentProducts,\n      store\n    } = options;\n    const recentlyViewedProductsSKUs = recentProducts[store].reduce(function (productSKUs, item) {\n      const {\n        sku\n      } = item;\n      return [...productSKUs, `${sku.replace(/ /g, '%20')}`];\n    }, []);\n    return [ProductListQuery.getQuery({\n      args: {\n        filter: {\n          productsSkuArray: recentlyViewedProductsSKUs\n        }\n      },\n      notRequireInfo: true\n    })];\n  }\n\n}, \"Store/RecentlyViewedProducts/Dispatcher\");\nexport default new RecentlyViewedProductsDispatcher();","map":{"version":3,"sources":["/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/store/RecentlyViewedProducts/RecentlyViewedProducts.dispatcher.js"],"names":["ProductListQuery","showNotification","updateRecentlyViewedProducts","QueryDispatcher","getStore","__construct","onSuccess","products","items","dispatch","state","getState","code","storeCode","ConfigReducer","onError","error","__","prepareRequest","options","recentProducts","store","recentlyViewedProductsSKUs","reduce","productSKUs","item","sku","replace","getQuery","args","filter","productsSkuArray","notRequireInfo","RecentlyViewedProductsDispatcher"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,gBAAP;AACA,SAASC,gBAAT;AACA,SACIC,4BADJ;AAGA,SAASC,eAAT;AACA,OAAOC,QAAP;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,oIAAsDD,eAAtD,EAAsE;AAClEE,EAAAA,WAAW,GAAG;AACV,UAAMA,WAAN,CAAkB,wBAAlB;AACH;;AAEDC,EAAAA,SAAS,CAAC;AAAEC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA;AAAF;AAAZ,GAAD,EAA0BC,QAA1B,EAAoC;AACzC,UAAMC,KAAK,GAAGN,QAAQ,GAAGO,QAAX,EAAd;AACA,UAAM;AACFC,MAAAA,IAAI,EAAEC;AADJ,QAEFH,KAAK,CAACI,aAFV;AAIAL,IAAAA,QAAQ,CAACP,4BAA4B,CAACM,KAAD,EAAQK,SAAR,CAA7B,CAAR;AACH;;AAEDE,EAAAA,OAAO,CAACC,KAAD,EAAQP,QAAR,EAAkB;AACrBA,IAAAA,QAAQ,CAACR,gBAAgB,CAAC,OAAD,EAAUgB,EAAE,CAAC,sDAAD,CAAZ,EAAsED,KAAtE,CAAjB,CAAR;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,cAAc,CAACC,OAAD,EAAU;AACpB,UAAM;AAAEC,MAAAA,cAAF;AAAkBC,MAAAA;AAAlB,QAA4BF,OAAlC;AACA,UAAMG,0BAA0B,GAAGF,cAAc,CAACC,KAAD,CAAd,CAAsBE,MAAtB,CAA6B,UAACC,WAAD,EAAcC,IAAd,EAAuB;AACnF,YAAM;AAAEC,QAAAA;AAAF,UAAUD,IAAhB;AACA,aAAO,CAAC,GAAGD,WAAJ,EAAkB,GAAGE,GAAG,CAACC,OAAJ,CAAY,IAAZ,EAAkB,KAAlB,CAA0B,EAA/C,CAAP;AACH,KAHkC,EAGhC,EAHgC,CAAnC;AAKA,WAAO,CACH3B,gBAAgB,CAAC4B,QAAjB,CAA0B;AACtBC,MAAAA,IAAI,EAAE;AACFC,QAAAA,MAAM,EAAE;AACJC,UAAAA,gBAAgB,EAAET;AADd;AADN,OADgB;AAMtBU,MAAAA,cAAc,EAAE;AANM,KAA1B,CADG,CAAP;AAUH;;AAzCiE,CAAtE;AA4CA,eAAe,IAAIC,gCAAJ,EAAf","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport ProductListQuery from 'Query/ProductList.query';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport {\n    updateRecentlyViewedProducts\n} from 'Store/RecentlyViewedProducts/RecentlyViewedProducts.action';\nimport { QueryDispatcher } from 'Util/Request';\nimport getStore from 'Util/Store';\n\n/**\n * RecentlyViewedProducts Dispatcher\n * @class RecentlyViewedProductsDispatcher\n * @extends QueryDispatcher\n * @namespace Store/RecentlyViewedProducts/Dispatcher\n */\nexport class RecentlyViewedProductsDispatcher extends QueryDispatcher {\n    __construct() {\n        super.__construct('recentlyViewedProducts');\n    }\n\n    onSuccess({ products: { items } }, dispatch) {\n        const state = getStore().getState();\n        const {\n            code: storeCode\n        } = state.ConfigReducer;\n\n        dispatch(updateRecentlyViewedProducts(items, storeCode));\n    }\n\n    onError(error, dispatch) {\n        dispatch(showNotification('error', __('Error fetching Recently Viewed Products Information!'), error));\n    }\n\n    /**\n     * Prepare recentlyViewedProducts query\n     * @return {Query} RecentlyViewedProducts query\n     * @memberof recentlyViewedProductsDispatcher\n     * @param recentlyViewedProducts\n     */\n    prepareRequest(options) {\n        const { recentProducts, store } = options;\n        const recentlyViewedProductsSKUs = recentProducts[store].reduce((productSKUs, item) => {\n            const { sku } = item;\n            return [...productSKUs, `${ sku.replace(/ /g, '%20') }`];\n        }, []);\n\n        return [\n            ProductListQuery.getQuery({\n                args: {\n                    filter: {\n                        productsSkuArray: recentlyViewedProductsSKUs\n                    }\n                },\n                notRequireInfo: true\n            })\n        ];\n    }\n}\n\nexport default new RecentlyViewedProductsDispatcher();\n"]},"metadata":{},"sourceType":"module"}