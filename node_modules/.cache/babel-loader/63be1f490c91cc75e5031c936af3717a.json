{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/component/CheckoutShipping/CheckoutShipping.container.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { STORE_IN_PICK_UP_ATTRIBUTE_CODE, STORE_IN_PICK_UP_METHOD_CODE } from \"/home/arturs/scandiweb/scandipwa/src/component/StoreInPickUp/StoreInPickUp.config\";\nimport { updateShippingFields } from \"/home/arturs/scandiweb/scandipwa/src/store/Checkout/Checkout.action\";\nimport { customerType } from \"/home/arturs/scandiweb/scandipwa/src/type/Account\";\nimport { shippingMethodsType } from \"/home/arturs/scandiweb/scandipwa/src/type/Checkout\";\nimport { getFormFields, trimAddressFields, trimCustomerAddress } from \"/home/arturs/scandiweb/scandipwa/src/util/Address\";\nimport { getCartTotalSubPrice } from \"/home/arturs/scandiweb/scandipwa/src/util/Cart\";\nimport CheckoutShipping from \"./CheckoutShipping.component\";\n/** #namespace Component/CheckoutShipping/Container/mapStateToProps */\n\nexport const mapStateToProps = Mosaic.middleware(function (state) {\n  return {\n    customer: state.MyAccountReducer.customer,\n    addressLinesQty: state.ConfigReducer.address_lines_quantity,\n    totals: state.CartReducer.cartTotals,\n    cartTotalSubPrice: getCartTotalSubPrice(state)\n  };\n}, \"Component/CheckoutShipping/Container/mapStateToProps\");\n/** #namespace Component/CheckoutShipping/Container/mapDispatchToProps */\n\nexport const mapDispatchToProps = Mosaic.middleware(function (dispatch) {\n  return {\n    updateShippingFields: function (fields) {\n      return dispatch(updateShippingFields(fields));\n    }\n  };\n}, \"Component/CheckoutShipping/Container/mapDispatchToProps\");\n/** #namespace Component/CheckoutShipping/Container */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const CheckoutShippingContainer = Mosaic.middleware((_temp = _class = class CheckoutShippingContainer_ extends Mosaic.Extensible(PureComponent) {\n  constructor(...args) {\n    super(...args);\n    this.containerFunctions = {\n      onShippingSuccess: this.onShippingSuccess.bind(this),\n      onShippingError: this.onShippingError.bind(this),\n      onAddressSelect: this.onAddressSelect.bind(this),\n      onShippingMethodSelect: this.onShippingMethodSelect.bind(this),\n      onStoreSelect: this.onStoreSelect.bind(this)\n    };\n  }\n\n  __construct(props) {\n    super.__construct(props);\n\n    const {\n      shippingMethods\n    } = props;\n    const [selectedShippingMethod] = shippingMethods;\n    const {\n      method_code = ''\n    } = selectedShippingMethod || {};\n    this.state = {\n      selectedCustomerAddressId: 0,\n      isSubmitted: false,\n      selectedShippingMethod: method_code && method_code !== STORE_IN_PICK_UP_METHOD_CODE ? selectedShippingMethod : {}\n    };\n  }\n\n  getStoreAddress(shippingAddress) {\n    const {\n      selectedStoreAddress: {\n        region,\n        city,\n        postcode,\n        phone,\n        street,\n        name,\n        pickup_location_code\n      }\n    } = this.state;\n    return { ...shippingAddress,\n      region,\n      city,\n      postcode,\n      telephone: phone,\n      street: [street],\n      firstname: name,\n      lastname: 'Store',\n      extension_attributes: [{\n        attribute_code: STORE_IN_PICK_UP_ATTRIBUTE_CODE,\n        value: pickup_location_code\n      }]\n    };\n  }\n\n  onAddressSelect(id) {\n    this.setState({\n      selectedCustomerAddressId: id\n    });\n  }\n\n  onShippingMethodSelect(method) {\n    this.setState({\n      selectedShippingMethod: method\n    });\n  }\n\n  onShippingError() {\n    // TODO: implement notification if some data in Form can not display error\n    const {\n      isSubmitted\n    } = this.state;\n    this.setState({\n      isSubmitted: !isSubmitted\n    });\n  }\n\n  onStoreSelect(address) {\n    this.setState({\n      selectedStoreAddress: address\n    });\n  }\n\n  onShippingSuccess(fields) {\n    const {\n      saveAddressInformation,\n      updateShippingFields,\n      addressLinesQty\n    } = this.props;\n    const {\n      selectedCustomerAddressId,\n      selectedShippingMethod,\n      selectedStoreAddress\n    } = this.state;\n    const formFields = getFormFields(fields, addressLinesQty);\n    const shippingAddress = selectedCustomerAddressId ? this._getAddressById(selectedCustomerAddressId) : trimAddressFields(formFields);\n    const {\n      carrier_code: shipping_carrier_code,\n      method_code: shipping_method_code\n    } = selectedShippingMethod;\n    const data = {\n      billing_address: shippingAddress,\n      shipping_address: selectedStoreAddress ? this.getStoreAddress(shippingAddress) : shippingAddress,\n      shipping_carrier_code,\n      shipping_method_code\n    };\n    saveAddressInformation(data);\n    updateShippingFields(fields);\n  }\n\n  _getAddressById(addressId) {\n    const {\n      customer: {\n        addresses\n      }\n    } = this.props;\n    const address = addresses.find(function ({\n      id\n    }) {\n      return id === addressId;\n    });\n    return { ...trimCustomerAddress(address),\n      save_in_address_book: false,\n      id: addressId\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_checkBEM(React, CheckoutShipping, Object.assign({}, this.props, this.state, this.containerFunctions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}, _class.propTypes = {\n  saveAddressInformation: PropTypes.func.isRequired,\n  shippingMethods: shippingMethodsType.isRequired,\n  customer: customerType.isRequired,\n  addressLinesQty: PropTypes.number.isRequired,\n  updateShippingFields: PropTypes.func.isRequired\n}, _temp), \"Component/CheckoutShipping/Container\");\nexport default connect(mapStateToProps, mapDispatchToProps)(CheckoutShippingContainer);","map":{"version":3,"sources":["/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/component/CheckoutShipping/CheckoutShipping.container.js"],"names":["PropTypes","PureComponent","connect","STORE_IN_PICK_UP_ATTRIBUTE_CODE","STORE_IN_PICK_UP_METHOD_CODE","updateShippingFields","customerType","shippingMethodsType","getFormFields","trimAddressFields","trimCustomerAddress","getCartTotalSubPrice","CheckoutShipping","mapStateToProps","state","customer","MyAccountReducer","addressLinesQty","ConfigReducer","address_lines_quantity","totals","CartReducer","cartTotals","cartTotalSubPrice","mapDispatchToProps","dispatch","fields","containerFunctions","onShippingSuccess","bind","onShippingError","onAddressSelect","onShippingMethodSelect","onStoreSelect","__construct","props","shippingMethods","selectedShippingMethod","method_code","selectedCustomerAddressId","isSubmitted","getStoreAddress","shippingAddress","selectedStoreAddress","region","city","postcode","phone","street","name","pickup_location_code","telephone","firstname","lastname","extension_attributes","attribute_code","value","id","setState","method","address","saveAddressInformation","formFields","_getAddressById","carrier_code","shipping_carrier_code","shipping_method_code","data","billing_address","shipping_address","addressId","addresses","find","save_in_address_book","render","propTypes","func","isRequired","number","CheckoutShippingContainer"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n    STORE_IN_PICK_UP_ATTRIBUTE_CODE,\n    STORE_IN_PICK_UP_METHOD_CODE\n} from 'Component/StoreInPickUp/StoreInPickUp.config';\nimport { updateShippingFields } from 'Store/Checkout/Checkout.action';\nimport { customerType } from 'Type/Account';\nimport { shippingMethodsType } from 'Type/Checkout';\nimport { getFormFields, trimAddressFields, trimCustomerAddress } from 'Util/Address';\nimport { getCartTotalSubPrice } from 'Util/Cart';\n\nimport CheckoutShipping from './CheckoutShipping.component';\n\n/** @namespace Component/CheckoutShipping/Container/mapStateToProps */\nexport const mapStateToProps = (state) => ({\n    customer: state.MyAccountReducer.customer,\n    addressLinesQty: state.ConfigReducer.address_lines_quantity,\n    totals: state.CartReducer.cartTotals,\n    cartTotalSubPrice: getCartTotalSubPrice(state)\n});\n\n/** @namespace Component/CheckoutShipping/Container/mapDispatchToProps */\nexport const mapDispatchToProps = (dispatch) => ({\n    updateShippingFields: (fields) => dispatch(updateShippingFields(fields))\n});\n\n/** @namespace Component/CheckoutShipping/Container */\nexport class CheckoutShippingContainer extends PureComponent {\n    static propTypes = {\n        saveAddressInformation: PropTypes.func.isRequired,\n        shippingMethods: shippingMethodsType.isRequired,\n        customer: customerType.isRequired,\n        addressLinesQty: PropTypes.number.isRequired,\n        updateShippingFields: PropTypes.func.isRequired\n    };\n\n    containerFunctions = {\n        onShippingSuccess: this.onShippingSuccess.bind(this),\n        onShippingError: this.onShippingError.bind(this),\n        onAddressSelect: this.onAddressSelect.bind(this),\n        onShippingMethodSelect: this.onShippingMethodSelect.bind(this),\n        onStoreSelect: this.onStoreSelect.bind(this)\n    };\n\n    __construct(props) {\n        super.__construct(props);\n\n        const { shippingMethods } = props;\n        const [selectedShippingMethod] = shippingMethods;\n        const { method_code = '' } = selectedShippingMethod || {};\n\n        this.state = {\n            selectedCustomerAddressId: 0,\n            isSubmitted: false,\n            selectedShippingMethod: method_code && method_code !== STORE_IN_PICK_UP_METHOD_CODE\n                ? selectedShippingMethod\n                : {}\n        };\n    }\n\n    getStoreAddress(shippingAddress) {\n        const {\n            selectedStoreAddress: {\n                region,\n                city,\n                postcode,\n                phone,\n                street,\n                name,\n                pickup_location_code\n            }\n        } = this.state;\n\n        return {\n            ...shippingAddress,\n            region,\n            city,\n            postcode,\n            telephone: phone,\n            street: [street],\n            firstname: name,\n            lastname: 'Store',\n            extension_attributes: [\n                {\n                    attribute_code: STORE_IN_PICK_UP_ATTRIBUTE_CODE,\n                    value: pickup_location_code\n                }\n            ]\n        };\n    }\n\n    onAddressSelect(id) {\n        this.setState({ selectedCustomerAddressId: id });\n    }\n\n    onShippingMethodSelect(method) {\n        this.setState({ selectedShippingMethod: method });\n    }\n\n    onShippingError() {\n        // TODO: implement notification if some data in Form can not display error\n        const { isSubmitted } = this.state;\n        this.setState({ isSubmitted: !isSubmitted });\n    }\n\n    onStoreSelect(address) {\n        this.setState({ selectedStoreAddress: address });\n    }\n\n    onShippingSuccess(fields) {\n        const {\n            saveAddressInformation,\n            updateShippingFields,\n            addressLinesQty\n        } = this.props;\n\n        const {\n            selectedCustomerAddressId,\n            selectedShippingMethod,\n            selectedStoreAddress\n        } = this.state;\n\n        const formFields = getFormFields(fields, addressLinesQty);\n\n        const shippingAddress = selectedCustomerAddressId\n            ? this._getAddressById(selectedCustomerAddressId)\n            : trimAddressFields(formFields);\n\n        const {\n            carrier_code: shipping_carrier_code,\n            method_code: shipping_method_code\n        } = selectedShippingMethod;\n\n        const data = {\n            billing_address: shippingAddress,\n            shipping_address: selectedStoreAddress ? this.getStoreAddress(shippingAddress) : shippingAddress,\n            shipping_carrier_code,\n            shipping_method_code\n        };\n\n        saveAddressInformation(data);\n        updateShippingFields(fields);\n    }\n\n    _getAddressById(addressId) {\n        const { customer: { addresses } } = this.props;\n        const address = addresses.find(({ id }) => id === addressId);\n        return {\n            ...trimCustomerAddress(address),\n            save_in_address_book: false,\n            id: addressId\n        };\n    }\n\n    render() {\n        return (\n            <CheckoutShipping\n              { ...this.props }\n              { ...this.state }\n              { ...this.containerFunctions }\n            />\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CheckoutShippingContainer);\n"]},"metadata":{},"sourceType":"module"}