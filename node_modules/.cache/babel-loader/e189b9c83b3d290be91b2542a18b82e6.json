{"ast":null,"code":"import _asyncToGenerator from \"/home/arturs/scandiweb/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _class,\n    _temp,\n    _jsxFileName = \"/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/component/MyAccountAddressForm/MyAccountAddressForm.component.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport FieldForm from \"/home/arturs/scandiweb/scandipwa/src/component/FieldForm\";\nimport { addressType } from \"/home/arturs/scandiweb/scandipwa/src/type/Account\";\nimport { countriesType } from \"/home/arturs/scandiweb/scandipwa/src/type/Config\";\nimport { getCityAndRegionFromZipcode, setAddressesInFormObject } from \"/home/arturs/scandiweb/scandipwa/src/util/Address\";\n/** #namespace Component/MyAccountAddressForm/Component */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const MyAccountAddressForm = Mosaic.middleware((_temp = _class = class MyAccountAddressForm_ extends Mosaic.Extensible(FieldForm) {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n\n    this.onFormSuccess = function (fields) {\n      const {\n        onSave,\n        addressLinesQty\n      } = _this.props;\n      const {\n        region_id = 0,\n        region_string: region,\n        ...newAddress\n      } = addressLinesQty > 1 ? setAddressesInFormObject(fields, addressLinesQty) : fields;\n      newAddress.region = {\n        region_id,\n        region\n      };\n      onSave(newAddress);\n    };\n\n    this.onCountryChange = function (countryId) {\n      const {\n        countries\n      } = _this.props;\n      const country = countries.find(function ({\n        id\n      }) {\n        return id === countryId;\n      });\n      const {\n        available_regions,\n        is_state_required\n      } = country;\n\n      _this.setState({\n        countryId,\n        isStateRequired: is_state_required,\n        availableRegions: available_regions || []\n      });\n    };\n\n    this.onZipcodeChange = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (e) {\n        const {\n          value\n        } = e.currentTarget;\n        const {\n          countryId,\n          availableRegions\n        } = _this.state;\n        const [city, regionCode] = yield getCityAndRegionFromZipcode(countryId, value);\n\n        if (city) {\n          _this.setState({\n            city\n          });\n        }\n\n        if (availableRegions.length > 0 && regionCode) {\n          const {\n            id: regionId\n          } = availableRegions.find(function (r) {\n            return r.code.toUpperCase() === regionCode.toUpperCase();\n          });\n\n          if (regionId) {\n            _this.setState({\n              regionId\n            });\n          }\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  __construct(props) {\n    super.__construct(props);\n\n    const {\n      countries,\n      default_country,\n      address: {\n        country_id,\n        region: {\n          region_id\n        } = {},\n        city = ''\n      }\n    } = props;\n    const countryId = country_id || default_country;\n    const country = countries.find(function ({\n      id\n    }) {\n      return id === countryId;\n    }) || {};\n    const isStateRequired = country.is_state_required;\n    const {\n      available_regions: availableRegions\n    } = country;\n    const regions = availableRegions || [{}];\n    const regionId = region_id || regions[0].id;\n    this.state = {\n      countryId,\n      availableRegions,\n      regionId,\n      isStateRequired,\n      city\n    };\n  }\n\n  getRegionFields() {\n    var _this2 = this;\n\n    const {\n      address: {\n        region: {\n          region\n        } = {}\n      },\n      regionDisplayAll\n    } = this.props;\n    const {\n      availableRegions,\n      regionId,\n      isStateRequired\n    } = this.state;\n\n    if (!regionDisplayAll && !isStateRequired) {\n      return null;\n    }\n\n    if (!availableRegions || !availableRegions.length) {\n      return {\n        region_string: {\n          label: __('State/Province'),\n          value: region,\n          validation: isStateRequired ? ['notEmpty'] : []\n        }\n      };\n    }\n\n    return {\n      region_id: {\n        label: __('State/Province'),\n        type: 'select',\n        selectOptions: availableRegions.map(function ({\n          id,\n          name\n        }) {\n          return {\n            id,\n            label: name,\n            value: id\n          };\n        }),\n        onChange: function (regionId) {\n          return _this2.setState({\n            regionId\n          });\n        },\n        value: regionId,\n        validation: isStateRequired ? ['notEmpty'] : []\n      }\n    };\n  }\n\n  getStreetFields(label, index) {\n    const {\n      address: {\n        street = []\n      },\n      isSubmitted\n    } = this.props;\n    return {\n      label,\n      value: street[index],\n      validation: index === 0 ? ['notEmpty'] : [],\n      validateSeparately: true,\n      isSubmitted\n    };\n  } // returns the address fields in quantity equal to BE\n\n\n  getAddressFields() {\n    const {\n      addressLinesQty\n    } = this.props;\n\n    if (addressLinesQty === 1) {\n      return {\n        street: this.getStreetFields(__('Street address'), 0)\n      };\n    }\n\n    const streets = {}; // eslint-disable-next-line fp/no-loops, fp/no-let\n\n    for (let i = 0; i < addressLinesQty; i++) {\n      streets[`street${i}`] = this.getStreetFields(__('Street address line %s', i + 1), i);\n    }\n\n    return streets;\n  }\n\n  getVatField() {\n    const {\n      showVatNumber\n    } = this.props;\n\n    if (!showVatNumber) {\n      return {};\n    }\n\n    return {\n      vat_id: {\n        label: __('VAT Number')\n      }\n    };\n  }\n\n  get fieldMap() {\n    const {\n      countryId,\n      city\n    } = this.state;\n    const {\n      countries,\n      address,\n      isSubmitted\n    } = this.props;\n    const {\n      default_billing,\n      default_shipping\n    } = address;\n    return {\n      default_billing: {\n        type: 'checkbox',\n        label: __('This is default Billing Address'),\n        value: 'default_billing',\n        checked: default_billing\n      },\n      default_shipping: {\n        type: 'checkbox',\n        label: __('This is default Shipping Address'),\n        value: 'default_shipping',\n        checked: default_shipping\n      },\n      firstname: {\n        label: __('First name'),\n        validation: ['notEmpty'],\n        validateSeparately: true,\n        isSubmitted\n      },\n      lastname: {\n        label: __('Last name'),\n        validation: ['notEmpty'],\n        validateSeparately: true,\n        isSubmitted\n      },\n      telephone: {\n        label: __('Phone number'),\n        validation: ['notEmpty', 'telephone'],\n        validateSeparately: true,\n        isSubmitted\n      },\n      city: {\n        label: __('City'),\n        validation: ['notEmpty'],\n        validateSeparately: true,\n        isSubmitted,\n        value: city\n      },\n      country_id: {\n        type: 'select',\n        label: __('Country'),\n        validation: ['notEmpty'],\n        validateSeparately: true,\n        isSubmitted,\n        value: countryId,\n        selectOptions: countries.map(function ({\n          id,\n          label\n        }) {\n          return {\n            id,\n            label,\n            value: id\n          };\n        }),\n        onChange: this.onCountryChange\n      },\n      ...this.getRegionFields(),\n      postcode: {\n        label: __('Zip/Postal code'),\n        validation: ['notEmpty'],\n        validateSeparately: true,\n        isSubmitted,\n        onBlur: this.onZipcodeChange\n      },\n      ...this.getAddressFields(),\n      ...this.getVatField() // Will be back with B2B update\n      // company: {\n      //     label: __('Company')\n      // }\n\n    };\n  }\n\n  getDefaultValues(fieldEntry) {\n    const [key, {\n      value\n    }] = fieldEntry;\n    const {\n      address: {\n        [key]: addressValue\n      }\n    } = this.props;\n    return { ...super.getDefaultValues(fieldEntry),\n      value: value !== undefined ? value : addressValue\n    };\n  }\n\n  renderActions() {\n    return /*#__PURE__*/_checkBEM(React, \"button\", {\n      type: \"submit\",\n      block: \"Button\",\n      mix: {\n        block: 'MyAccount',\n        elem: 'Button'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 13\n      }\n    }, __('Save address'));\n  }\n\n}, _class.propTypes = {\n  isSubmitted: PropTypes.bool,\n  address: addressType.isRequired,\n  countries: countriesType.isRequired,\n  default_country: PropTypes.string,\n  onSave: PropTypes.func,\n  addressLinesQty: PropTypes.number.isRequired,\n  showVatNumber: PropTypes.bool.isRequired,\n  regionDisplayAll: PropTypes.bool.isRequired\n}, _class.defaultProps = {\n  default_country: 'US',\n  isSubmitted: false,\n  onSave: function () {}\n}, _temp), \"Component/MyAccountAddressForm/Component\");\nexport default MyAccountAddressForm;","map":{"version":3,"sources":["/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/component/MyAccountAddressForm/MyAccountAddressForm.component.js"],"names":["PropTypes","FieldForm","addressType","countriesType","getCityAndRegionFromZipcode","setAddressesInFormObject","onFormSuccess","fields","onSave","addressLinesQty","props","region_id","region_string","region","newAddress","onCountryChange","countryId","countries","country","find","id","available_regions","is_state_required","setState","isStateRequired","availableRegions","onZipcodeChange","e","value","currentTarget","state","city","regionCode","length","regionId","r","code","toUpperCase","__construct","default_country","address","country_id","regions","getRegionFields","regionDisplayAll","label","__","validation","type","selectOptions","map","name","onChange","getStreetFields","index","street","isSubmitted","validateSeparately","getAddressFields","streets","i","getVatField","showVatNumber","vat_id","fieldMap","default_billing","default_shipping","checked","firstname","lastname","telephone","postcode","onBlur","getDefaultValues","fieldEntry","key","addressValue","undefined","renderActions","block","elem","propTypes","bool","isRequired","string","func","number","defaultProps","MyAccountAddressForm"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,SAAP,MAAsB,YAAtB;AAEA,OAAOC,SAAP;AACA,SAASC,WAAT;AACA,SAASC,aAAT;AACA,SAASC,2BAAT,EAAsCC,wBAAtC;AAEA;;;;AACA,8HAA0CJ,SAA1C,EAAoD;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA+ChDK,aA/CgD,GA+ChC,UAACC,MAAD,EAAY;AACxB,YAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA;AAAV,UAA8B,KAAI,CAACC,KAAzC;AACA,YAAM;AAAEC,QAAAA,SAAS,GAAG,CAAd;AAAiBC,QAAAA,aAAa,EAAEC,MAAhC;AAAwC,WAAGC;AAA3C,UAA0DL,eAAe,GAAG,CAAlB,GAC1DJ,wBAAwB,CAACE,MAAD,EAASE,eAAT,CADkC,GAE1DF,MAFN;AAIAO,MAAAA,UAAU,CAACD,MAAX,GAAoB;AAAEF,QAAAA,SAAF;AAAaE,QAAAA;AAAb,OAApB;AACAL,MAAAA,MAAM,CAACM,UAAD,CAAN;AACH,KAvD+C;;AAAA,SAuFhDC,eAvFgD,GAuF9B,UAACC,SAAD,EAAe;AAC7B,YAAM;AAAEC,QAAAA;AAAF,UAAgB,KAAI,CAACP,KAA3B;AACA,YAAMQ,OAAO,GAAGD,SAAS,CAACE,IAAV,CAAe,UAAC;AAAEC,QAAAA;AAAF,OAAD;AAAA,eAAYA,EAAE,KAAKJ,SAAnB;AAAA,OAAf,CAAhB;AACA,YAAM;AAAEK,QAAAA,iBAAF;AAAqBC,QAAAA;AAArB,UAA2CJ,OAAjD;;AAEA,MAAA,KAAI,CAACK,QAAL,CAAc;AACVP,QAAAA,SADU;AAEVQ,QAAAA,eAAe,EAAEF,iBAFP;AAGVG,QAAAA,gBAAgB,EAAEJ,iBAAiB,IAAI;AAH7B,OAAd;AAKH,KAjG+C;;AAAA,SAmGhDK,eAnGgD;AAAA,mCAmG9B,WAAOC,CAAP,EAAa;AAC3B,cAAM;AAAEC,UAAAA;AAAF,YAAYD,CAAC,CAACE,aAApB;AACA,cAAM;AAAEb,UAAAA,SAAF;AAAaS,UAAAA;AAAb,YAAkC,KAAI,CAACK,KAA7C;AAEA,cAAM,CAACC,IAAD,EAAOC,UAAP,UAA2B5B,2BAA2B,CAACY,SAAD,EAAYY,KAAZ,CAA5D;;AACA,YAAIG,IAAJ,EAAU;AACN,UAAA,KAAI,CAACR,QAAL,CAAc;AACVQ,YAAAA;AADU,WAAd;AAGH;;AAED,YAAIN,gBAAgB,CAACQ,MAAjB,GAA0B,CAA1B,IAA+BD,UAAnC,EAA+C;AAC3C,gBAAM;AAAEZ,YAAAA,EAAE,EAAEc;AAAN,cAAmBT,gBAAgB,CACpCN,IADoB,CACf,UAACgB,CAAD;AAAA,mBAAOA,CAAC,CAACC,IAAF,CAAOC,WAAP,OAAyBL,UAAU,CAACK,WAAX,EAAhC;AAAA,WADe,CAAzB;;AAGA,cAAIH,QAAJ,EAAc;AACV,YAAA,KAAI,CAACX,QAAL,CAAc;AAAEW,cAAAA;AAAF,aAAd;AACH;AACJ;AACJ,OAtH+C;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBhDI,EAAAA,WAAW,CAAC5B,KAAD,EAAQ;AACf,UAAM4B,WAAN,CAAkB5B,KAAlB;;AAEA,UAAM;AACFO,MAAAA,SADE;AAEFsB,MAAAA,eAFE;AAGFC,MAAAA,OAAO,EAAE;AACLC,QAAAA,UADK;AAEL5B,QAAAA,MAAM,EAAE;AAAEF,UAAAA;AAAF,YAAgB,EAFnB;AAGLoB,QAAAA,IAAI,GAAG;AAHF;AAHP,QAQFrB,KARJ;AAUA,UAAMM,SAAS,GAAGyB,UAAU,IAAIF,eAAhC;AACA,UAAMrB,OAAO,GAAGD,SAAS,CAACE,IAAV,CAAe,UAAC;AAAEC,MAAAA;AAAF,KAAD;AAAA,aAAYA,EAAE,KAAKJ,SAAnB;AAAA,KAAf,KAAgD,EAAhE;AACA,UAAMQ,eAAe,GAAGN,OAAO,CAACI,iBAAhC;AACA,UAAM;AAAED,MAAAA,iBAAiB,EAAEI;AAArB,QAA0CP,OAAhD;AACA,UAAMwB,OAAO,GAAGjB,gBAAgB,IAAI,CAAC,EAAD,CAApC;AACA,UAAMS,QAAQ,GAAGvB,SAAS,IAAI+B,OAAO,CAAC,CAAD,CAAP,CAAWtB,EAAzC;AAEA,SAAKU,KAAL,GAAa;AACTd,MAAAA,SADS;AAETS,MAAAA,gBAFS;AAGTS,MAAAA,QAHS;AAITV,MAAAA,eAJS;AAKTO,MAAAA;AALS,KAAb;AAOH;;AAYDY,EAAAA,eAAe,GAAG;AAAA;;AACd,UAAM;AAAEH,MAAAA,OAAO,EAAE;AAAE3B,QAAAA,MAAM,EAAE;AAAEA,UAAAA;AAAF,YAAa;AAAvB,OAAX;AAAwC+B,MAAAA;AAAxC,QAA6D,KAAKlC,KAAxE;AACA,UAAM;AAAEe,MAAAA,gBAAF;AAAoBS,MAAAA,QAApB;AAA8BV,MAAAA;AAA9B,QAAkD,KAAKM,KAA7D;;AAEA,QAAI,CAACc,gBAAD,IAAqB,CAACpB,eAA1B,EAA2C;AACvC,aAAO,IAAP;AACH;;AAED,QAAI,CAACC,gBAAD,IAAqB,CAACA,gBAAgB,CAACQ,MAA3C,EAAmD;AAC/C,aAAO;AACHrB,QAAAA,aAAa,EAAE;AACXiC,UAAAA,KAAK,EAAEC,EAAE,CAAC,gBAAD,CADE;AAEXlB,UAAAA,KAAK,EAAEf,MAFI;AAGXkC,UAAAA,UAAU,EAAEvB,eAAe,GAAG,CAAC,UAAD,CAAH,GAAkB;AAHlC;AADZ,OAAP;AAOH;;AAED,WAAO;AACHb,MAAAA,SAAS,EAAE;AACPkC,QAAAA,KAAK,EAAEC,EAAE,CAAC,gBAAD,CADF;AAEPE,QAAAA,IAAI,EAAE,QAFC;AAGPC,QAAAA,aAAa,EAAExB,gBAAgB,CAACyB,GAAjB,CAAqB,UAAC;AAAE9B,UAAAA,EAAF;AAAM+B,UAAAA;AAAN,SAAD;AAAA,iBAAmB;AAAE/B,YAAAA,EAAF;AAAMyB,YAAAA,KAAK,EAAEM,IAAb;AAAmBvB,YAAAA,KAAK,EAAER;AAA1B,WAAnB;AAAA,SAArB,CAHR;AAIPgC,QAAAA,QAAQ,EAAE,UAAClB,QAAD;AAAA,iBAAc,MAAI,CAACX,QAAL,CAAc;AAAEW,YAAAA;AAAF,WAAd,CAAd;AAAA,SAJH;AAKPN,QAAAA,KAAK,EAAEM,QALA;AAMPa,QAAAA,UAAU,EAAEvB,eAAe,GAAG,CAAC,UAAD,CAAH,GAAkB;AANtC;AADR,KAAP;AAUH;;AAmCD6B,EAAAA,eAAe,CAACR,KAAD,EAAQS,KAAR,EAAe;AAC1B,UAAM;AAAEd,MAAAA,OAAO,EAAE;AAAEe,QAAAA,MAAM,GAAG;AAAX,OAAX;AAA4BC,MAAAA;AAA5B,QAA4C,KAAK9C,KAAvD;AAEA,WAAO;AACHmC,MAAAA,KADG;AAEHjB,MAAAA,KAAK,EAAE2B,MAAM,CAACD,KAAD,CAFV;AAGHP,MAAAA,UAAU,EAAEO,KAAK,KAAK,CAAV,GAAc,CAAC,UAAD,CAAd,GAA6B,EAHtC;AAIHG,MAAAA,kBAAkB,EAAE,IAJjB;AAKHD,MAAAA;AALG,KAAP;AAOH,GAlI+C,CAoIhD;;;AACAE,EAAAA,gBAAgB,GAAG;AACf,UAAM;AAAEjD,MAAAA;AAAF,QAAsB,KAAKC,KAAjC;;AAEA,QAAID,eAAe,KAAK,CAAxB,EAA2B;AACvB,aAAO;AACH8C,QAAAA,MAAM,EAAE,KAAKF,eAAL,CACJP,EAAE,CAAC,gBAAD,CADE,EAEJ,CAFI;AADL,OAAP;AAMH;;AAED,UAAMa,OAAO,GAAG,EAAhB,CAZe,CAcf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnD,eAApB,EAAqCmD,CAAC,EAAtC,EAA0C;AACtCD,MAAAA,OAAO,CAAE,SAAQC,CAAE,EAAZ,CAAP,GAAwB,KAAKP,eAAL,CACpBP,EAAE,CAAC,wBAAD,EAA2Bc,CAAC,GAAG,CAA/B,CADkB,EAEpBA,CAFoB,CAAxB;AAIH;;AAED,WAAOD,OAAP;AACH;;AAEDE,EAAAA,WAAW,GAAG;AACV,UAAM;AAAEC,MAAAA;AAAF,QAAoB,KAAKpD,KAA/B;;AAEA,QAAI,CAACoD,aAAL,EAAoB;AAChB,aAAO,EAAP;AACH;;AAED,WAAO;AACHC,MAAAA,MAAM,EAAE;AACJlB,QAAAA,KAAK,EAAEC,EAAE,CAAC,YAAD;AADL;AADL,KAAP;AAKH;;AAEW,MAARkB,QAAQ,GAAG;AACX,UAAM;AAAEhD,MAAAA,SAAF;AAAae,MAAAA;AAAb,QAAsB,KAAKD,KAAjC;AACA,UAAM;AAAEb,MAAAA,SAAF;AAAauB,MAAAA,OAAb;AAAsBgB,MAAAA;AAAtB,QAAsC,KAAK9C,KAAjD;AACA,UAAM;AAAEuD,MAAAA,eAAF;AAAmBC,MAAAA;AAAnB,QAAwC1B,OAA9C;AAEA,WAAO;AACHyB,MAAAA,eAAe,EAAE;AACbjB,QAAAA,IAAI,EAAE,UADO;AAEbH,QAAAA,KAAK,EAAEC,EAAE,CAAC,iCAAD,CAFI;AAGblB,QAAAA,KAAK,EAAE,iBAHM;AAIbuC,QAAAA,OAAO,EAAEF;AAJI,OADd;AAOHC,MAAAA,gBAAgB,EAAE;AACdlB,QAAAA,IAAI,EAAE,UADQ;AAEdH,QAAAA,KAAK,EAAEC,EAAE,CAAC,kCAAD,CAFK;AAGdlB,QAAAA,KAAK,EAAE,kBAHO;AAIduC,QAAAA,OAAO,EAAED;AAJK,OAPf;AAaHE,MAAAA,SAAS,EAAE;AACPvB,QAAAA,KAAK,EAAEC,EAAE,CAAC,YAAD,CADF;AAEPC,QAAAA,UAAU,EAAE,CAAC,UAAD,CAFL;AAGPU,QAAAA,kBAAkB,EAAE,IAHb;AAIPD,QAAAA;AAJO,OAbR;AAmBHa,MAAAA,QAAQ,EAAE;AACNxB,QAAAA,KAAK,EAAEC,EAAE,CAAC,WAAD,CADH;AAENC,QAAAA,UAAU,EAAE,CAAC,UAAD,CAFN;AAGNU,QAAAA,kBAAkB,EAAE,IAHd;AAIND,QAAAA;AAJM,OAnBP;AAyBHc,MAAAA,SAAS,EAAE;AACPzB,QAAAA,KAAK,EAAEC,EAAE,CAAC,cAAD,CADF;AAEPC,QAAAA,UAAU,EAAE,CAAC,UAAD,EAAa,WAAb,CAFL;AAGPU,QAAAA,kBAAkB,EAAE,IAHb;AAIPD,QAAAA;AAJO,OAzBR;AA+BHzB,MAAAA,IAAI,EAAE;AACFc,QAAAA,KAAK,EAAEC,EAAE,CAAC,MAAD,CADP;AAEFC,QAAAA,UAAU,EAAE,CAAC,UAAD,CAFV;AAGFU,QAAAA,kBAAkB,EAAE,IAHlB;AAIFD,QAAAA,WAJE;AAKF5B,QAAAA,KAAK,EAAEG;AALL,OA/BH;AAsCHU,MAAAA,UAAU,EAAE;AACRO,QAAAA,IAAI,EAAE,QADE;AAERH,QAAAA,KAAK,EAAEC,EAAE,CAAC,SAAD,CAFD;AAGRC,QAAAA,UAAU,EAAE,CAAC,UAAD,CAHJ;AAIRU,QAAAA,kBAAkB,EAAE,IAJZ;AAKRD,QAAAA,WALQ;AAMR5B,QAAAA,KAAK,EAAEZ,SANC;AAORiC,QAAAA,aAAa,EAAEhC,SAAS,CAACiC,GAAV,CAAc,UAAC;AAAE9B,UAAAA,EAAF;AAAMyB,UAAAA;AAAN,SAAD;AAAA,iBAAoB;AAAEzB,YAAAA,EAAF;AAAMyB,YAAAA,KAAN;AAAajB,YAAAA,KAAK,EAAER;AAApB,WAApB;AAAA,SAAd,CAPP;AAQRgC,QAAAA,QAAQ,EAAE,KAAKrC;AARP,OAtCT;AAgDH,SAAG,KAAK4B,eAAL,EAhDA;AAiDH4B,MAAAA,QAAQ,EAAE;AACN1B,QAAAA,KAAK,EAAEC,EAAE,CAAC,iBAAD,CADH;AAENC,QAAAA,UAAU,EAAE,CAAC,UAAD,CAFN;AAGNU,QAAAA,kBAAkB,EAAE,IAHd;AAIND,QAAAA,WAJM;AAKNgB,QAAAA,MAAM,EAAE,KAAK9C;AALP,OAjDP;AAwDH,SAAG,KAAKgC,gBAAL,EAxDA;AAyDH,SAAG,KAAKG,WAAL,EAzDA,CA0DH;AACA;AACA;AACA;;AA7DG,KAAP;AA+DH;;AAEDY,EAAAA,gBAAgB,CAACC,UAAD,EAAa;AACzB,UAAM,CAACC,GAAD,EAAM;AAAE/C,MAAAA;AAAF,KAAN,IAAmB8C,UAAzB;AACA,UAAM;AAAElC,MAAAA,OAAO,EAAE;AAAE,SAACmC,GAAD,GAAOC;AAAT;AAAX,QAAuC,KAAKlE,KAAlD;AAEA,WAAO,EACH,GAAG,MAAM+D,gBAAN,CAAuBC,UAAvB,CADA;AAEH9C,MAAAA,KAAK,EAAEA,KAAK,KAAKiD,SAAV,GAAsBjD,KAAtB,GAA8BgD;AAFlC,KAAP;AAIH;;AAEDE,EAAAA,aAAa,GAAG;AACZ;AAEM,MAAA,IAAI,EAAC,QAFX;AAGM,MAAA,KAAK,EAAC,QAHZ;AAIM,MAAA,GAAG,EAAG;AAAEC,QAAAA,KAAK,EAAE,WAAT;AAAsBC,QAAAA,IAAI,EAAE;AAA5B,OAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMUlC,EAAE,CAAC,cAAD,CANZ;AASH;;AAtQ+C,CAApD,SACWmC,SADX,GACuB;AACfzB,EAAAA,WAAW,EAAExD,SAAS,CAACkF,IADR;AAEf1C,EAAAA,OAAO,EAAEtC,WAAW,CAACiF,UAFN;AAGflE,EAAAA,SAAS,EAAEd,aAAa,CAACgF,UAHV;AAIf5C,EAAAA,eAAe,EAAEvC,SAAS,CAACoF,MAJZ;AAKf5E,EAAAA,MAAM,EAAER,SAAS,CAACqF,IALH;AAMf5E,EAAAA,eAAe,EAAET,SAAS,CAACsF,MAAV,CAAiBH,UANnB;AAOfrB,EAAAA,aAAa,EAAE9D,SAAS,CAACkF,IAAV,CAAeC,UAPf;AAQfvC,EAAAA,gBAAgB,EAAE5C,SAAS,CAACkF,IAAV,CAAeC;AARlB,CADvB,SAYWI,YAZX,GAY0B;AAClBhD,EAAAA,eAAe,EAAE,IADC;AAElBiB,EAAAA,WAAW,EAAE,KAFK;AAGlBhD,EAAAA,MAAM,EAAE,YAAM,CAAE;AAHE,CAZ1B;AAyQA,eAAegF,oBAAf","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\n\nimport FieldForm from 'Component/FieldForm';\nimport { addressType } from 'Type/Account';\nimport { countriesType } from 'Type/Config';\nimport { getCityAndRegionFromZipcode, setAddressesInFormObject } from 'Util/Address';\n\n/** @namespace Component/MyAccountAddressForm/Component */\nexport class MyAccountAddressForm extends FieldForm {\n    static propTypes = {\n        isSubmitted: PropTypes.bool,\n        address: addressType.isRequired,\n        countries: countriesType.isRequired,\n        default_country: PropTypes.string,\n        onSave: PropTypes.func,\n        addressLinesQty: PropTypes.number.isRequired,\n        showVatNumber: PropTypes.bool.isRequired,\n        regionDisplayAll: PropTypes.bool.isRequired\n    };\n\n    static defaultProps = {\n        default_country: 'US',\n        isSubmitted: false,\n        onSave: () => {}\n    };\n\n    __construct(props) {\n        super.__construct(props);\n\n        const {\n            countries,\n            default_country,\n            address: {\n                country_id,\n                region: { region_id } = {},\n                city = ''\n            }\n        } = props;\n\n        const countryId = country_id || default_country;\n        const country = countries.find(({ id }) => id === countryId) || {};\n        const isStateRequired = country.is_state_required;\n        const { available_regions: availableRegions } = country;\n        const regions = availableRegions || [{}];\n        const regionId = region_id || regions[0].id;\n\n        this.state = {\n            countryId,\n            availableRegions,\n            regionId,\n            isStateRequired,\n            city\n        };\n    }\n\n    onFormSuccess = (fields) => {\n        const { onSave, addressLinesQty } = this.props;\n        const { region_id = 0, region_string: region, ...newAddress } = addressLinesQty > 1\n            ? setAddressesInFormObject(fields, addressLinesQty)\n            : fields;\n\n        newAddress.region = { region_id, region };\n        onSave(newAddress);\n    };\n\n    getRegionFields() {\n        const { address: { region: { region } = {} }, regionDisplayAll } = this.props;\n        const { availableRegions, regionId, isStateRequired } = this.state;\n\n        if (!regionDisplayAll && !isStateRequired) {\n            return null;\n        }\n\n        if (!availableRegions || !availableRegions.length) {\n            return {\n                region_string: {\n                    label: __('State/Province'),\n                    value: region,\n                    validation: isStateRequired ? ['notEmpty'] : []\n                }\n            };\n        }\n\n        return {\n            region_id: {\n                label: __('State/Province'),\n                type: 'select',\n                selectOptions: availableRegions.map(({ id, name }) => ({ id, label: name, value: id })),\n                onChange: (regionId) => this.setState({ regionId }),\n                value: regionId,\n                validation: isStateRequired ? ['notEmpty'] : []\n            }\n        };\n    }\n\n    onCountryChange = (countryId) => {\n        const { countries } = this.props;\n        const country = countries.find(({ id }) => id === countryId);\n        const { available_regions, is_state_required } = country;\n\n        this.setState({\n            countryId,\n            isStateRequired: is_state_required,\n            availableRegions: available_regions || []\n        });\n    };\n\n    onZipcodeChange = async (e) => {\n        const { value } = e.currentTarget;\n        const { countryId, availableRegions } = this.state;\n\n        const [city, regionCode] = await getCityAndRegionFromZipcode(countryId, value);\n        if (city) {\n            this.setState({\n                city\n            });\n        }\n\n        if (availableRegions.length > 0 && regionCode) {\n            const { id: regionId } = availableRegions\n                .find((r) => r.code.toUpperCase() === regionCode.toUpperCase());\n\n            if (regionId) {\n                this.setState({ regionId });\n            }\n        }\n    };\n\n    getStreetFields(label, index) {\n        const { address: { street = [] }, isSubmitted } = this.props;\n\n        return {\n            label,\n            value: street[index],\n            validation: index === 0 ? ['notEmpty'] : [],\n            validateSeparately: true,\n            isSubmitted\n        };\n    }\n\n    // returns the address fields in quantity equal to BE\n    getAddressFields() {\n        const { addressLinesQty } = this.props;\n\n        if (addressLinesQty === 1) {\n            return {\n                street: this.getStreetFields(\n                    __('Street address'),\n                    0\n                )\n            };\n        }\n\n        const streets = {};\n\n        // eslint-disable-next-line fp/no-loops, fp/no-let\n        for (let i = 0; i < addressLinesQty; i++) {\n            streets[`street${i}`] = this.getStreetFields(\n                __('Street address line %s', i + 1),\n                i\n            );\n        }\n\n        return streets;\n    }\n\n    getVatField() {\n        const { showVatNumber } = this.props;\n\n        if (!showVatNumber) {\n            return {};\n        }\n\n        return {\n            vat_id: {\n                label: __('VAT Number')\n            }\n        };\n    }\n\n    get fieldMap() {\n        const { countryId, city } = this.state;\n        const { countries, address, isSubmitted } = this.props;\n        const { default_billing, default_shipping } = address;\n\n        return {\n            default_billing: {\n                type: 'checkbox',\n                label: __('This is default Billing Address'),\n                value: 'default_billing',\n                checked: default_billing\n            },\n            default_shipping: {\n                type: 'checkbox',\n                label: __('This is default Shipping Address'),\n                value: 'default_shipping',\n                checked: default_shipping\n            },\n            firstname: {\n                label: __('First name'),\n                validation: ['notEmpty'],\n                validateSeparately: true,\n                isSubmitted\n            },\n            lastname: {\n                label: __('Last name'),\n                validation: ['notEmpty'],\n                validateSeparately: true,\n                isSubmitted\n            },\n            telephone: {\n                label: __('Phone number'),\n                validation: ['notEmpty', 'telephone'],\n                validateSeparately: true,\n                isSubmitted\n            },\n            city: {\n                label: __('City'),\n                validation: ['notEmpty'],\n                validateSeparately: true,\n                isSubmitted,\n                value: city\n            },\n            country_id: {\n                type: 'select',\n                label: __('Country'),\n                validation: ['notEmpty'],\n                validateSeparately: true,\n                isSubmitted,\n                value: countryId,\n                selectOptions: countries.map(({ id, label }) => ({ id, label, value: id })),\n                onChange: this.onCountryChange\n            },\n            ...this.getRegionFields(),\n            postcode: {\n                label: __('Zip/Postal code'),\n                validation: ['notEmpty'],\n                validateSeparately: true,\n                isSubmitted,\n                onBlur: this.onZipcodeChange\n            },\n            ...this.getAddressFields(),\n            ...this.getVatField()\n            // Will be back with B2B update\n            // company: {\n            //     label: __('Company')\n            // }\n        };\n    }\n\n    getDefaultValues(fieldEntry) {\n        const [key, { value }] = fieldEntry;\n        const { address: { [key]: addressValue } } = this.props;\n\n        return {\n            ...super.getDefaultValues(fieldEntry),\n            value: value !== undefined ? value : addressValue\n        };\n    }\n\n    renderActions() {\n        return (\n            <button\n              type=\"submit\"\n              block=\"Button\"\n              mix={ { block: 'MyAccount', elem: 'Button' } }\n            >\n                { __('Save address') }\n            </button>\n        );\n    }\n}\n\nexport default MyAccountAddressForm;\n"]},"metadata":{},"sourceType":"module"}