{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/component/ExpandableContent/ExpandableContent.component.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { createRef, PureComponent } from 'react';\nimport TextPlaceholder from \"/home/arturs/scandiweb/scandipwa/src/component/TextPlaceholder\";\nimport { ChildrenType, MixType } from \"/home/arturs/scandiweb/scandipwa/src/type/Common\";\nimport { getFixedElementHeight } from \"/home/arturs/scandiweb/scandipwa/src/util/CSS\";\nimport \"./ExpandableContent.style\";\n/** #namespace Component/ExpandableContent/Component */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const ExpandableContent = Mosaic.middleware((_temp = _class = class ExpandableContent_ extends Mosaic.Extensible(PureComponent) {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n    this.expandableContentRef = /*#__PURE__*/createRef();\n\n    this.toggleExpand = function () {\n      const {\n        onClick\n      } = _this.props;\n\n      if (onClick) {\n        onClick();\n        return;\n      }\n\n      _this.setState(function ({\n        isContentExpanded\n      }) {\n        return {\n          isContentExpanded: !isContentExpanded\n        };\n      }, function () {\n        return _this.scrollToExpandedContent();\n      });\n    };\n  }\n\n  __construct(props) {\n    super.__construct(props);\n\n    const {\n      isContentExpanded\n    } = this.props;\n    this.state = {\n      isContentExpanded,\n      // eslint-disable-next-line react/no-unused-state\n      prevIsContentExpanded: isContentExpanded\n    };\n  }\n\n  static getDerivedStateFromProps({\n    isContentExpanded\n  }, {\n    prevIsContentExpanded\n  }) {\n    if (isContentExpanded !== prevIsContentExpanded) {\n      return {\n        prevIsContentExpanded: isContentExpanded,\n        isContentExpanded\n      };\n    }\n\n    return null;\n  }\n\n  scrollToExpandedContent() {\n    const {\n      isContentExpanded\n    } = this.state;\n    const elem = this.expandableContentRef && this.expandableContentRef.current;\n\n    if (isContentExpanded && !elem) {\n      return;\n    }\n\n    const elemToWindowTopDist = elem.getBoundingClientRect().top;\n    const windowToPageTopDist = document.body.getBoundingClientRect().top;\n    const topToElemDistance = elemToWindowTopDist - windowToPageTopDist;\n    const {\n      total: totalFixedElementHeight,\n      bottom: bottomFixedElementHeight\n    } = getFixedElementHeight();\n    const elemMaxOffsetHeight = screen.height > elem.offsetHeight + bottomFixedElementHeight ? elem.offsetHeight : screen.height - totalFixedElementHeight;\n    const scrollTo = topToElemDistance - (screen.height - bottomFixedElementHeight - elemMaxOffsetHeight); // checking if button is in a view-port\n\n    if (-windowToPageTopDist >= scrollTo) {\n      return;\n    }\n\n    window.scrollTo({\n      behavior: 'smooth',\n      top: scrollTo\n    });\n  }\n\n  renderButton() {\n    const {\n      isContentExpanded\n    } = this.state;\n    const {\n      heading,\n      subHeading,\n      mix\n    } = this.props;\n    return /*#__PURE__*/_checkBEM(React, \"button\", {\n      block: \"ExpandableContent\",\n      elem: \"Button\",\n      mods: {\n        isContentExpanded\n      },\n      mix: { ...mix,\n        elem: 'ExpandableContentButton'\n      },\n      onClick: this.toggleExpand,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/_checkBEM(React, \"span\", {\n      block: \"ExpandableContent\",\n      elem: \"Heading\",\n      mix: { ...mix,\n        elem: 'ExpandableContentHeading'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }\n    }, typeof heading === 'string' ? /*#__PURE__*/_checkBEM(React, TextPlaceholder, {\n      content: heading,\n      length: \"medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 25\n      }\n    }) : heading), /*#__PURE__*/_checkBEM(React, \"span\", {\n      block: \"ExpandableContent\",\n      elem: \"SubHeading\",\n      mix: { ...mix,\n        elem: 'ExpandableContentSubHeading'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }\n    }, subHeading));\n  }\n\n  renderContent() {\n    const {\n      children,\n      mix\n    } = this.props;\n    const {\n      isContentExpanded\n    } = this.state;\n    const mods = {\n      isContentExpanded\n    };\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: \"ExpandableContent\",\n      elem: \"Content\",\n      mods: mods,\n      mix: { ...mix,\n        elem: 'ExpandableContentContent',\n        mods\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }, children);\n  }\n\n  render() {\n    const {\n      mix\n    } = this.props;\n    return /*#__PURE__*/_checkBEM(React, \"article\", {\n      block: \"ExpandableContent\",\n      mix: mix,\n      ref: this.expandableContentRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    }, this.renderButton(), this.renderContent());\n  }\n\n}, _class.propTypes = {\n  isContentExpanded: PropTypes.bool,\n  heading: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  subHeading: PropTypes.string,\n  children: ChildrenType.isRequired,\n  mix: MixType.isRequired,\n  onClick: function (props, propName, componentName) {\n    const propValue = props[propName];\n\n    if (propValue === null) {\n      return;\n    }\n\n    if (typeof propValue === 'function') {\n      return;\n    }\n\n    throw new Error(`${componentName} only accepts null or string`);\n  }\n}, _class.defaultProps = {\n  subHeading: '',\n  heading: '',\n  isContentExpanded: false,\n  onClick: null\n}, _temp), \"Component/ExpandableContent/Component\");\nexport default ExpandableContent;","map":{"version":3,"sources":["/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/component/ExpandableContent/ExpandableContent.component.js"],"names":["PropTypes","createRef","PureComponent","TextPlaceholder","ChildrenType","MixType","getFixedElementHeight","expandableContentRef","toggleExpand","onClick","props","setState","isContentExpanded","scrollToExpandedContent","__construct","state","prevIsContentExpanded","getDerivedStateFromProps","elem","current","elemToWindowTopDist","getBoundingClientRect","top","windowToPageTopDist","document","body","topToElemDistance","total","totalFixedElementHeight","bottom","bottomFixedElementHeight","elemMaxOffsetHeight","screen","height","offsetHeight","scrollTo","window","behavior","renderButton","heading","subHeading","mix","renderContent","children","mods","render","propTypes","bool","oneOfType","string","object","isRequired","propName","componentName","propValue","Error","defaultProps","ExpandableContent"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { createRef, PureComponent } from 'react';\n\nimport TextPlaceholder from 'Component/TextPlaceholder';\nimport { ChildrenType, MixType } from 'Type/Common';\nimport { getFixedElementHeight } from 'Util/CSS';\n\nimport './ExpandableContent.style';\n/** @namespace Component/ExpandableContent/Component */\nexport class ExpandableContent extends PureComponent {\n    static propTypes = {\n        isContentExpanded: PropTypes.bool,\n        heading: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n        subHeading: PropTypes.string,\n        children: ChildrenType.isRequired,\n        mix: MixType.isRequired,\n        onClick: (props, propName, componentName) => {\n            const propValue = props[propName];\n            if (propValue === null) {\n                return;\n            }\n            if (typeof propValue === 'function') {\n                return;\n            }\n            throw new Error(`${componentName} only accepts null or string`);\n        }\n    };\n\n    static defaultProps = {\n        subHeading: '',\n        heading: '',\n        isContentExpanded: false,\n        onClick: null\n    };\n\n    expandableContentRef = createRef();\n\n    __construct(props) {\n        super.__construct(props);\n        const { isContentExpanded } = this.props;\n        this.state = {\n            isContentExpanded,\n            // eslint-disable-next-line react/no-unused-state\n            prevIsContentExpanded: isContentExpanded\n        };\n    }\n\n    static getDerivedStateFromProps({ isContentExpanded }, { prevIsContentExpanded }) {\n        if (isContentExpanded !== prevIsContentExpanded) {\n            return {\n                prevIsContentExpanded: isContentExpanded,\n                isContentExpanded\n            };\n        }\n\n        return null;\n    }\n\n    scrollToExpandedContent() {\n        const { isContentExpanded } = this.state;\n        const elem = this.expandableContentRef && this.expandableContentRef.current;\n\n        if (isContentExpanded && !elem) {\n            return;\n        }\n\n        const elemToWindowTopDist = elem.getBoundingClientRect().top;\n        const windowToPageTopDist = document.body.getBoundingClientRect().top;\n        const topToElemDistance = elemToWindowTopDist - windowToPageTopDist;\n        const {\n            total: totalFixedElementHeight,\n            bottom: bottomFixedElementHeight\n        } = getFixedElementHeight();\n\n        const elemMaxOffsetHeight = screen.height > elem.offsetHeight + bottomFixedElementHeight\n            ? elem.offsetHeight\n            : screen.height - totalFixedElementHeight;\n        const scrollTo = topToElemDistance - (screen.height - bottomFixedElementHeight - elemMaxOffsetHeight);\n\n        // checking if button is in a view-port\n        if (-windowToPageTopDist >= scrollTo) {\n            return;\n        }\n\n        window.scrollTo({ behavior: 'smooth', top: scrollTo });\n    }\n\n    toggleExpand = () => {\n        const { onClick } = this.props;\n        if (onClick) {\n            onClick();\n            return;\n        }\n        this.setState(\n            ({ isContentExpanded }) => ({ isContentExpanded: !isContentExpanded }),\n            () => this.scrollToExpandedContent()\n        );\n    };\n\n    renderButton() {\n        const { isContentExpanded } = this.state;\n        const {\n            heading,\n            subHeading,\n            mix\n        } = this.props;\n\n        return (\n            <button\n              block=\"ExpandableContent\"\n              elem=\"Button\"\n              mods={ { isContentExpanded } }\n              mix={ { ...mix, elem: 'ExpandableContentButton' } }\n              onClick={ this.toggleExpand }\n            >\n                <span\n                  block=\"ExpandableContent\"\n                  elem=\"Heading\"\n                  mix={ { ...mix, elem: 'ExpandableContentHeading' } }\n                >\n                    { typeof heading === 'string' ? (\n                        <TextPlaceholder content={ heading } length=\"medium\" />\n                    ) : (\n                        heading\n                    ) }\n                </span>\n                <span\n                  block=\"ExpandableContent\"\n                  elem=\"SubHeading\"\n                  mix={ { ...mix, elem: 'ExpandableContentSubHeading' } }\n                >\n                    { subHeading }\n                </span>\n            </button>\n        );\n    }\n\n    renderContent() {\n        const { children, mix } = this.props;\n        const { isContentExpanded } = this.state;\n        const mods = { isContentExpanded };\n        return (\n            <div\n              block=\"ExpandableContent\"\n              elem=\"Content\"\n              mods={ mods }\n              mix={ { ...mix, elem: 'ExpandableContentContent', mods } }\n            >\n                { children }\n            </div>\n        );\n    }\n\n    render() {\n        const { mix } = this.props;\n        return (\n            <article\n              block=\"ExpandableContent\"\n              mix={ mix }\n              ref={ this.expandableContentRef }\n            >\n                { this.renderButton() }\n                { this.renderContent() }\n            </article>\n        );\n    }\n}\nexport default ExpandableContent;\n"]},"metadata":{},"sourceType":"module"}