{"ast":null,"code":"/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport ProductListQuery from \"/home/arturs/scandiweb/extension/src/query/ProductList.query\";\nimport { updateNoMatch } from \"/home/arturs/scandiweb/extension/src/store/NoMatch/NoMatch.action\";\nimport { showNotification } from \"/home/arturs/scandiweb/extension/src/store/Notification/Notification.action\";\nimport { appendPage, updateLoadStatus, updatePageLoadingStatus, updateProductListItems } from \"/home/arturs/scandiweb/extension/src/store/ProductList/ProductList.action\";\nimport { QueryDispatcher } from \"/home/arturs/scandiweb/extension/src/util/Request\";\n/**\n * Product List Dispatcher\n * @class ProductListDispatcher\n * @extends QueryDispatcher\n * #namespace Store/ProductList/Dispatcher\n */\n\nexport const ProductListDispatcher = Mosaic.middleware(class ProductListDispatcher_ extends Mosaic.Extensible(QueryDispatcher) {\n  __construct() {\n    super.__construct('ProductList');\n  }\n\n  onSuccess(data, dispatch, options) {\n    const {\n      products: {\n        items,\n        total_count,\n        page_info: {\n          total_pages\n        } = {}\n      } = {}\n    } = data;\n    const {\n      args,\n      isNext\n    } = options;\n    const {\n      currentPage\n    } = args;\n\n    if (isNext) {\n      return dispatch(appendPage(items, currentPage));\n    }\n\n    return dispatch(updateProductListItems(items, currentPage, total_count, total_pages, args));\n  }\n\n  onError(error, dispatch) {\n    dispatch(showNotification('error', __('Error fetching Product List!'), error));\n    dispatch(updateNoMatch(true));\n  }\n\n  prepareRequest(options, dispatch) {\n    const {\n      isNext\n    } = options;\n\n    if (!isNext) {\n      dispatch(updateLoadStatus(true));\n    } else {\n      dispatch(updatePageLoadingStatus());\n    }\n\n    return ProductListQuery.getQuery(options);\n  }\n\n}, \"Store/ProductList/Dispatcher\");\nexport default new ProductListDispatcher();","map":{"version":3,"sources":["/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/store/ProductList/ProductList.dispatcher.js"],"names":["ProductListQuery","updateNoMatch","showNotification","appendPage","updateLoadStatus","updatePageLoadingStatus","updateProductListItems","QueryDispatcher","__construct","onSuccess","data","dispatch","options","products","items","total_count","page_info","total_pages","args","isNext","currentPage","onError","error","__","prepareRequest","getQuery","ProductListDispatcher"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,gBAAP;AACA,SAASC,aAAT;AACA,SAASC,gBAAT;AACA,SACIC,UADJ,EAEIC,gBAFJ,EAGIC,uBAHJ,EAIIC,sBAJJ;AAMA,SAASC,eAAT;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,8GAA2CA,eAA3C,EAA2D;AACvDC,EAAAA,WAAW,GAAG;AACV,UAAMA,WAAN,CAAkB,aAAlB;AACH;;AAEDC,EAAAA,SAAS,CAACC,IAAD,EAAOC,QAAP,EAAiBC,OAAjB,EAA0B;AAC/B,UAAM;AACFC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,KADM;AAENC,QAAAA,WAFM;AAGNC,QAAAA,SAAS,EAAE;AAAEC,UAAAA;AAAF,YAAkB;AAHvB,UAIN;AALF,QAMFP,IANJ;AAQA,UAAM;AAAEQ,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAmBP,OAAzB;AACA,UAAM;AAAEQ,MAAAA;AAAF,QAAkBF,IAAxB;;AAEA,QAAIC,MAAJ,EAAY;AACR,aAAOR,QAAQ,CACXR,UAAU,CACNW,KADM,EAENM,WAFM,CADC,CAAf;AAMH;;AAED,WAAOT,QAAQ,CACXL,sBAAsB,CAClBQ,KADkB,EAElBM,WAFkB,EAGlBL,WAHkB,EAIlBE,WAJkB,EAKlBC,IALkB,CADX,CAAf;AASH;;AAEDG,EAAAA,OAAO,CAACC,KAAD,EAAQX,QAAR,EAAkB;AACrBA,IAAAA,QAAQ,CAACT,gBAAgB,CAAC,OAAD,EAAUqB,EAAE,CAAC,8BAAD,CAAZ,EAA8CD,KAA9C,CAAjB,CAAR;AACAX,IAAAA,QAAQ,CAACV,aAAa,CAAC,IAAD,CAAd,CAAR;AACH;;AAEDuB,EAAAA,cAAc,CAACZ,OAAD,EAAUD,QAAV,EAAoB;AAC9B,UAAM;AAAEQ,MAAAA;AAAF,QAAaP,OAAnB;;AAEA,QAAI,CAACO,MAAL,EAAa;AACTR,MAAAA,QAAQ,CAACP,gBAAgB,CAAC,IAAD,CAAjB,CAAR;AACH,KAFD,MAEO;AACHO,MAAAA,QAAQ,CAACN,uBAAuB,EAAxB,CAAR;AACH;;AAED,WAAOL,gBAAgB,CAACyB,QAAjB,CAA0Bb,OAA1B,CAAP;AACH;;AApDsD,CAA3D;AAuDA,eAAe,IAAIc,qBAAJ,EAAf","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport ProductListQuery from 'Query/ProductList.query';\nimport { updateNoMatch } from 'Store/NoMatch/NoMatch.action';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport {\n    appendPage,\n    updateLoadStatus,\n    updatePageLoadingStatus,\n    updateProductListItems\n} from 'Store/ProductList/ProductList.action';\nimport { QueryDispatcher } from 'Util/Request';\n\n/**\n * Product List Dispatcher\n * @class ProductListDispatcher\n * @extends QueryDispatcher\n * @namespace Store/ProductList/Dispatcher\n */\nexport class ProductListDispatcher extends QueryDispatcher {\n    __construct() {\n        super.__construct('ProductList');\n    }\n\n    onSuccess(data, dispatch, options) {\n        const {\n            products: {\n                items,\n                total_count,\n                page_info: { total_pages } = {}\n            } = {}\n        } = data;\n\n        const { args, isNext } = options;\n        const { currentPage } = args;\n\n        if (isNext) {\n            return dispatch(\n                appendPage(\n                    items,\n                    currentPage\n                )\n            );\n        }\n\n        return dispatch(\n            updateProductListItems(\n                items,\n                currentPage,\n                total_count,\n                total_pages,\n                args\n            )\n        );\n    }\n\n    onError(error, dispatch) {\n        dispatch(showNotification('error', __('Error fetching Product List!'), error));\n        dispatch(updateNoMatch(true));\n    }\n\n    prepareRequest(options, dispatch) {\n        const { isNext } = options;\n\n        if (!isNext) {\n            dispatch(updateLoadStatus(true));\n        } else {\n            dispatch(updatePageLoadingStatus());\n        }\n\n        return ProductListQuery.getQuery(options);\n    }\n}\n\nexport default new ProductListDispatcher();\n"]},"metadata":{},"sourceType":"module"}