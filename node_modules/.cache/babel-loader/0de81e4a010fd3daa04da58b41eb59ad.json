{"ast":null,"code":"/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n// TODO: maybe consider moving to IndexedDB insead of localStorage\n\n/**\n * Set of helpers related to Browser Database\n * @class CSS\n * #namespace Util/BrowserDatabase\n */\nexport const BrowserDatabase = Mosaic.middleware(class BrowserDatabase_ extends Mosaic.Extensible() {\n  /**\n   * Loads data from browser storage\n   * @param {String} location Name of the local storage\n   * @return {Object} Object stored in a specified path\n   * @memberof BrowserDatabase\n   */\n  getItem(location) {\n    try {\n      const entryObject = JSON.parse(localStorage.getItem(location));\n      const {\n        data,\n        expiration,\n        createdAt\n      } = entryObject;\n      const MILLISECONDS_TO_SECONDS = 1000;\n\n      if (expiration && Date.now() - createdAt > expiration * MILLISECONDS_TO_SECONDS) {\n        localStorage.removeItem(location);\n        return null;\n      }\n\n      return data;\n    } catch {\n      return null;\n    }\n  }\n  /**\n   * Save data to local storage\n   * @param {Any} data The value to save to local storage\n   * @param {String} location Name of the local storage\n   * @param {Number} expiration Time to store entry (in seconds)\n   * @return {Void}\n   * @memberof BrowserDatabase\n   */\n\n\n  setItem(data, location, expiration) {\n    localStorage.setItem(location, JSON.stringify({\n      data,\n      expiration,\n      createdAt: Date.now()\n    }));\n  }\n  /**\n   * Delete item from local storage\n   * @param {String} location\n   * @memberof BrowserDatabase\n   */\n\n\n  deleteItem(location) {\n    localStorage.removeItem(location);\n  }\n\n}, \"Util/BrowserDatabase\");\nexport default new BrowserDatabase();","map":{"version":3,"sources":["/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/util/BrowserDatabase/BrowserDatabase.js"],"names":["getItem","location","entryObject","JSON","parse","localStorage","data","expiration","createdAt","MILLISECONDS_TO_SECONDS","Date","now","removeItem","setItem","stringify","deleteItem","BrowserDatabase"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,oGAA6B;AACzB;AACJ;AACA;AACA;AACA;AACA;AACIA,EAAAA,OAAO,CAACC,QAAD,EAAW;AACd,QAAI;AACA,YAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACL,OAAb,CAAqBC,QAArB,CAAX,CAApB;AACA,YAAM;AAAEK,QAAAA,IAAF;AAAQC,QAAAA,UAAR;AAAoBC,QAAAA;AAApB,UAAkCN,WAAxC;AACA,YAAMO,uBAAuB,GAAG,IAAhC;;AAEA,UAAIF,UAAU,IAAIG,IAAI,CAACC,GAAL,KAAaH,SAAb,GAAyBD,UAAU,GAAGE,uBAAxD,EAAiF;AAC7EJ,QAAAA,YAAY,CAACO,UAAb,CAAwBX,QAAxB;AACA,eAAO,IAAP;AACH;;AAED,aAAOK,IAAP;AACH,KAXD,CAWE,MAAM;AACJ,aAAO,IAAP;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIO,EAAAA,OAAO,CAACP,IAAD,EAAOL,QAAP,EAAiBM,UAAjB,EAA6B;AAChCF,IAAAA,YAAY,CAACQ,OAAb,CAAqBZ,QAArB,EAA+BE,IAAI,CAACW,SAAL,CAAe;AAC1CR,MAAAA,IAD0C;AAE1CC,MAAAA,UAF0C;AAG1CC,MAAAA,SAAS,EAAEE,IAAI,CAACC,GAAL;AAH+B,KAAf,CAA/B;AAKH;AAED;AACJ;AACA;AACA;AACA;;;AACII,EAAAA,UAAU,CAACd,QAAD,EAAW;AACjBI,IAAAA,YAAY,CAACO,UAAb,CAAwBX,QAAxB;AACH;;AA/CwB,CAA7B;AAkDA,eAAe,IAAIe,eAAJ,EAAf","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\n// TODO: maybe consider moving to IndexedDB insead of localStorage\n\n/**\n * Set of helpers related to Browser Database\n * @class CSS\n * @namespace Util/BrowserDatabase\n */\nexport class BrowserDatabase {\n    /**\n     * Loads data from browser storage\n     * @param {String} location Name of the local storage\n     * @return {Object} Object stored in a specified path\n     * @memberof BrowserDatabase\n     */\n    getItem(location) {\n        try {\n            const entryObject = JSON.parse(localStorage.getItem(location));\n            const { data, expiration, createdAt } = entryObject;\n            const MILLISECONDS_TO_SECONDS = 1000;\n\n            if (expiration && Date.now() - createdAt > expiration * MILLISECONDS_TO_SECONDS) {\n                localStorage.removeItem(location);\n                return null;\n            }\n\n            return data;\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Save data to local storage\n     * @param {Any} data The value to save to local storage\n     * @param {String} location Name of the local storage\n     * @param {Number} expiration Time to store entry (in seconds)\n     * @return {Void}\n     * @memberof BrowserDatabase\n     */\n    setItem(data, location, expiration) {\n        localStorage.setItem(location, JSON.stringify({\n            data,\n            expiration,\n            createdAt: Date.now()\n        }));\n    }\n\n    /**\n     * Delete item from local storage\n     * @param {String} location\n     * @memberof BrowserDatabase\n     */\n    deleteItem(location) {\n        localStorage.removeItem(location);\n    }\n}\n\nexport default new BrowserDatabase();\n"]},"metadata":{},"sourceType":"module"}