{"ast":null,"code":"import _asyncToGenerator from \"/home/arturs/scandiweb/extension/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport OrderQuery from \"/home/arturs/scandiweb/extension/src/query/Order.query\";\nimport { showNotification } from \"/home/arturs/scandiweb/extension/src/store/Notification/Notification.action\";\nimport { getOrderList } from \"/home/arturs/scandiweb/extension/src/store/Order/Order.action\";\nimport { fetchQuery, getErrorMessage } from \"/home/arturs/scandiweb/extension/src/util/Request\";\n/** #namespace Store/Order/Dispatcher */\n\nexport const OrderDispatcher = Mosaic.middleware(class OrderDispatcher_ extends Mosaic.Extensible() {\n  requestOrders(dispatch) {\n    const query = OrderQuery.getOrderListQuery();\n    return fetchQuery(query).then(\n    /** #namespace Store/Order/Dispatcher/requestOrdersFetchQueryThen */\n    Mosaic.middleware(function ({\n      getOrderList: orders\n    }) {\n      dispatch(getOrderList(orders, false));\n    }, \"Store/Order/Dispatcher/requestOrdersFetchQueryThen\"),\n    /** #namespace Store/Order/Dispatcher/requestOrdersFetchQueryError */\n    Mosaic.middleware(function (error) {\n      return dispatch(showNotification('error', getErrorMessage(error)));\n    }, \"Store/Order/Dispatcher/requestOrdersFetchQueryError\"));\n  }\n\n  getOrderById(dispatch, id) {\n    return _asyncToGenerator(function* () {\n      try {\n        const {\n          getOrderById: result\n        } = yield fetchQuery(OrderQuery.getOrderByIdQuery(id));\n        return result;\n      } catch (error) {\n        dispatch(showNotification('error', getErrorMessage(error)));\n        return null;\n      }\n    })();\n  }\n\n}, \"Store/Order/Dispatcher\");\nexport default new OrderDispatcher();","map":{"version":3,"sources":["/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/store/Order/Order.dispatcher.js"],"names":["OrderQuery","showNotification","getOrderList","fetchQuery","getErrorMessage","requestOrders","dispatch","query","getOrderListQuery","then","orders","error","getOrderById","id","result","getOrderByIdQuery","OrderDispatcher"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,UAAP;AACA,SAASC,gBAAT;AACA,SAASC,YAAT;AACA,SAASC,UAAT,EAAqBC,eAArB;AAEA;;AACA,oGAA6B;AACzBC,EAAAA,aAAa,CAACC,QAAD,EAAW;AACpB,UAAMC,KAAK,GAAGP,UAAU,CAACQ,iBAAX,EAAd;AAEA,WAAOL,UAAU,CAACI,KAAD,CAAV,CAAkBE,IAAlB;AACH;AADG,sBAEH,UAAC;AAAEP,MAAAA,YAAY,EAAEQ;AAAhB,KAAD,EAA8B;AAC1BJ,MAAAA,QAAQ,CAACJ,YAAY,CAACQ,MAAD,EAAS,KAAT,CAAb,CAAR;AACH,KAJE;AAKH;AALG,sBAMH,UAACC,KAAD;AAAA,aAAWL,QAAQ,CAACL,gBAAgB,CAAC,OAAD,EAAUG,eAAe,CAACO,KAAD,CAAzB,CAAjB,CAAnB;AAAA,KANG,yDAAP;AAQH;;AAEKC,EAAAA,YAAY,CAACN,QAAD,EAAWO,EAAX,EAAe;AAAA;AAC7B,UAAI;AACA,cAAM;AAAED,UAAAA,YAAY,EAAEE;AAAhB,kBAAiCX,UAAU,CAACH,UAAU,CAACe,iBAAX,CAA6BF,EAA7B,CAAD,CAAjD;AAEA,eAAOC,MAAP;AACH,OAJD,CAIE,OAAOH,KAAP,EAAc;AACZL,QAAAA,QAAQ,CAACL,gBAAgB,CAAC,OAAD,EAAUG,eAAe,CAACO,KAAD,CAAzB,CAAjB,CAAR;AAEA,eAAO,IAAP;AACH;AAT4B;AAUhC;;AAxBwB,CAA7B;AA2BA,eAAe,IAAIK,eAAJ,EAAf","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport OrderQuery from 'Query/Order.query';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { getOrderList } from 'Store/Order/Order.action';\nimport { fetchQuery, getErrorMessage } from 'Util/Request';\n\n/** @namespace Store/Order/Dispatcher */\nexport class OrderDispatcher {\n    requestOrders(dispatch) {\n        const query = OrderQuery.getOrderListQuery();\n\n        return fetchQuery(query).then(\n            /** @namespace Store/Order/Dispatcher/requestOrdersFetchQueryThen */\n            ({ getOrderList: orders }) => {\n                dispatch(getOrderList(orders, false));\n            },\n            /** @namespace Store/Order/Dispatcher/requestOrdersFetchQueryError */\n            (error) => dispatch(showNotification('error', getErrorMessage(error)))\n        );\n    }\n\n    async getOrderById(dispatch, id) {\n        try {\n            const { getOrderById: result } = await fetchQuery(OrderQuery.getOrderByIdQuery(id));\n\n            return result;\n        } catch (error) {\n            dispatch(showNotification('error', getErrorMessage(error)));\n\n            return null;\n        }\n    }\n}\n\nexport default new OrderDispatcher();\n"]},"metadata":{},"sourceType":"module"}