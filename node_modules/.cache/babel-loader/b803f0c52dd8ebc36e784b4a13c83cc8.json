{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/component/NewVersionPopup/NewVersionPopup.component.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport Popup from \"/home/arturs/scandiweb/extension/src/component/Popup\";\nimport { NEW_VERSION_POPUP_ID } from \"./NewVersionPopup.config\";\nimport \"./NewVersionPopup.style\";\n/** #namespace Component/NewVersionPopup/Component */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const NewVersionPopup = Mosaic.middleware((_temp = _class = class NewVersionPopup_ extends Mosaic.Extensible(PureComponent) {\n  renderHeading() {\n    return /*#__PURE__*/_checkBEM(React, \"h3\", {\n      block: \"NewVersionPopup\",\n      elem: \"Heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }\n    }, __('New version available!'));\n  }\n\n  renderNotice() {\n    return /*#__PURE__*/_checkBEM(React, \"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }, __('We have updated the website. Reload is required to apply changes.'));\n  }\n\n  renderReloadThePageButton() {\n    const {\n      toggleNewVersion\n    } = this.props;\n    return /*#__PURE__*/_checkBEM(React, \"button\", {\n      block: \"NewVersionPopup\",\n      elem: \"ReloadButton\",\n      mix: {\n        block: 'Button'\n      },\n      onClick: toggleNewVersion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }, __('Reload the page'));\n  }\n\n  renderDismissButton() {\n    const {\n      handleDismiss\n    } = this.props;\n    return /*#__PURE__*/_checkBEM(React, \"button\", {\n      block: \"Button\",\n      elem: \"isLikeLink\",\n      mix: {\n        block: 'NewVersionPopup',\n        elem: 'DismissButton'\n      },\n      onClick: handleDismiss,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, __('Dismiss'));\n  }\n\n  renderButtons() {\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: \"NewVersionPopup\",\n      elem: \"Buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, this.renderReloadThePageButton(), this.renderDismissButton());\n  }\n\n  renderContent() {\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: \"NewVersionPopup\",\n      elem: \"Content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, this.renderHeading(), this.renderNotice(), this.renderButtons());\n  }\n\n  render() {\n    return /*#__PURE__*/_checkBEM(React, Popup, {\n      id: NEW_VERSION_POPUP_ID,\n      clickOutside: false,\n      mix: {\n        block: 'NewVersionPopup'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }, this.renderContent());\n  }\n\n}, _class.propTypes = {\n  toggleNewVersion: PropTypes.func.isRequired,\n  handleDismiss: PropTypes.func.isRequired\n}, _temp), \"Component/NewVersionPopup/Component\");\nexport default NewVersionPopup;","map":{"version":3,"sources":["/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/component/NewVersionPopup/NewVersionPopup.component.js"],"names":["PropTypes","PureComponent","Popup","NEW_VERSION_POPUP_ID","renderHeading","__","renderNotice","renderReloadThePageButton","toggleNewVersion","props","block","renderDismissButton","handleDismiss","elem","renderButtons","renderContent","render","propTypes","func","isRequired","NewVersionPopup"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,aAAT,QAA8B,OAA9B;AAEA,OAAOC,KAAP;AAEA,SAASC,oBAAT;AAEA;AAEA;;;;AACA,oHAAqCF,aAArC,EAAmD;AAM/CG,EAAAA,aAAa,GAAG;AACZ;AAEM,MAAA,KAAK,EAAC,iBAFZ;AAGM,MAAA,IAAI,EAAC,SAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKUC,EAAE,CAAC,wBAAD,CALZ;AAQH;;AAEDC,EAAAA,YAAY,GAAG;AACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEUD,EAAE,CAAC,mEAAD,CAFZ;AAKH;;AAEDE,EAAAA,yBAAyB,GAAG;AACxB,UAAM;AAAEC,MAAAA;AAAF,QAAuB,KAAKC,KAAlC;AAEA;AAEM,MAAA,KAAK,EAAC,iBAFZ;AAGM,MAAA,IAAI,EAAC,cAHX;AAIM,MAAA,GAAG,EAAG;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAJZ;AAKM,MAAA,OAAO,EAAGF,gBALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOUH,EAAE,CAAC,iBAAD,CAPZ;AAUH;;AAEDM,EAAAA,mBAAmB,GAAG;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAoB,KAAKH,KAA/B;AAEA;AAEM,MAAA,KAAK,EAAC,QAFZ;AAGM,MAAA,IAAI,EAAC,YAHX;AAIM,MAAA,GAAG,EAAG;AAAEC,QAAAA,KAAK,EAAE,iBAAT;AAA4BG,QAAAA,IAAI,EAAE;AAAlC,OAJZ;AAKM,MAAA,OAAO,EAAGD,aALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOUP,EAAE,CAAC,SAAD,CAPZ;AAUH;;AAEDS,EAAAA,aAAa,GAAG;AACZ;AACS,MAAA,KAAK,EAAC,iBADf;AACiC,MAAA,IAAI,EAAC,SADtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEU,KAAKP,yBAAL,EAFV,EAGU,KAAKI,mBAAL,EAHV;AAMH;;AAEDI,EAAAA,aAAa,GAAG;AACZ;AACS,MAAA,KAAK,EAAC,iBADf;AACiC,MAAA,IAAI,EAAC,SADtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEU,KAAKX,aAAL,EAFV,EAGU,KAAKE,YAAL,EAHV,EAIU,KAAKQ,aAAL,EAJV;AAOH;;AAEDE,EAAAA,MAAM,GAAG;AACL,yCACK,KADL;AAEM,MAAA,EAAE,EAAGb,oBAFX;AAGM,MAAA,YAAY,EAAG,KAHrB;AAIM,MAAA,GAAG,EAAG;AAAEO,QAAAA,KAAK,EAAE;AAAT,OAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMU,KAAKK,aAAL,EANV;AASH;;AApF8C,CAAnD,SACWE,SADX,GACuB;AACfT,EAAAA,gBAAgB,EAAER,SAAS,CAACkB,IAAV,CAAeC,UADlB;AAEfP,EAAAA,aAAa,EAAEZ,SAAS,CAACkB,IAAV,CAAeC;AAFf,CADvB;AAuFA,eAAeC,eAAf","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport Popup from 'Component/Popup';\n\nimport { NEW_VERSION_POPUP_ID } from './NewVersionPopup.config';\n\nimport './NewVersionPopup.style';\n\n/** @namespace Component/NewVersionPopup/Component */\nexport class NewVersionPopup extends PureComponent {\n    static propTypes = {\n        toggleNewVersion: PropTypes.func.isRequired,\n        handleDismiss: PropTypes.func.isRequired\n    };\n\n    renderHeading() {\n        return (\n            <h3\n              block=\"NewVersionPopup\"\n              elem=\"Heading\"\n            >\n                { __('New version available!') }\n            </h3>\n        );\n    }\n\n    renderNotice() {\n        return (\n            <p>\n                { __('We have updated the website. Reload is required to apply changes.') }\n            </p>\n        );\n    }\n\n    renderReloadThePageButton() {\n        const { toggleNewVersion } = this.props;\n\n        return (\n            <button\n              block=\"NewVersionPopup\"\n              elem=\"ReloadButton\"\n              mix={ { block: 'Button' } }\n              onClick={ toggleNewVersion }\n            >\n                { __('Reload the page') }\n            </button>\n        );\n    }\n\n    renderDismissButton() {\n        const { handleDismiss } = this.props;\n\n        return (\n            <button\n              block=\"Button\"\n              elem=\"isLikeLink\"\n              mix={ { block: 'NewVersionPopup', elem: 'DismissButton' } }\n              onClick={ handleDismiss }\n            >\n                { __('Dismiss') }\n            </button>\n        );\n    }\n\n    renderButtons() {\n        return (\n            <div block=\"NewVersionPopup\" elem=\"Buttons\">\n                { this.renderReloadThePageButton() }\n                { this.renderDismissButton() }\n            </div>\n        );\n    }\n\n    renderContent() {\n        return (\n            <div block=\"NewVersionPopup\" elem=\"Content\">\n                { this.renderHeading() }\n                { this.renderNotice() }\n                { this.renderButtons() }\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Popup\n              id={ NEW_VERSION_POPUP_ID }\n              clickOutside={ false }\n              mix={ { block: 'NewVersionPopup' } }\n            >\n                { this.renderContent() }\n            </Popup>\n        );\n    }\n}\n\nexport default NewVersionPopup;\n"]},"metadata":{},"sourceType":"module"}