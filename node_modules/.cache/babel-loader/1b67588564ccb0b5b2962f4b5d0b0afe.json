{"ast":null,"code":"/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport ReviewQuery from \"/home/arturs/scandiweb/scandipwa/src/query/Review.query\";\nimport { showNotification } from \"/home/arturs/scandiweb/scandipwa/src/store/Notification/Notification.action\";\nimport { fetchMutation } from \"/home/arturs/scandiweb/scandipwa/src/util/Request\";\n/**\n * Product Review Dispatcher\n * @class WishlistDispatcher\n * #namespace Store/Review/Dispatcher\n */\n\nexport const ReviewDispatcher = Mosaic.middleware(class ReviewDispatcher_ extends Mosaic.Extensible() {\n  prepareReviewData(reviewItem) {\n    const {\n      rating_data,\n      product_sku,\n      detail,\n      title,\n      nickname\n    } = reviewItem;\n    return {\n      nickname,\n      sku: product_sku,\n      summary: title,\n      text: detail,\n      ratings: Object.keys(rating_data).map(function (key) {\n        return {\n          id: key,\n          value_id: rating_data[key]\n        };\n      })\n    };\n  }\n\n  submitProductReview(dispatch, options) {\n    return fetchMutation(ReviewQuery.getAddProductReviewMutation(this.prepareReviewData(options))).then(\n    /** #namespace Store/Review/Dispatcher/submitProductReviewFetchMutationThen */\n    Mosaic.middleware(function () {\n      return dispatch(showNotification('success', 'You submitted your review for moderation.'));\n    }, \"Store/Review/Dispatcher/submitProductReviewFetchMutationThen\"),\n    /** #namespace Store/Review/Dispatcher/submitProductReviewFetchMutationError */\n    Mosaic.middleware(function () {\n      return dispatch(showNotification('error', __('Error submitting review!')));\n    }, \"Store/Review/Dispatcher/submitProductReviewFetchMutationError\"));\n  }\n\n}, \"Store/Review/Dispatcher\");\nexport default new ReviewDispatcher();","map":{"version":3,"sources":["/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/store/Review/Review.dispatcher.js"],"names":["ReviewQuery","showNotification","fetchMutation","prepareReviewData","reviewItem","rating_data","product_sku","detail","title","nickname","sku","summary","text","ratings","Object","keys","map","key","id","value_id","submitProductReview","dispatch","options","getAddProductReviewMutation","then","__","ReviewDispatcher"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,WAAP;AACA,SAASC,gBAAT;AACA,SAASC,aAAT;AAEA;AACA;AACA;AACA;AACA;;AACA,sGAA8B;AAC1BC,EAAAA,iBAAiB,CAACC,UAAD,EAAa;AAC1B,UAAM;AACFC,MAAAA,WADE;AAEFC,MAAAA,WAFE;AAGFC,MAAAA,MAHE;AAIFC,MAAAA,KAJE;AAKFC,MAAAA;AALE,QAMFL,UANJ;AAQA,WAAO;AACHK,MAAAA,QADG;AAEHC,MAAAA,GAAG,EAAEJ,WAFF;AAGHK,MAAAA,OAAO,EAAEH,KAHN;AAIHI,MAAAA,IAAI,EAAEL,MAJH;AAKHM,MAAAA,OAAO,EAAEC,MAAM,CAACC,IAAP,CAAYV,WAAZ,EAAyBW,GAAzB,CACL,UAACC,GAAD;AAAA,eAAU;AACNC,UAAAA,EAAE,EAAED,GADE;AAENE,UAAAA,QAAQ,EAAEd,WAAW,CAACY,GAAD;AAFf,SAAV;AAAA,OADK;AALN,KAAP;AAYH;;AAEDG,EAAAA,mBAAmB,CAACC,QAAD,EAAWC,OAAX,EAAoB;AACnC,WAAOpB,aAAa,CAACF,WAAW,CAACuB,2BAAZ,CACjB,KAAKpB,iBAAL,CAAuBmB,OAAvB,CADiB,CAAD,CAAb,CAEJE,IAFI;AAGH;AAHG,sBAIH;AAAA,aAAMH,QAAQ,CAACpB,gBAAgB,CAAC,SAAD,EAAY,2CAAZ,CAAjB,CAAd;AAAA,KAJG;AAKH;AALG,sBAMH;AAAA,aAAMoB,QAAQ,CAACpB,gBAAgB,CAAC,OAAD,EAAUwB,EAAE,CAAC,0BAAD,CAAZ,CAAjB,CAAd;AAAA,KANG,mEAAP;AAQH;;AAjCyB,CAA9B;AAoCA,eAAe,IAAIC,gBAAJ,EAAf","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport ReviewQuery from 'Query/Review.query';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { fetchMutation } from 'Util/Request';\n\n/**\n * Product Review Dispatcher\n * @class WishlistDispatcher\n * @namespace Store/Review/Dispatcher\n */\nexport class ReviewDispatcher {\n    prepareReviewData(reviewItem) {\n        const {\n            rating_data,\n            product_sku,\n            detail,\n            title,\n            nickname\n        } = reviewItem;\n\n        return {\n            nickname,\n            sku: product_sku,\n            summary: title,\n            text: detail,\n            ratings: Object.keys(rating_data).map(\n                (key) => ({\n                    id: key,\n                    value_id: rating_data[key]\n                })\n            )\n        };\n    }\n\n    submitProductReview(dispatch, options) {\n        return fetchMutation(ReviewQuery.getAddProductReviewMutation(\n            this.prepareReviewData(options)\n        )).then(\n            /** @namespace Store/Review/Dispatcher/submitProductReviewFetchMutationThen */\n            () => dispatch(showNotification('success', 'You submitted your review for moderation.')),\n            /** @namespace Store/Review/Dispatcher/submitProductReviewFetchMutationError */\n            () => dispatch(showNotification('error', __('Error submitting review!')))\n        );\n    }\n}\n\nexport default new ReviewDispatcher();\n"]},"metadata":{},"sourceType":"module"}