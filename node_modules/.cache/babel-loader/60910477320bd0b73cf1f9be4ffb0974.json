{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/route/ConfirmAccountPage/ConfirmAccountPage.container.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { ERROR_TYPE } from \"/home/arturs/scandiweb/extension/src/component/Notification/Notification.config\";\nimport { updateMeta } from \"/home/arturs/scandiweb/extension/src/store/Meta/Meta.action\";\nimport { showNotification } from \"/home/arturs/scandiweb/extension/src/store/Notification/Notification.action\";\nimport { LocationType } from \"/home/arturs/scandiweb/extension/src/type/Router\";\nimport { convertQueryStringToKeyValuePairs } from \"/home/arturs/scandiweb/extension/src/util/Url\";\nimport ConfirmAccountPage from \"./ConfirmAccountPage.component\";\nexport const BreadcrumbsDispatcher = import(\n/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n\"/home/arturs/scandiweb/extension/src/store/Breadcrumbs/Breadcrumbs.dispatcher\");\nexport const MyAccountDispatcher = import(\n/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n\"/home/arturs/scandiweb/extension/src/store/MyAccount/MyAccount.dispatcher\");\n/** #namespace Route/ConfirmAccountPage/Container/mapStateToProps */\n\nexport const mapStateToProps = Mosaic.middleware(function () {\n  return {};\n}, \"Route/ConfirmAccountPage/Container/mapStateToProps\");\n/** #namespace Route/ConfirmAccountPage/Container/mapDispatchToProps */\n\nexport const mapDispatchToProps = Mosaic.middleware(function (dispatch) {\n  return {\n    updateBreadcrumbs: function (breadcrumbs) {\n      BreadcrumbsDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.update(breadcrumbs, dispatch);\n      });\n    },\n    updateMeta: function (meta) {\n      return dispatch(updateMeta(meta));\n    },\n    confirmAccount: function (options) {\n      return MyAccountDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.confirmAccount(options, dispatch);\n      });\n    },\n    showNotification: function (type, message) {\n      return dispatch(showNotification(type, message));\n    },\n    signIn: function (options) {\n      return MyAccountDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.signIn(options, dispatch);\n      });\n    }\n  };\n}, \"Route/ConfirmAccountPage/Container/mapDispatchToProps\");\n/** #namespace Route/ConfirmAccountPage/Container */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const ConfirmAccountPageContainer = Mosaic.middleware((_temp = _class = class ConfirmAccountPageContainer_ extends Mosaic.Extensible(PureComponent) {\n  constructor(...args) {\n    super(...args);\n    this.containerFunctions = {\n      onConfirmAttempt: this.onConfirmAttempt.bind(this),\n      onConfirmSuccess: this.onConfirmSuccess.bind(this),\n      onFormError: this.onFormError.bind(this)\n    };\n  }\n\n  __construct(props) {\n    super.__construct(props);\n\n    this.state = {\n      redirect: false,\n      isLoading: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      updateMeta\n    } = this.props;\n    updateMeta({\n      title: __('Confirm account')\n    });\n\n    this._updateBreadcrumbs();\n  }\n\n  onConfirmAttempt() {\n    this.setState({\n      isLoading: true\n    });\n  }\n\n  onConfirmSuccess(fields) {\n    var _this = this;\n\n    const {\n      location: {\n        search\n      },\n      confirmAccount,\n      signIn\n    } = this.props;\n    const {\n      password\n    } = fields;\n    const options = convertQueryStringToKeyValuePairs(search);\n    const {\n      email\n    } = options;\n    confirmAccount({ ...options,\n      password\n    }).then(\n    /** #namespace Route/ConfirmAccountPage/Container/confirmAccountThen */\n    Mosaic.middleware(function (data) {\n      const {\n        msgType\n      } = data || {};\n\n      if (msgType === ERROR_TYPE) {\n        // error message is handled in the dispatcher\n        // just abort the chain\n        return Promise.reject();\n      }\n\n      return signIn({\n        email,\n        password\n      });\n    }, \"Route/ConfirmAccountPage/Container/confirmAccountThen\")).then(\n    /** #namespace Route/ConfirmAccountPage/Container/confirmAccountThenThen */\n    Mosaic.middleware(function () {\n      return _this.setState({\n        redirect: true\n      });\n    }, \"Route/ConfirmAccountPage/Container/confirmAccountThenThen\")).catch(\n    /** #namespace Route/ConfirmAccountPage/Container/confirmAccountThenThenCatch */\n    Mosaic.middleware(function () {\n      return _this.setState({\n        isLoading: false\n      });\n    }, \"Route/ConfirmAccountPage/Container/confirmAccountThenThenCatch\"));\n  }\n\n  onFormError() {\n    this.setState({\n      isLoading: false\n    });\n  }\n\n  _updateBreadcrumbs() {\n    const {\n      updateBreadcrumbs\n    } = this.props;\n    const breadcrumbs = [{\n      url: '/account/confirmAccount',\n      name: __('Confirm Account')\n    }];\n    updateBreadcrumbs(breadcrumbs);\n  }\n\n  render() {\n    return /*#__PURE__*/_checkBEM(React, ConfirmAccountPage, Object.assign({}, this.props, this.containerFunctions, this.state, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}, _class.propTypes = {\n  location: LocationType.isRequired,\n  signIn: PropTypes.func.isRequired,\n  updateMeta: PropTypes.func.isRequired,\n  confirmAccount: PropTypes.func.isRequired,\n  showNotification: PropTypes.func.isRequired,\n  updateBreadcrumbs: PropTypes.func.isRequired\n}, _temp), \"Route/ConfirmAccountPage/Container\");\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmAccountPageContainer);","map":{"version":3,"sources":["/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/route/ConfirmAccountPage/ConfirmAccountPage.container.js"],"names":["PropTypes","PureComponent","connect","ERROR_TYPE","updateMeta","showNotification","LocationType","convertQueryStringToKeyValuePairs","ConfirmAccountPage","BreadcrumbsDispatcher","MyAccountDispatcher","mapStateToProps","mapDispatchToProps","dispatch","updateBreadcrumbs","breadcrumbs","then","default","dispatcher","update","meta","confirmAccount","options","type","message","signIn","containerFunctions","onConfirmAttempt","bind","onConfirmSuccess","onFormError","__construct","props","state","redirect","isLoading","componentDidMount","title","__","_updateBreadcrumbs","setState","fields","location","search","password","email","data","msgType","Promise","reject","catch","url","name","render","propTypes","isRequired","func","ConfirmAccountPageContainer"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport { ERROR_TYPE } from 'Component/Notification/Notification.config';\nimport { updateMeta } from 'Store/Meta/Meta.action';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { LocationType } from 'Type/Router';\nimport { convertQueryStringToKeyValuePairs } from 'Util/Url';\n\nimport ConfirmAccountPage from './ConfirmAccountPage.component';\n\nexport const BreadcrumbsDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Breadcrumbs/Breadcrumbs.dispatcher'\n);\nexport const MyAccountDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/MyAccount/MyAccount.dispatcher'\n);\n\n/** @namespace Route/ConfirmAccountPage/Container/mapStateToProps */\nexport const mapStateToProps = () => ({});\n\n/** @namespace Route/ConfirmAccountPage/Container/mapDispatchToProps */\nexport const mapDispatchToProps = (dispatch) => ({\n    updateBreadcrumbs: (breadcrumbs) => {\n        BreadcrumbsDispatcher.then(\n            ({ default: dispatcher }) => dispatcher.update(breadcrumbs, dispatch)\n        );\n    },\n    updateMeta: (meta) => dispatch(updateMeta(meta)),\n    confirmAccount: (options) => MyAccountDispatcher.then(\n        ({ default: dispatcher }) => dispatcher.confirmAccount(options, dispatch)\n    ),\n    showNotification: (type, message) => dispatch(showNotification(type, message)),\n    signIn: (options) => MyAccountDispatcher.then(\n        ({ default: dispatcher }) => dispatcher.signIn(options, dispatch)\n    )\n});\n\n/** @namespace Route/ConfirmAccountPage/Container */\nexport class ConfirmAccountPageContainer extends PureComponent {\n    static propTypes = {\n        location: LocationType.isRequired,\n        signIn: PropTypes.func.isRequired,\n        updateMeta: PropTypes.func.isRequired,\n        confirmAccount: PropTypes.func.isRequired,\n        showNotification: PropTypes.func.isRequired,\n        updateBreadcrumbs: PropTypes.func.isRequired\n    };\n\n    containerFunctions = {\n        onConfirmAttempt: this.onConfirmAttempt.bind(this),\n        onConfirmSuccess: this.onConfirmSuccess.bind(this),\n        onFormError: this.onFormError.bind(this)\n    };\n\n    __construct(props) {\n        super.__construct(props);\n\n        this.state = {\n            redirect: false,\n            isLoading: false\n        };\n    }\n\n    componentDidMount() {\n        const { updateMeta } = this.props;\n        updateMeta({ title: __('Confirm account') });\n\n        this._updateBreadcrumbs();\n    }\n\n    onConfirmAttempt() {\n        this.setState({ isLoading: true });\n    }\n\n    onConfirmSuccess(fields) {\n        const {\n            location: { search },\n            confirmAccount,\n            signIn\n        } = this.props;\n\n        const { password } = fields;\n\n        const options = convertQueryStringToKeyValuePairs(search);\n        const { email } = options;\n\n        confirmAccount({ ...options, password })\n            .then(\n                /** @namespace Route/ConfirmAccountPage/Container/confirmAccountThen */\n                (data) => {\n                    const { msgType } = data || {};\n\n                    if (msgType === ERROR_TYPE) {\n                        // error message is handled in the dispatcher\n                        // just abort the chain\n                        return Promise.reject();\n                    }\n\n                    return signIn({ email, password });\n                }\n            )\n            .then(\n                /** @namespace Route/ConfirmAccountPage/Container/confirmAccountThenThen */\n                () => this.setState({ redirect: true })\n            )\n            .catch(\n                /** @namespace Route/ConfirmAccountPage/Container/confirmAccountThenThenCatch */\n                () => this.setState({ isLoading: false })\n            );\n    }\n\n    onFormError() {\n        this.setState({ isLoading: false });\n    }\n\n    _updateBreadcrumbs() {\n        const { updateBreadcrumbs } = this.props;\n        const breadcrumbs = [\n            {\n                url: '/account/confirmAccount',\n                name: __('Confirm Account')\n            }\n        ];\n\n        updateBreadcrumbs(breadcrumbs);\n    }\n\n    render() {\n        return (\n            <ConfirmAccountPage\n              { ...this.props }\n              { ...this.containerFunctions }\n              { ...this.state }\n            />\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmAccountPageContainer);\n"]},"metadata":{},"sourceType":"module"}