{"ast":null,"code":"var _class, _temp;\n\n/* eslint-disable react/require-render-return */\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { DeviceType } from \"/home/arturs/scandiweb/extension/src/type/Device\";\nimport { isSignedIn } from \"/home/arturs/scandiweb/extension/src/util/Auth\";\nimport { isScrollDisabled, toggleScroll } from \"/home/arturs/scandiweb/extension/src/util/Browser\";\nimport history from \"/home/arturs/scandiweb/extension/src/util/History\";\nimport { appendWithStoreCode } from \"/home/arturs/scandiweb/extension/src/util/Url\";\nimport { DEFAULT_STATE_NAME } from \"./NavigationAbstract.config\";\nexport const DEFAULT_STATE = {\n  name: DEFAULT_STATE_NAME\n};\n/** #namespace Component/NavigationAbstract/Container/mapStateToProps */\n\nexport const mapStateToProps = Mosaic.middleware(function (state) {\n  return {\n    device: state.ConfigReducer.device\n  };\n}, \"Component/NavigationAbstract/Container/mapStateToProps\");\n/** #namespace Component/NavigationAbstract/Container/mapDispatchToProps */\n// eslint-disable-next-line no-unused-vars\n\nexport const mapDispatchToProps = Mosaic.middleware(function (dispatch) {\n  return {};\n}, \"Component/NavigationAbstract/Container/mapDispatchToProps\");\n/** #namespace Component/NavigationAbstract/Container */\n\nexport const NavigationAbstractContainer = Mosaic.middleware((_temp = _class = class NavigationAbstractContainer_ extends Mosaic.Extensible(PureComponent) {\n  constructor(...args) {\n    super(...args);\n    this.default_state = DEFAULT_STATE;\n    this.routeMap = {\n      '/': this.default_state\n    };\n    this.state = {\n      prevPathname: ''\n    };\n  }\n\n  componentDidMount() {\n    var _this = this;\n\n    const {\n      setNavigationState\n    } = this.props;\n    setNavigationState(this.getNavigationState());\n    history.listen(function (history) {\n      _this.handlePageScroll();\n\n      _this.setState(_this.onRouteChanged(history));\n    });\n  }\n\n  onRouteChanged(history) {\n    const {\n      device\n    } = this.props; // check if token is expired and logout\n\n    isSignedIn();\n\n    if (!device.isMobile) {\n      return this.handleDesktopRouteChange(history);\n    }\n\n    return this.handleMobileUrlChange(history);\n  }\n\n  getNavigationState() {\n    const {\n      pathname\n    } = location;\n    const activeRoute = Object.keys(this.routeMap).find(function (route) {\n      return (route !== '/' || pathname === appendWithStoreCode('/') || pathname === '/') && pathname.includes(route);\n    });\n    return this.routeMap[activeRoute] || this.default_state;\n  }\n\n  goToDefaultHeaderState() {\n    const {\n      setNavigationState\n    } = this.props;\n    const state = this.getNavigationState();\n    setNavigationState(state);\n  }\n\n  handleMobileUrlChange(history) {\n    const {\n      prevPathname\n    } = this.state;\n    const {\n      pathname\n    } = history;\n\n    if (prevPathname === pathname) {\n      return {};\n    }\n\n    return this.handleMobileRouteChange(history);\n  }\n\n  handleMobileRouteChange(history) {\n    const {\n      // hideActiveOverlay,\n      setNavigationState,\n      navigationState: {\n        name\n      }\n    } = this.props;\n    const {\n      pathname\n    } = history; // Find the new state name\n\n    const newNavigationState = this.getNavigationState(); // Update the state if new name is set\n\n    if (name !== newNavigationState.name) {\n      setNavigationState(newNavigationState);\n    } // hideActiveOverlay();\n\n\n    return {\n      prevPathname: pathname\n    };\n  }\n\n  handleDesktopRouteChange() {\n    const {\n      hideActiveOverlay,\n      setNavigationState\n    } = this.props;\n    setNavigationState(this.routeMap['/']);\n    hideActiveOverlay();\n    return {};\n  }\n\n  handlePageScroll() {\n    if (isScrollDisabled()) {\n      toggleScroll(true);\n    }\n  }\n\n  render() {\n    throw new Error('Please re-define a \"render\" method.');\n  }\n\n}, _class.propTypes = {\n  setNavigationState: PropTypes.func.isRequired,\n  hideActiveOverlay: PropTypes.func.isRequired,\n  // eslint-disable-next-line react/no-unused-prop-types\n  navigationState: PropTypes.object.isRequired,\n  device: DeviceType.isRequired\n}, _temp), \"Component/NavigationAbstract/Container\");\nexport default connect(mapStateToProps, mapDispatchToProps)(NavigationAbstractContainer);","map":{"version":3,"sources":["/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/component/NavigationAbstract/NavigationAbstract.container.js"],"names":["PropTypes","PureComponent","connect","DeviceType","isSignedIn","isScrollDisabled","toggleScroll","history","appendWithStoreCode","DEFAULT_STATE_NAME","DEFAULT_STATE","name","mapStateToProps","state","device","ConfigReducer","mapDispatchToProps","dispatch","default_state","routeMap","prevPathname","componentDidMount","setNavigationState","props","getNavigationState","listen","handlePageScroll","setState","onRouteChanged","isMobile","handleDesktopRouteChange","handleMobileUrlChange","pathname","location","activeRoute","Object","keys","find","route","includes","goToDefaultHeaderState","handleMobileRouteChange","navigationState","newNavigationState","hideActiveOverlay","render","Error","propTypes","func","isRequired","object","NavigationAbstractContainer"],"mappings":"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","sourcesContent":["/* eslint-disable react/require-render-return */\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport { DeviceType } from 'Type/Device';\nimport { isSignedIn } from 'Util/Auth';\nimport { isScrollDisabled, toggleScroll } from 'Util/Browser';\nimport history from 'Util/History';\nimport { appendWithStoreCode } from 'Util/Url';\n\nimport { DEFAULT_STATE_NAME } from './NavigationAbstract.config';\n\nexport const DEFAULT_STATE = { name: DEFAULT_STATE_NAME };\n\n/** @namespace Component/NavigationAbstract/Container/mapStateToProps */\nexport const mapStateToProps = (state) => ({\n    device: state.ConfigReducer.device\n});\n\n/** @namespace Component/NavigationAbstract/Container/mapDispatchToProps */\n// eslint-disable-next-line no-unused-vars\nexport const mapDispatchToProps = (dispatch) => ({});\n\n/** @namespace Component/NavigationAbstract/Container */\nexport class NavigationAbstractContainer extends PureComponent {\n    static propTypes = {\n        setNavigationState: PropTypes.func.isRequired,\n        hideActiveOverlay: PropTypes.func.isRequired,\n        // eslint-disable-next-line react/no-unused-prop-types\n        navigationState: PropTypes.object.isRequired,\n        device: DeviceType.isRequired\n    };\n\n    default_state = DEFAULT_STATE;\n\n    routeMap = {\n        '/': this.default_state\n    };\n\n    state = {\n        prevPathname: ''\n    };\n\n    componentDidMount() {\n        const { setNavigationState } = this.props;\n        setNavigationState(this.getNavigationState());\n        history.listen((history) => {\n            this.handlePageScroll();\n            this.setState(this.onRouteChanged(history));\n        });\n    }\n\n    onRouteChanged(history) {\n        const { device } = this.props;\n\n        // check if token is expired and logout\n        isSignedIn();\n\n        if (!device.isMobile) {\n            return this.handleDesktopRouteChange(history);\n        }\n\n        return this.handleMobileUrlChange(history);\n    }\n\n    getNavigationState() {\n        const { pathname } = location;\n\n        const activeRoute = Object.keys(this.routeMap)\n            .find((route) => (\n                route !== '/'\n                || pathname === appendWithStoreCode('/')\n                || pathname === '/'\n            ) && pathname.includes(route));\n\n        return this.routeMap[activeRoute] || this.default_state;\n    }\n\n    goToDefaultHeaderState() {\n        const { setNavigationState } = this.props;\n        const state = this.getNavigationState();\n\n        setNavigationState(state);\n    }\n\n    handleMobileUrlChange(history) {\n        const { prevPathname } = this.state;\n        const { pathname } = history;\n\n        if (prevPathname === pathname) {\n            return {};\n        }\n\n        return this.handleMobileRouteChange(history);\n    }\n\n    handleMobileRouteChange(history) {\n        const {\n            // hideActiveOverlay,\n            setNavigationState,\n            navigationState: { name }\n        } = this.props;\n\n        const { pathname } = history;\n\n        // Find the new state name\n        const newNavigationState = this.getNavigationState();\n\n        // Update the state if new name is set\n        if (name !== newNavigationState.name) {\n            setNavigationState(newNavigationState);\n        }\n\n        // hideActiveOverlay();\n\n        return { prevPathname: pathname };\n    }\n\n    handleDesktopRouteChange() {\n        const {\n            hideActiveOverlay,\n            setNavigationState\n        } = this.props;\n\n        setNavigationState(this.routeMap['/']);\n        hideActiveOverlay();\n\n        return {};\n    }\n\n    handlePageScroll() {\n        if (isScrollDisabled()) {\n            toggleScroll(true);\n        }\n    }\n\n    render() {\n        throw new Error('Please re-define a \"render\" method.');\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavigationAbstractContainer);\n"]},"metadata":{},"sourceType":"module"}