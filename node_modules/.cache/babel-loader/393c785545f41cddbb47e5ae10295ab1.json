{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/component/ProductCustomizableOption/ProductCustomizableOption.component.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport ExpandableContent from \"/home/arturs/scandiweb/extension/src/component/ExpandableContent\";\nimport Field from \"/home/arturs/scandiweb/extension/src/component/Field\";\nimport { AREA_FIELD, CHECKBOX, DROPDOWN, FILE, TEXT_FIELD } from \"./ProductCustomizableOption.config\";\n/** #namespace Component/ProductCustomizableOption/Component */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const ProductCustomizableOption = Mosaic.middleware((_temp = _class = class ProductCustomizableOption_ extends Mosaic.Extensible(PureComponent) {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n    this.renderMap = {\n      [CHECKBOX]: {\n        render: function () {\n          return _this.renderCheckboxValues();\n        },\n        title: function () {\n          return _this.renderTitle();\n        }\n      },\n      [DROPDOWN]: {\n        render: function () {\n          return _this.renderDropdownValues();\n        },\n        title: function () {\n          return _this.renderTitle();\n        }\n      },\n      [TEXT_FIELD]: {\n        render: function () {\n          return _this.renderTextField();\n        },\n        title: function () {\n          return _this.renderTextFieldTitle();\n        }\n      },\n      [AREA_FIELD]: {\n        render: function () {\n          return _this.renderTextField();\n        },\n        title: function () {\n          return _this.renderTextFieldTitle();\n        }\n      },\n      [FILE]: {\n        render: function () {\n          return _this.renderFileField();\n        },\n        title: function () {\n          return _this.renderTextFieldTitle();\n        }\n      }\n    };\n\n    this.renderOptionCheckboxValue = function (item) {\n      const {\n        getSelectedCheckboxValue,\n        renderOptionLabel\n      } = _this.props;\n      const {\n        option_type_id,\n        title,\n        price,\n        priceInclTax,\n        price_type,\n        currency\n      } = item;\n      const priceLabel = renderOptionLabel(price_type, priceInclTax, price, currency);\n      return /*#__PURE__*/_checkBEM(React, Field, {\n        type: \"checkbox\",\n        label: _this.renderHeading(title, priceLabel),\n        key: option_type_id,\n        id: `option-${option_type_id}`,\n        name: `option-${option_type_id}`,\n        value: option_type_id,\n        onChange: getSelectedCheckboxValue,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }\n      });\n    };\n  }\n\n  renderRequired(isRequired) {\n    const {\n      requiredSelected\n    } = this.props; // skip undefined and false\n\n    if (isRequired !== true || requiredSelected) {\n      return null;\n    }\n\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: \"ProductCustomizableOptions\",\n      elem: \"Required\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, __('This field is required!'));\n  }\n\n  renderHeading(mainTitle, titleBold) {\n    return /*#__PURE__*/_checkBEM(React, React.Fragment, null, /*#__PURE__*/_checkBEM(React, \"span\", {\n      block: \"ProductCustomizableOptions\",\n      elem: \"Heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, `${mainTitle} `), /*#__PURE__*/_checkBEM(React, \"span\", {\n      block: \"ProductCustomizableOptions\",\n      elem: \"HeadingBold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, titleBold));\n  }\n\n  renderOptionDropdownValues(values) {\n    const {\n      getDropdownOptions,\n      selectedDropdownValue,\n      setDropdownValue\n    } = this.props;\n    const dropdownOptions = getDropdownOptions(values);\n    return /*#__PURE__*/_checkBEM(React, Field, {\n      id: \"customizable-options-dropdown\",\n      name: \"customizable-options-dropdown\",\n      type: \"select\",\n      mix: {\n        block: 'CustomizableOptions',\n        elem: 'Select'\n      },\n      placeholder: __('Choose Option'),\n      selectOptions: dropdownOptions,\n      value: selectedDropdownValue,\n      onChange: setDropdownValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    });\n  }\n\n  renderMaxCharacters(max_characters) {\n    if (max_characters <= 0) {\n      return null;\n    }\n\n    return /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: \"ProductCustomizableOptions\",\n      elem: \"Information\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }\n    }, __('Maximum %s characters', max_characters));\n  }\n\n  renderCheckboxValues() {\n    const {\n      option: {\n        required,\n        data\n      }\n    } = this.props;\n    return /*#__PURE__*/_checkBEM(React, React.Fragment, null, data.map(this.renderOptionCheckboxValue), this.renderRequired(required));\n  }\n\n  renderDropdownValues() {\n    const {\n      option: {\n        required,\n        data\n      }\n    } = this.props;\n    return /*#__PURE__*/_checkBEM(React, React.Fragment, null, this.renderOptionDropdownValues(data), this.renderRequired(required));\n  }\n\n  renderTextField() {\n    const {\n      option: {\n        required,\n        data\n      },\n      updateTextFieldValue,\n      textValue,\n      optionType,\n      textFieldValid\n    } = this.props;\n    const [{\n      max_characters = 0\n    }] = data;\n    const fieldType = optionType === 'field' ? 'text' : 'textarea';\n    return /*#__PURE__*/_checkBEM(React, React.Fragment, null, /*#__PURE__*/_checkBEM(React, Field, {\n      id: `customizable-options-${optionType}`,\n      name: `customizable-options-${optionType}`,\n      type: fieldType,\n      maxLength: max_characters > 0 ? max_characters : null,\n      value: textValue,\n      onChange: updateTextFieldValue,\n      customValidationStatus: textFieldValid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }\n    }), this.renderRequired(required), this.renderMaxCharacters(max_characters));\n  }\n\n  renderFileField() {\n    const {\n      optionType,\n      processFileUpload,\n      option: {\n        required,\n        data: [{\n          file_extension = ''\n        }] = []\n      } = {}\n    } = this.props;\n    return /*#__PURE__*/_checkBEM(React, React.Fragment, null, /*#__PURE__*/_checkBEM(React, Field, {\n      id: `customizable-options-${optionType}`,\n      name: `customizable-options-${optionType}`,\n      type: \"file\",\n      onChange: processFileUpload,\n      fileExtensions: file_extension,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }\n    }), this.renderRequired(required));\n  }\n\n  renderTitle() {\n    const {\n      option\n    } = this.props;\n    const {\n      title\n    } = option;\n    return title;\n  }\n\n  renderTextFieldTitle() {\n    const {\n      renderOptionLabel,\n      option: {\n        title,\n        data: [{\n          price_type = 'FIXED',\n          price = 0,\n          priceInclTax,\n          currency\n        } = {}] = []\n      }\n    } = this.props;\n    const priceLabel = renderOptionLabel(price_type, priceInclTax, price, currency);\n    return this.renderHeading(title, priceLabel);\n  }\n\n  render() {\n    const {\n      option: {\n        option_id\n      },\n      optionType\n    } = this.props;\n    const optionRenderMap = this.renderMap[optionType];\n\n    if (!optionRenderMap) {\n      return null;\n    }\n\n    const {\n      render,\n      title\n    } = optionRenderMap;\n    return /*#__PURE__*/_checkBEM(React, ExpandableContent, {\n      heading: title(),\n      mix: {\n        block: 'ProductCustomizableOptions',\n        elem: 'Content'\n      },\n      key: option_id,\n      isContentExpanded: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 13\n      }\n    }, render());\n  }\n\n}, _class.propTypes = {\n  option: PropTypes.object.isRequired,\n  textValue: PropTypes.string.isRequired,\n  getSelectedCheckboxValue: PropTypes.func.isRequired,\n  renderOptionLabel: PropTypes.func.isRequired,\n  updateTextFieldValue: PropTypes.func.isRequired,\n  textFieldValid: PropTypes.bool,\n  processFileUpload: PropTypes.func,\n  setDropdownValue: PropTypes.func.isRequired,\n  selectedDropdownValue: PropTypes.number.isRequired,\n  optionType: PropTypes.string.isRequired,\n  getDropdownOptions: PropTypes.func.isRequired,\n  requiredSelected: PropTypes.bool.isRequired\n}, _class.defaultProps = {\n  processFileUpload: function () {},\n  textFieldValid: null\n}, _temp), \"Component/ProductCustomizableOption/Component\");\nexport default ProductCustomizableOption;","map":{"version":3,"sources":["/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/component/ProductCustomizableOption/ProductCustomizableOption.component.js"],"names":["PropTypes","PureComponent","ExpandableContent","Field","AREA_FIELD","CHECKBOX","DROPDOWN","FILE","TEXT_FIELD","renderMap","render","renderCheckboxValues","title","renderTitle","renderDropdownValues","renderTextField","renderTextFieldTitle","renderFileField","renderOptionCheckboxValue","item","getSelectedCheckboxValue","renderOptionLabel","props","option_type_id","price","priceInclTax","price_type","currency","priceLabel","renderHeading","renderRequired","isRequired","requiredSelected","__","mainTitle","titleBold","renderOptionDropdownValues","values","getDropdownOptions","selectedDropdownValue","setDropdownValue","dropdownOptions","block","elem","renderMaxCharacters","max_characters","option","required","data","map","updateTextFieldValue","textValue","optionType","textFieldValid","fieldType","processFileUpload","file_extension","option_id","optionRenderMap","propTypes","object","string","func","bool","number","defaultProps","ProductCustomizableOption"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport ExpandableContent from 'Component/ExpandableContent';\nimport Field from 'Component/Field';\n\nimport {\n    AREA_FIELD, CHECKBOX, DROPDOWN, FILE, TEXT_FIELD\n} from './ProductCustomizableOption.config';\n\n/** @namespace Component/ProductCustomizableOption/Component */\nexport class ProductCustomizableOption extends PureComponent {\n    static propTypes = {\n        option: PropTypes.object.isRequired,\n        textValue: PropTypes.string.isRequired,\n        getSelectedCheckboxValue: PropTypes.func.isRequired,\n        renderOptionLabel: PropTypes.func.isRequired,\n        updateTextFieldValue: PropTypes.func.isRequired,\n        textFieldValid: PropTypes.bool,\n        processFileUpload: PropTypes.func,\n        setDropdownValue: PropTypes.func.isRequired,\n        selectedDropdownValue: PropTypes.number.isRequired,\n        optionType: PropTypes.string.isRequired,\n        getDropdownOptions: PropTypes.func.isRequired,\n        requiredSelected: PropTypes.bool.isRequired\n    };\n\n    static defaultProps = {\n        processFileUpload: () => {},\n        textFieldValid: null\n    };\n\n    renderMap = {\n        [CHECKBOX]: {\n            render: () => this.renderCheckboxValues(),\n            title: () => this.renderTitle()\n        },\n        [DROPDOWN]: {\n            render: () => this.renderDropdownValues(),\n            title: () => this.renderTitle()\n        },\n        [TEXT_FIELD]: {\n            render: () => this.renderTextField(),\n            title: () => this.renderTextFieldTitle()\n        },\n        [AREA_FIELD]: {\n            render: () => this.renderTextField(),\n            title: () => this.renderTextFieldTitle()\n        },\n        [FILE]: {\n            render: () => this.renderFileField(),\n            title: () => this.renderTextFieldTitle()\n        }\n    };\n\n    renderRequired(isRequired) {\n        const { requiredSelected } = this.props;\n\n        // skip undefined and false\n        if (isRequired !== true || requiredSelected) {\n            return null;\n        }\n\n        return (\n            <div\n              block=\"ProductCustomizableOptions\"\n              elem=\"Required\"\n            >\n                { __('This field is required!') }\n            </div>\n        );\n    }\n\n    renderHeading(mainTitle, titleBold) {\n        return (\n            <>\n                <span\n                  block=\"ProductCustomizableOptions\"\n                  elem=\"Heading\"\n                >\n                    { `${ mainTitle } ` }\n                </span>\n                <span\n                  block=\"ProductCustomizableOptions\"\n                  elem=\"HeadingBold\"\n                >\n                    { titleBold }\n                </span>\n            </>\n        );\n    }\n\n    renderOptionCheckboxValue = (item) => {\n        const { getSelectedCheckboxValue, renderOptionLabel } = this.props;\n        const {\n            option_type_id,\n            title,\n            price,\n            priceInclTax,\n            price_type,\n            currency\n        } = item;\n\n        const priceLabel = renderOptionLabel(price_type, priceInclTax, price, currency);\n\n        return (\n            <Field\n              type=\"checkbox\"\n              label={ this.renderHeading(title, priceLabel) }\n              key={ option_type_id }\n              id={ `option-${ option_type_id }` }\n              name={ `option-${ option_type_id }` }\n              value={ option_type_id }\n              onChange={ getSelectedCheckboxValue }\n            />\n        );\n    };\n\n    renderOptionDropdownValues(values) {\n        const {\n            getDropdownOptions,\n            selectedDropdownValue,\n            setDropdownValue\n        } = this.props;\n        const dropdownOptions = getDropdownOptions(values);\n\n        return (\n            <Field\n              id=\"customizable-options-dropdown\"\n              name=\"customizable-options-dropdown\"\n              type=\"select\"\n              mix={ { block: 'CustomizableOptions', elem: 'Select' } }\n              placeholder={ __('Choose Option') }\n              selectOptions={ dropdownOptions }\n              value={ selectedDropdownValue }\n              onChange={ setDropdownValue }\n            />\n        );\n    }\n\n    renderMaxCharacters(max_characters) {\n        if (max_characters <= 0) {\n            return null;\n        }\n\n        return (\n            <div\n              block=\"ProductCustomizableOptions\"\n              elem=\"Information\"\n            >\n                { __('Maximum %s characters', max_characters) }\n            </div>\n        );\n    }\n\n    renderCheckboxValues() {\n        const { option: { required, data } } = this.props;\n\n        return (\n            <>\n                { data.map(this.renderOptionCheckboxValue) }\n                { this.renderRequired(required) }\n            </>\n        );\n    }\n\n    renderDropdownValues() {\n        const { option: { required, data } } = this.props;\n\n        return (\n            <>\n                { this.renderOptionDropdownValues(data) }\n                { this.renderRequired(required) }\n            </>\n        );\n    }\n\n    renderTextField() {\n        const {\n            option: {\n                required,\n                data\n            },\n            updateTextFieldValue,\n            textValue,\n            optionType,\n            textFieldValid\n        } = this.props;\n        const [{ max_characters = 0 }] = data;\n        const fieldType = optionType === 'field' ? 'text' : 'textarea';\n\n        return (\n            <>\n                <Field\n                  id={ `customizable-options-${ optionType }` }\n                  name={ `customizable-options-${ optionType }` }\n                  type={ fieldType }\n                  maxLength={ max_characters > 0 ? max_characters : null }\n                  value={ textValue }\n                  onChange={ updateTextFieldValue }\n                  customValidationStatus={ textFieldValid }\n                />\n                { this.renderRequired(required) }\n                { this.renderMaxCharacters(max_characters) }\n            </>\n        );\n    }\n\n    renderFileField() {\n        const {\n            optionType,\n            processFileUpload,\n            option: {\n                required,\n                data: [{ file_extension = '' }] = []\n            } = {}\n        } = this.props;\n\n        return (\n            <>\n                <Field\n                  id={ `customizable-options-${ optionType }` }\n                  name={ `customizable-options-${ optionType }` }\n                  type=\"file\"\n                  onChange={ processFileUpload }\n                  fileExtensions={ file_extension }\n                />\n                { this.renderRequired(required) }\n            </>\n        );\n    }\n\n    renderTitle() {\n        const { option } = this.props;\n        const { title } = option;\n\n        return title;\n    }\n\n    renderTextFieldTitle() {\n        const {\n            renderOptionLabel,\n            option: {\n                title,\n                data: [\n                    {\n                        price_type = 'FIXED',\n                        price = 0,\n                        priceInclTax,\n                        currency\n                    } = {}\n                ] = []\n            }\n        } = this.props;\n\n        const priceLabel = renderOptionLabel(price_type, priceInclTax, price, currency);\n\n        return this.renderHeading(title, priceLabel);\n    }\n\n    render() {\n        const {\n            option: {\n                option_id\n            },\n            optionType\n        } = this.props;\n\n        const optionRenderMap = this.renderMap[optionType];\n\n        if (!optionRenderMap) {\n            return null;\n        }\n\n        const { render, title } = optionRenderMap;\n\n        return (\n            <ExpandableContent\n              heading={ title() }\n              mix={ { block: 'ProductCustomizableOptions', elem: 'Content' } }\n              key={ option_id }\n              isContentExpanded\n            >\n                { render() }\n            </ExpandableContent>\n        );\n    }\n}\n\nexport default ProductCustomizableOption;\n"]},"metadata":{},"sourceType":"module"}