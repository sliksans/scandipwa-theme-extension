{"ast":null,"code":"import _asyncToGenerator from \"/home/arturs/scandiweb/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _class,\n    _temp,\n    _jsxFileName = \"/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/component/CheckoutAddressForm/CheckoutAddressForm.component.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport FormPortal from \"/home/arturs/scandiweb/scandipwa/src/component/FormPortal\";\nimport MyAccountAddressForm from \"/home/arturs/scandiweb/scandipwa/src/component/MyAccountAddressForm/MyAccountAddressForm.component\";\nimport { getCityAndRegionFromZipcode } from \"/home/arturs/scandiweb/scandipwa/src/util/Address\";\nimport { debounce } from \"/home/arturs/scandiweb/scandipwa/src/util/Request\";\nimport { UPDATE_STATE_FREQUENCY } from \"./CheckoutAddressForm.config\";\n/** #namespace Component/CheckoutAddressForm/Component */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const CheckoutAddressForm = Mosaic.middleware((_temp = _class = class CheckoutAddressForm_ extends Mosaic.Extensible(MyAccountAddressForm) {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n    this.onChange = debounce(function (key, value) {\n      _this.setState(function () {\n        return {\n          [key]: value\n        };\n      });\n    }, UPDATE_STATE_FREQUENCY);\n\n    this.onZipcodeChange = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (e) {\n        const {\n          value\n        } = e.currentTarget;\n        const {\n          countryId,\n          availableRegions\n        } = _this.state;\n        const [city, regionCode] = yield getCityAndRegionFromZipcode(countryId, value);\n\n        if (city) {\n          _this.setState({\n            city\n          });\n        }\n\n        if (availableRegions.length > 0 && regionCode) {\n          const {\n            id: regionId\n          } = availableRegions.find(function (r) {\n            return r.code.toUpperCase() === regionCode.toUpperCase();\n          });\n\n          if (regionId) {\n            _this.setState({\n              regionId\n            });\n          }\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  __construct(props) {\n    super.__construct(props);\n\n    const {\n      address: {\n        region: {\n          region = ''\n        } = {}\n      }\n    } = this.props; // TODO: get from region data\n\n    this.state = { ...this.state,\n      region,\n      city: '',\n      postcode: ''\n    };\n    this.estimateShipping();\n  }\n\n  componentDidUpdate(_, prevState) {\n    const {\n      countryId,\n      regionId,\n      region,\n      city,\n      postcode\n    } = this.state;\n    const {\n      countryId: prevCountryId,\n      regionId: prevRegionId,\n      region: prevRegion,\n      city: prevCity,\n      postcode: prevpostcode\n    } = prevState;\n\n    if (countryId !== prevCountryId || regionId !== prevRegionId || city !== prevCity || region !== prevRegion || postcode !== prevpostcode) {\n      this.estimateShipping();\n    }\n  }\n\n  estimateShipping() {\n    const {\n      onShippingEstimationFieldsChange\n    } = this.props;\n    const {\n      countryId,\n      regionId,\n      region,\n      city,\n      postcode\n    } = this.state;\n    onShippingEstimationFieldsChange({\n      country_id: countryId,\n      region_id: regionId,\n      region,\n      city,\n      postcode\n    });\n  }\n\n  get fieldMap() {\n    var _this2 = this;\n\n    // country_id, region, region_id, city - are used for shipping estimation\n    const {\n      shippingFields\n    } = this.props;\n    const {\n      default_billing,\n      default_shipping,\n      city,\n      postcode,\n      vat_id,\n      ...fieldMap\n    } = super.fieldMap;\n    fieldMap.city = { ...city,\n      onChange: function (value) {\n        return _this2.onChange('city', value);\n      },\n      value: this.state.city\n    };\n    fieldMap.postcode = { ...postcode,\n      onChange: function (value) {\n        return _this2.onChange('postcode', value);\n      },\n      onBlur: this.onZipcodeChange\n    }; // since object doesn't maintain the order of it's properties\n    // and last modified property goes to the end of the property list,\n    // move vat_id after postcode\n\n    if (vat_id) {\n      fieldMap.vat_id = vat_id;\n    } // Preserve values from global state\n\n\n    Object.entries(fieldMap).forEach(function ([key]) {\n      if (Object.hasOwnProperty.call(shippingFields, key)) {\n        fieldMap[key].value = shippingFields[key]; // Handle setting dropdown/input depending on regions existance\n\n        if (key === 'country_id') {\n          _this2.handleInitialCountryValue(shippingFields[key]);\n        }\n      }\n    });\n    return fieldMap;\n  }\n\n  handleInitialCountryValue(initialValue) {\n    if (this.handledInitialCountry) {\n      return;\n    }\n\n    this.onCountryChange(initialValue);\n    this.handledInitialCountry = true;\n  }\n\n  getRegionFields() {\n    var _this3 = this;\n\n    const {\n      regionDisplayAll\n    } = this.props;\n    const regionFieldData = super.getRegionFields();\n\n    if (!regionDisplayAll && !regionFieldData) {\n      return null;\n    }\n\n    const {\n      region_string\n    } = regionFieldData;\n\n    if (region_string) {\n      regionFieldData.region_string.onChange = function (v) {\n        return _this3.onChange('region', v);\n      };\n    }\n\n    return regionFieldData;\n  }\n\n  render() {\n    const {\n      id\n    } = this.props;\n    return /*#__PURE__*/_checkBEM(React, FormPortal, {\n      id: id,\n      name: \"CheckoutAddressForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/_checkBEM(React, \"div\", {\n      block: \"FieldForm\",\n      mix: {\n        block: 'CheckoutAddressForm'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }\n    }, this.renderFields()));\n  }\n\n}, _class.propTypes = { ...MyAccountAddressForm.propTypes,\n  id: PropTypes.string.isRequired,\n  onShippingEstimationFieldsChange: PropTypes.func\n}, _class.defaultProps = { ...MyAccountAddressForm.defaultProps,\n  onShippingEstimationFieldsChange: function () {}\n}, _temp), \"Component/CheckoutAddressForm/Component\");\nexport default CheckoutAddressForm;","map":{"version":3,"sources":["/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/component/CheckoutAddressForm/CheckoutAddressForm.component.js"],"names":["PropTypes","FormPortal","MyAccountAddressForm","getCityAndRegionFromZipcode","debounce","UPDATE_STATE_FREQUENCY","onChange","key","value","setState","onZipcodeChange","e","currentTarget","countryId","availableRegions","state","city","regionCode","length","id","regionId","find","r","code","toUpperCase","__construct","props","address","region","postcode","estimateShipping","componentDidUpdate","_","prevState","prevCountryId","prevRegionId","prevRegion","prevCity","prevpostcode","onShippingEstimationFieldsChange","country_id","region_id","fieldMap","shippingFields","default_billing","default_shipping","vat_id","onBlur","Object","entries","forEach","hasOwnProperty","call","handleInitialCountryValue","initialValue","handledInitialCountry","onCountryChange","getRegionFields","regionDisplayAll","regionFieldData","region_string","v","render","block","renderFields","propTypes","string","isRequired","func","defaultProps","CheckoutAddressForm"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\n\nimport FormPortal from 'Component/FormPortal';\nimport MyAccountAddressForm from 'Component/MyAccountAddressForm/MyAccountAddressForm.component';\nimport { getCityAndRegionFromZipcode } from 'Util/Address';\nimport { debounce } from 'Util/Request';\n\nimport { UPDATE_STATE_FREQUENCY } from './CheckoutAddressForm.config';\n\n/** @namespace Component/CheckoutAddressForm/Component */\nexport class CheckoutAddressForm extends MyAccountAddressForm {\n    static propTypes = {\n        ...MyAccountAddressForm.propTypes,\n        id: PropTypes.string.isRequired,\n        onShippingEstimationFieldsChange: PropTypes.func\n    };\n\n    static defaultProps = {\n        ...MyAccountAddressForm.defaultProps,\n        onShippingEstimationFieldsChange: () => {}\n    };\n\n    onChange = debounce((key, value) => {\n        this.setState(() => ({ [key]: value }));\n    }, UPDATE_STATE_FREQUENCY);\n\n    __construct(props) {\n        super.__construct(props);\n\n        const {\n            address: { region: { region = '' } = {} }\n        } = this.props;\n\n        // TODO: get from region data\n        this.state = {\n            ...this.state,\n            region,\n            city: '',\n            postcode: ''\n        };\n\n        this.estimateShipping();\n    }\n\n    componentDidUpdate(_, prevState) {\n        const {\n            countryId,\n            regionId,\n            region,\n            city,\n            postcode\n        } = this.state;\n\n        const {\n            countryId: prevCountryId,\n            regionId: prevRegionId,\n            region: prevRegion,\n            city: prevCity,\n            postcode: prevpostcode\n        } = prevState;\n\n        if (\n            countryId !== prevCountryId\n            || regionId !== prevRegionId\n            || city !== prevCity\n            || region !== prevRegion\n            || postcode !== prevpostcode\n        ) {\n            this.estimateShipping();\n        }\n    }\n\n    estimateShipping() {\n        const { onShippingEstimationFieldsChange } = this.props;\n\n        const {\n            countryId,\n            regionId,\n            region,\n            city,\n            postcode\n        } = this.state;\n\n        onShippingEstimationFieldsChange({\n            country_id: countryId,\n            region_id: regionId,\n            region,\n            city,\n            postcode\n        });\n    }\n\n    onZipcodeChange = async (e) => {\n        const { value } = e.currentTarget;\n        const { countryId, availableRegions } = this.state;\n\n        const [city, regionCode] = await getCityAndRegionFromZipcode(countryId, value);\n        if (city) {\n            this.setState({\n                city\n            });\n        }\n\n        if (availableRegions.length > 0 && regionCode) {\n            const { id: regionId } = availableRegions\n                .find((r) => r.code.toUpperCase() === regionCode.toUpperCase());\n\n            if (regionId) {\n                this.setState({ regionId });\n            }\n        }\n    };\n\n    get fieldMap() {\n        // country_id, region, region_id, city - are used for shipping estimation\n        const { shippingFields } = this.props;\n\n        const {\n            default_billing,\n            default_shipping,\n            city,\n            postcode,\n            vat_id,\n            ...fieldMap\n        } = super.fieldMap;\n\n        fieldMap.city = {\n            ...city,\n            onChange: (value) => this.onChange('city', value),\n            value: this.state.city\n        };\n\n        fieldMap.postcode = {\n            ...postcode,\n            onChange: (value) => this.onChange('postcode', value),\n            onBlur: this.onZipcodeChange\n        };\n\n        // since object doesn't maintain the order of it's properties\n        // and last modified property goes to the end of the property list,\n        // move vat_id after postcode\n        if (vat_id) {\n            fieldMap.vat_id = vat_id;\n        }\n\n        // Preserve values from global state\n        Object.entries(fieldMap).forEach(([key]) => {\n            if (Object.hasOwnProperty.call(shippingFields, key)) {\n                fieldMap[key].value = shippingFields[key];\n\n                // Handle setting dropdown/input depending on regions existance\n                if (key === 'country_id') {\n                    this.handleInitialCountryValue(shippingFields[key]);\n                }\n            }\n        });\n\n        return fieldMap;\n    }\n\n    handleInitialCountryValue(initialValue) {\n        if (this.handledInitialCountry) {\n            return;\n        }\n\n        this.onCountryChange(initialValue);\n        this.handledInitialCountry = true;\n    }\n\n    getRegionFields() {\n        const { regionDisplayAll } = this.props;\n        const regionFieldData = super.getRegionFields();\n\n        if (!regionDisplayAll && !regionFieldData) {\n            return null;\n        }\n\n        const { region_string } = regionFieldData;\n\n        if (region_string) {\n            regionFieldData.region_string.onChange = (v) => this.onChange('region', v);\n        }\n\n        return regionFieldData;\n    }\n\n    render() {\n        const { id } = this.props;\n\n        return (\n            <FormPortal\n              id={ id }\n              name=\"CheckoutAddressForm\"\n            >\n                <div\n                  block=\"FieldForm\"\n                  mix={ { block: 'CheckoutAddressForm' } }\n                >\n                    { this.renderFields() }\n                </div>\n            </FormPortal>\n        );\n    }\n}\n\nexport default CheckoutAddressForm;\n"]},"metadata":{},"sourceType":"module"}