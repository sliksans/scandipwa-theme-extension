{"ast":null,"code":"import _asyncToGenerator from \"/home/arturs/scandiweb/extension/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport CartQuery from \"/home/arturs/scandiweb/extension/src/query/Cart.query\";\nimport { updateTotals } from \"/home/arturs/scandiweb/extension/src/store/Cart/Cart.action\";\nimport { showNotification } from \"/home/arturs/scandiweb/extension/src/store/Notification/Notification.action\";\nimport { isSignedIn } from \"/home/arturs/scandiweb/extension/src/util/Auth\";\nimport { getGuestQuoteId, setGuestQuoteId } from \"/home/arturs/scandiweb/extension/src/util/Cart\";\nimport { getExtensionAttributes } from \"/home/arturs/scandiweb/extension/src/util/Product\";\nimport { fetchMutation, fetchQuery, getErrorMessage } from \"/home/arturs/scandiweb/extension/src/util/Request\";\nexport const LinkedProductsDispatcher = import(\n/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n\"/home/arturs/scandiweb/extension/src/store/LinkedProducts/LinkedProducts.dispatcher\");\n/**\n * Product Cart Dispatcher\n * @class CartDispatcher\n * #namespace Store/Cart/Dispatcher\n */\n\nexport const CartDispatcher = Mosaic.middleware(class CartDispatcher_ extends Mosaic.Extensible() {\n  updateInitialCartData(dispatch) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // Need to get current cart from BE, update cart\n      try {\n        // ! Get quote token first (local or from the backend) just to make sure it exists\n        const quoteId = yield _this._getGuestQuoteId(dispatch);\n        const {\n          cartData = {}\n        } = yield fetchQuery(CartQuery.getCartQuery(!isSignedIn() && quoteId));\n        return _this._updateCartData(cartData, dispatch);\n      } catch (error) {\n        return _this.createGuestEmptyCart(dispatch);\n      }\n    })();\n  }\n\n  createGuestEmptyCart(dispatch) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const {\n          createEmptyCart: quoteId = ''\n        } = yield fetchMutation(CartQuery.getCreateEmptyCartMutation());\n        setGuestQuoteId(quoteId);\n\n        _this2._updateCartData({}, dispatch);\n\n        return quoteId;\n      } catch (error) {\n        dispatch(showNotification('error', getErrorMessage(error)));\n        return null;\n      }\n    })();\n  }\n\n  mergeCarts(sourceCartId, destinationCartId, dispatch) {\n    return _asyncToGenerator(function* () {\n      try {\n        const {\n          mergeCarts: {\n            id = ''\n          } = {}\n        } = yield fetchMutation(CartQuery.getMergeCartQuery(sourceCartId, destinationCartId));\n        return id;\n      } catch (error) {\n        dispatch(showNotification('error', getErrorMessage(error)));\n        return null;\n      }\n    })();\n  }\n\n  resetGuestCart(dispatch) {\n    return this._updateCartData({}, dispatch);\n  }\n\n  changeItemQty(dispatch, options) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        item_id,\n        quantity,\n        sku\n      } = options;\n\n      try {\n        const isCustomerSignedIn = isSignedIn();\n        const guestQuoteId = !isCustomerSignedIn && getGuestQuoteId();\n\n        if (!isCustomerSignedIn && !guestQuoteId) {\n          return Promise.reject();\n        }\n\n        const {\n          saveCartItem: {\n            cartData = {}\n          } = {}\n        } = yield fetchMutation(CartQuery.getSaveCartItemMutation({\n          sku,\n          item_id,\n          quantity\n        }, guestQuoteId));\n        return _this3._updateCartData(cartData, dispatch);\n      } catch (error) {\n        dispatch(showNotification('error', getErrorMessage(error)));\n        return Promise.reject();\n      }\n    })();\n  }\n\n  addProductToCart(dispatch, options) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        product,\n        quantity,\n        productOptionsData,\n        buyRequest\n      } = options;\n      const {\n        sku,\n        type_id: product_type\n      } = product;\n      const {\n        productOptions,\n        productOptionsMulti,\n        downloadableLinks\n      } = productOptionsData || {};\n      const productToAdd = {\n        sku,\n        product_type,\n        quantity,\n        product_option: {\n          buy_request: buyRequest,\n          extension_attributes: getExtensionAttributes({ ...product,\n            productOptions,\n            productOptionsMulti,\n            downloadableLinks\n          })\n        }\n      };\n\n      if (_this4._canBeAdded(options)) {\n        try {\n          const isCustomerSignedIn = isSignedIn();\n          const guestQuoteId = !isCustomerSignedIn && getGuestQuoteId();\n\n          if (!isCustomerSignedIn && !guestQuoteId) {\n            return Promise.reject();\n          }\n\n          const {\n            saveCartItem: {\n              cartData = {}\n            } = {}\n          } = yield fetchMutation(CartQuery.getSaveCartItemMutation(productToAdd, guestQuoteId));\n          return _this4._updateCartData(cartData, dispatch);\n        } catch (error) {\n          dispatch(showNotification('error', getErrorMessage(error)));\n          return Promise.reject();\n        }\n      }\n\n      return Promise.reject();\n    })();\n  }\n\n  removeProductFromCart(dispatch, item_id) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const isCustomerSignedIn = isSignedIn();\n        const guestQuoteId = !isCustomerSignedIn && getGuestQuoteId();\n\n        if (!isCustomerSignedIn && !guestQuoteId) {\n          return null;\n        }\n\n        const {\n          removeCartItem: {\n            cartData = {}\n          } = {}\n        } = yield fetchMutation(CartQuery.getRemoveCartItemMutation(item_id, guestQuoteId));\n\n        _this5._updateCartData(cartData, dispatch);\n\n        return cartData;\n      } catch (error) {\n        dispatch(showNotification('error', getErrorMessage(error)));\n        return null;\n      }\n    })();\n  }\n\n  applyCouponToCart(dispatch, couponCode) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const isCustomerSignedIn = isSignedIn();\n        const guestQuoteId = !isCustomerSignedIn && getGuestQuoteId();\n\n        if (!isCustomerSignedIn && !guestQuoteId) {\n          return;\n        }\n\n        const {\n          applyCoupon: {\n            cartData = {}\n          } = {}\n        } = yield fetchMutation(CartQuery.getApplyCouponMutation(couponCode, guestQuoteId));\n\n        _this6._updateCartData(cartData, dispatch);\n\n        dispatch(showNotification('success', __('Coupon was applied!')));\n      } catch (error) {\n        dispatch(showNotification('error', getErrorMessage(error)));\n      }\n    })();\n  }\n\n  removeCouponFromCart(dispatch) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const isCustomerSignedIn = isSignedIn();\n        const guestQuoteId = !isCustomerSignedIn && getGuestQuoteId();\n\n        if (!isCustomerSignedIn && !guestQuoteId) {\n          return;\n        }\n\n        const {\n          removeCoupon: {\n            cartData = {}\n          } = {}\n        } = yield fetchMutation(CartQuery.getRemoveCouponMutation(guestQuoteId));\n\n        _this7._updateCartData(cartData, dispatch);\n\n        dispatch(showNotification('success', __('Coupon was removed!')));\n      } catch (error) {\n        dispatch(showNotification('error', getErrorMessage(error)));\n      }\n    })();\n  }\n\n  updateCrossSellProducts(items, dispatch) {\n    if (items && items.length) {\n      const product_links = items.reduce(function (links, product) {\n        const {\n          product: {\n            product_links,\n            variants = []\n          },\n          sku: variantSku\n        } = product;\n        const {\n          product_links: childProductLinks\n        } = variants.find(function ({\n          sku\n        }) {\n          return sku === variantSku;\n        }) || {};\n\n        if (childProductLinks) {\n          Object.values(childProductLinks).filter(function ({\n            link_type\n          }) {\n            return link_type === 'crosssell';\n          }).map(function (item) {\n            return links.push(item);\n          });\n        }\n\n        if (product_links) {\n          Object.values(product_links).filter(function ({\n            link_type\n          }) {\n            return link_type === 'crosssell';\n          }).map(function (item) {\n            return links.push(item);\n          });\n        }\n\n        return links;\n      }, []);\n\n      if (product_links.length !== 0) {\n        LinkedProductsDispatcher.then(function ({\n          default: dispatcher\n        }) {\n          return dispatcher.fetchCrossSellProducts(dispatch, product_links);\n        });\n      } else {\n        LinkedProductsDispatcher.then(function ({\n          default: dispatcher\n        }) {\n          return dispatcher.clearCrossSellProducts(dispatch);\n        });\n      }\n    } else {\n      LinkedProductsDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.clearCrossSellProducts(dispatch);\n      });\n    }\n  }\n\n  _updateCartData(cartData, dispatch) {\n    dispatch(updateTotals(cartData));\n  }\n  /**\n   * @param {*} attribute\n   * @param {*} product\n   */\n\n\n  _getProductAttribute(attribute, product) {\n    const {\n      variants,\n      configurableVariantIndex,\n      [attribute]: attributeValue\n    } = product;\n    return configurableVariantIndex >= 0 ? variants[configurableVariantIndex][attribute] : attributeValue;\n  }\n  /**\n   * Check if it is allowed to add product to cart\n   * @param {Object} options Cart options\n   * @return {Boolean} Indicates is allowed or not\n   * @memberof CartDispatcher\n   */\n\n\n  _canBeAdded(options) {\n    if (options.product && options.quantity && options.product.quantity + options.quantity < 1) {\n      return false;\n    }\n\n    if (options.quantity === 0) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Get quote id. If quote id is missing, fetch it from the BE.\n   * @param Dispatch dispatch\n   * @return string quote id\n   */\n\n\n  _getGuestQuoteId(dispatch) {\n    const guestQuoteId = getGuestQuoteId();\n\n    if (guestQuoteId) {\n      return guestQuoteId;\n    }\n\n    return this.createGuestEmptyCart(dispatch);\n  }\n\n}, \"Store/Cart/Dispatcher\");\nexport default new CartDispatcher();","map":{"version":3,"sources":["/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/store/Cart/Cart.dispatcher.js"],"names":["CartQuery","updateTotals","showNotification","isSignedIn","getGuestQuoteId","setGuestQuoteId","getExtensionAttributes","fetchMutation","fetchQuery","getErrorMessage","LinkedProductsDispatcher","updateInitialCartData","dispatch","quoteId","_getGuestQuoteId","cartData","getCartQuery","_updateCartData","error","createGuestEmptyCart","createEmptyCart","getCreateEmptyCartMutation","mergeCarts","sourceCartId","destinationCartId","id","getMergeCartQuery","resetGuestCart","changeItemQty","options","item_id","quantity","sku","isCustomerSignedIn","guestQuoteId","Promise","reject","saveCartItem","getSaveCartItemMutation","addProductToCart","product","productOptionsData","buyRequest","type_id","product_type","productOptions","productOptionsMulti","downloadableLinks","productToAdd","product_option","buy_request","extension_attributes","_canBeAdded","removeProductFromCart","removeCartItem","getRemoveCartItemMutation","applyCouponToCart","couponCode","applyCoupon","getApplyCouponMutation","__","removeCouponFromCart","removeCoupon","getRemoveCouponMutation","updateCrossSellProducts","items","length","product_links","reduce","links","variants","variantSku","childProductLinks","find","Object","values","filter","link_type","map","item","push","then","default","dispatcher","fetchCrossSellProducts","clearCrossSellProducts","_getProductAttribute","attribute","configurableVariantIndex","attributeValue","CartDispatcher"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport CartQuery from 'Query/Cart.query';\nimport { updateTotals } from 'Store/Cart/Cart.action';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { isSignedIn } from 'Util/Auth';\nimport { getGuestQuoteId, setGuestQuoteId } from 'Util/Cart';\nimport { getExtensionAttributes } from 'Util/Product';\nimport { fetchMutation, fetchQuery, getErrorMessage } from 'Util/Request';\n\nexport const LinkedProductsDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/LinkedProducts/LinkedProducts.dispatcher'\n);\n\n/**\n * Product Cart Dispatcher\n * @class CartDispatcher\n * @namespace Store/Cart/Dispatcher\n */\nexport class CartDispatcher {\n    async updateInitialCartData(dispatch) {\n        // Need to get current cart from BE, update cart\n        try {\n            // ! Get quote token first (local or from the backend) just to make sure it exists\n            const quoteId = await this._getGuestQuoteId(dispatch);\n            const { cartData = {} } = await fetchQuery(\n                CartQuery.getCartQuery(\n                    !isSignedIn() && quoteId\n                )\n            );\n\n            return this._updateCartData(cartData, dispatch);\n        } catch (error) {\n            return this.createGuestEmptyCart(dispatch);\n        }\n    }\n\n    async createGuestEmptyCart(dispatch) {\n        try {\n            const {\n                createEmptyCart: quoteId = ''\n            } = await fetchMutation(CartQuery.getCreateEmptyCartMutation());\n\n            setGuestQuoteId(quoteId);\n            this._updateCartData({}, dispatch);\n            return quoteId;\n        } catch (error) {\n            dispatch(showNotification('error', getErrorMessage(error)));\n            return null;\n        }\n    }\n\n    async mergeCarts(sourceCartId, destinationCartId, dispatch) {\n        try {\n            const {\n                mergeCarts: {\n                    id = ''\n                } = {}\n            } = await fetchMutation(\n                CartQuery.getMergeCartQuery(sourceCartId, destinationCartId)\n            );\n\n            return id;\n        } catch (error) {\n            dispatch(showNotification('error', getErrorMessage(error)));\n            return null;\n        }\n    }\n\n    resetGuestCart(dispatch) {\n        return this._updateCartData({}, dispatch);\n    }\n\n    async changeItemQty(dispatch, options) {\n        const { item_id, quantity, sku } = options;\n\n        try {\n            const isCustomerSignedIn = isSignedIn();\n            const guestQuoteId = !isCustomerSignedIn && getGuestQuoteId();\n\n            if (!isCustomerSignedIn && !guestQuoteId) {\n                return Promise.reject();\n            }\n\n            const { saveCartItem: { cartData = {} } = {} } = await fetchMutation(\n                CartQuery.getSaveCartItemMutation(\n                    { sku, item_id, quantity },\n                    guestQuoteId\n                )\n            );\n\n            return this._updateCartData(cartData, dispatch);\n        } catch (error) {\n            dispatch(showNotification('error', getErrorMessage(error)));\n            return Promise.reject();\n        }\n    }\n\n    async addProductToCart(dispatch, options) {\n        const {\n            product,\n            quantity,\n            productOptionsData,\n            buyRequest\n        } = options;\n\n        const {\n            sku,\n            type_id: product_type\n        } = product;\n\n        const {\n            productOptions,\n            productOptionsMulti,\n            downloadableLinks\n        } = productOptionsData || {};\n\n        const productToAdd = {\n            sku,\n            product_type,\n            quantity,\n            product_option: {\n                buy_request: buyRequest,\n                extension_attributes: getExtensionAttributes(\n                    {\n                        ...product,\n                        productOptions,\n                        productOptionsMulti,\n                        downloadableLinks\n                    }\n                )\n            }\n        };\n\n        if (this._canBeAdded(options)) {\n            try {\n                const isCustomerSignedIn = isSignedIn();\n                const guestQuoteId = !isCustomerSignedIn && getGuestQuoteId();\n\n                if (!isCustomerSignedIn && !guestQuoteId) {\n                    return Promise.reject();\n                }\n\n                const { saveCartItem: { cartData = {} } = {} } = await fetchMutation(\n                    CartQuery.getSaveCartItemMutation(productToAdd, guestQuoteId)\n                );\n\n                return this._updateCartData(cartData, dispatch);\n            } catch (error) {\n                dispatch(showNotification('error', getErrorMessage(error)));\n                return Promise.reject();\n            }\n        }\n\n        return Promise.reject();\n    }\n\n    async removeProductFromCart(dispatch, item_id) {\n        try {\n            const isCustomerSignedIn = isSignedIn();\n            const guestQuoteId = !isCustomerSignedIn && getGuestQuoteId();\n\n            if (!isCustomerSignedIn && !guestQuoteId) {\n                return null;\n            }\n\n            const { removeCartItem: { cartData = {} } = {} } = await fetchMutation(\n                CartQuery.getRemoveCartItemMutation(item_id, guestQuoteId)\n            );\n\n            this._updateCartData(cartData, dispatch);\n            return cartData;\n        } catch (error) {\n            dispatch(showNotification('error', getErrorMessage(error)));\n            return null;\n        }\n    }\n\n    async applyCouponToCart(dispatch, couponCode) {\n        try {\n            const isCustomerSignedIn = isSignedIn();\n            const guestQuoteId = !isCustomerSignedIn && getGuestQuoteId();\n\n            if (!isCustomerSignedIn && !guestQuoteId) {\n                return;\n            }\n\n            const { applyCoupon: { cartData = {} } = {} } = await fetchMutation(\n                CartQuery.getApplyCouponMutation(couponCode, guestQuoteId)\n            );\n\n            this._updateCartData(cartData, dispatch);\n            dispatch(showNotification('success', __('Coupon was applied!')));\n        } catch (error) {\n            dispatch(showNotification('error', getErrorMessage(error)));\n        }\n    }\n\n    async removeCouponFromCart(dispatch) {\n        try {\n            const isCustomerSignedIn = isSignedIn();\n            const guestQuoteId = !isCustomerSignedIn && getGuestQuoteId();\n\n            if (!isCustomerSignedIn && !guestQuoteId) {\n                return;\n            }\n\n            const { removeCoupon: { cartData = {} } = {} } = await fetchMutation(\n                CartQuery.getRemoveCouponMutation(guestQuoteId)\n            );\n\n            this._updateCartData(cartData, dispatch);\n            dispatch(showNotification('success', __('Coupon was removed!')));\n        } catch (error) {\n            dispatch(showNotification('error', getErrorMessage(error)));\n        }\n    }\n\n    updateCrossSellProducts(items, dispatch) {\n        if (items && items.length) {\n            const product_links = items.reduce((links, product) => {\n                const { product: { product_links, variants = [] }, sku: variantSku } = product;\n\n                const { product_links: childProductLinks } = variants.find(({ sku }) => sku === variantSku) || {};\n\n                if (childProductLinks) {\n                    Object.values(childProductLinks).filter(({ link_type }) => link_type === 'crosssell')\n                        .map((item) => links.push(item));\n                }\n\n                if (product_links) {\n                    Object.values(product_links).filter(({ link_type }) => link_type === 'crosssell')\n                        .map((item) => links.push(item));\n                }\n\n                return links;\n            }, []);\n\n            if (product_links.length !== 0) {\n                LinkedProductsDispatcher.then(\n                    ({ default: dispatcher }) => dispatcher.fetchCrossSellProducts(dispatch, product_links)\n                );\n            } else {\n                LinkedProductsDispatcher.then(\n                    ({ default: dispatcher }) => dispatcher.clearCrossSellProducts(dispatch)\n                );\n            }\n        } else {\n            LinkedProductsDispatcher.then(\n                ({ default: dispatcher }) => dispatcher.clearCrossSellProducts(dispatch)\n            );\n        }\n    }\n\n    _updateCartData(cartData, dispatch) {\n        dispatch(updateTotals(cartData));\n    }\n\n    /**\n     * @param {*} attribute\n     * @param {*} product\n     */\n    _getProductAttribute(attribute, product) {\n        const { variants, configurableVariantIndex, [attribute]: attributeValue } = product;\n        return configurableVariantIndex >= 0\n            ? variants[configurableVariantIndex][attribute]\n            : attributeValue;\n    }\n\n    /**\n     * Check if it is allowed to add product to cart\n     * @param {Object} options Cart options\n     * @return {Boolean} Indicates is allowed or not\n     * @memberof CartDispatcher\n     */\n    _canBeAdded(options) {\n        if (options.product && options.quantity && (options.product.quantity + options.quantity) < 1) {\n            return false;\n        }\n\n        if (options.quantity === 0) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Get quote id. If quote id is missing, fetch it from the BE.\n     * @param Dispatch dispatch\n     * @return string quote id\n     */\n    _getGuestQuoteId(dispatch) {\n        const guestQuoteId = getGuestQuoteId();\n\n        if (guestQuoteId) {\n            return guestQuoteId;\n        }\n\n        return this.createGuestEmptyCart(dispatch);\n    }\n}\n\nexport default new CartDispatcher();\n"]},"metadata":{},"sourceType":"module"}