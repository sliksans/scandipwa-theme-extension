{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/component/FieldSelect/FieldSelect.container.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { ENTER_KEY_CODE } from \"/home/arturs/scandiweb/scandipwa/src/component/Field/Field.config\";\nimport FieldSelect from \"./FieldSelect.component\";\nimport { A_KEY_CODE, a_KEY_CODE, Z_KEY_CODE, z_KEY_CODE } from \"./FieldSelect.config\";\n/** #namespace Component/FieldSelect/Container */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const FieldSelectContainer = Mosaic.middleware((_temp = _class = class FieldSelectContainer_ extends Mosaic.Extensible(PureComponent) {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n    this.state = {\n      valueIndex: -1,\n      searchString: 'a',\n      isSelectExpanded: false\n    };\n    this.containerFunctions = {\n      handleSelectExpand: this.handleSelectExpand.bind(this),\n      handleSelectExpandedExpand: this.handleSelectExpandedExpand.bind(this),\n      handleSelectListOptionClick: this.handleSelectListOptionClick.bind(this),\n      handleSelectListKeyPress: this.handleSelectListKeyPress.bind(this)\n    };\n\n    this.containerProps = function () {\n      const {\n        valueIndex,\n        searchString,\n        isSelectExpanded\n      } = _this.state;\n      return {\n        selectOptions: _this.sortSelectOptions(),\n        isDisabled: _this.isSelectDisabled(),\n        valueIndex,\n        searchString,\n        isSelectExpanded\n      };\n    };\n  }\n\n  sortSelectOptions() {\n    const {\n      selectOptions\n    } = this.props;\n    /**\n     * Trim all null label values, sort alphabetically\n     */\n\n    const sortedOptions = selectOptions.reduce(function (acc, a) {\n      return a.label ? [...acc, a] : acc;\n    }, []).sort(function (a, b) {\n      const textA = a.label.toUpperCase();\n      const textB = b.label.toUpperCase(); // eslint-disable-next-line no-nested-ternary\n\n      return textA < textB ? -1 : textA > textB ? 1 : 0;\n    });\n    return sortedOptions;\n  }\n\n  isSelectDisabled() {\n    const {\n      selectOptions\n    } = this.props;\n    return selectOptions.length === 0;\n  }\n\n  handleSelectExpand() {\n    if (!this.isSelectDisabled()) {\n      this.setState(function ({\n        isSelectExpanded\n      }) {\n        return {\n          isSelectExpanded: !isSelectExpanded\n        };\n      });\n    }\n  }\n\n  handleSelectExpandedExpand() {\n    const {\n      isSelectExpanded\n    } = this.state;\n\n    if (isSelectExpanded) {\n      this.handleSelectExpand();\n    }\n  }\n\n  handleSelectListOptionClick({\n    value\n  }) {\n    const {\n      formRef,\n      onChange\n    } = this.props;\n\n    if (typeof formRef !== 'function') {\n      formRef.current.value = value; // TODO: investigate why this is required\n\n      const event = new Event('change', {\n        bubbles: true\n      });\n      formRef.current.dispatchEvent(event);\n    } else {\n      onChange(value);\n    }\n  }\n\n  _getSelectedValueIndex(keyCode) {\n    const {\n      selectOptions\n    } = this.props;\n    const {\n      searchString: prevSearchString,\n      valueIndex: prevValueIndex\n    } = this.state;\n    const pressedKeyValue = String.fromCharCode(keyCode).toLowerCase();\n    const searchString = prevSearchString[prevSearchString.length - 1] !== pressedKeyValue ? `${prevSearchString}${pressedKeyValue}` : pressedKeyValue;\n    const nextValueIndex = selectOptions.findIndex(function ({\n      label\n    }, i) {\n      return label && label.toLowerCase().startsWith(searchString) && (i > prevValueIndex || prevSearchString !== searchString);\n    });\n\n    if (nextValueIndex !== -1) {\n      return {\n        searchString,\n        valueIndex: nextValueIndex\n      };\n    } // if no items were found, take only the latest letter of the search string\n\n\n    const newSearchString = searchString[searchString.length - 1];\n    const newValueIndex = selectOptions.findIndex(function ({\n      label\n    }) {\n      return label && label.toLowerCase().startsWith(newSearchString);\n    });\n\n    if (newValueIndex !== -1) {\n      return {\n        searchString: newSearchString,\n        valueIndex: newValueIndex\n      };\n    } // if there are no items starting with this letter\n\n\n    return {};\n  }\n\n  handleSelectListKeyPress(event) {\n    const {\n      isSelectExpanded\n    } = this.state;\n    const {\n      selectOptions,\n      onChange,\n      id: selectId\n    } = this.props;\n    const keyCode = event.which || event.keycode; // on Enter pressed\n\n    if (keyCode === ENTER_KEY_CODE) {\n      this.handleSelectExpand();\n      return;\n    }\n\n    if (!isSelectExpanded || !keyCode || keyCode < A_KEY_CODE || keyCode > z_KEY_CODE || keyCode > Z_KEY_CODE && keyCode < a_KEY_CODE) {\n      return;\n    }\n\n    const {\n      searchString,\n      valueIndex\n    } = this._getSelectedValueIndex(keyCode); // valueIndex can be 0, so !valueIndex === true\n\n\n    if (!searchString || valueIndex === null) {\n      return;\n    }\n\n    this.setState({\n      searchString,\n      valueIndex\n    }, function () {\n      const {\n        id,\n        value\n      } = selectOptions[valueIndex]; // converting to string for avoiding the error with the first select option\n\n      onChange(value.toString());\n      const selectedElement = document.querySelector(`#${selectId} + ul #o${id}`);\n      selectedElement.focus();\n    });\n  }\n\n  render() {\n    const {\n      selectOptions\n    } = this.containerProps();\n\n    if (!selectOptions) {\n      throw new Error('Prop `selectOptions` is required for Field type `select`');\n    }\n\n    return /*#__PURE__*/_checkBEM(React, FieldSelect, Object.assign({}, this.props, this.containerFunctions, this.containerProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}, _class.propTypes = {\n  id: PropTypes.string.isRequired,\n  selectOptions: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    disabled: PropTypes.bool,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n  })),\n  formRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.instanceOf(Element)\n  })]),\n  onChange: PropTypes.func\n}, _class.defaultProps = {\n  selectOptions: [],\n  formRef: function () {},\n  onChange: function () {}\n}, _temp), \"Component/FieldSelect/Container\");\nexport default FieldSelectContainer;","map":{"version":3,"sources":["/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/component/FieldSelect/FieldSelect.container.js"],"names":["PropTypes","PureComponent","ENTER_KEY_CODE","FieldSelect","A_KEY_CODE","a_KEY_CODE","Z_KEY_CODE","z_KEY_CODE","state","valueIndex","searchString","isSelectExpanded","containerFunctions","handleSelectExpand","bind","handleSelectExpandedExpand","handleSelectListOptionClick","handleSelectListKeyPress","containerProps","selectOptions","sortSelectOptions","isDisabled","isSelectDisabled","props","sortedOptions","reduce","acc","a","label","sort","b","textA","toUpperCase","textB","length","setState","value","formRef","onChange","current","event","Event","bubbles","dispatchEvent","_getSelectedValueIndex","keyCode","prevSearchString","prevValueIndex","pressedKeyValue","String","fromCharCode","toLowerCase","nextValueIndex","findIndex","i","startsWith","newSearchString","newValueIndex","id","selectId","which","keycode","toString","selectedElement","document","querySelector","focus","render","Error","propTypes","string","isRequired","arrayOf","shape","oneOfType","number","disabled","bool","object","func","instanceOf","Element","defaultProps","FieldSelectContainer"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { ENTER_KEY_CODE } from 'Component/Field/Field.config';\n\nimport FieldSelect from './FieldSelect.component';\nimport {\n    A_KEY_CODE,\n    a_KEY_CODE,\n    Z_KEY_CODE,\n    z_KEY_CODE\n} from './FieldSelect.config';\n\n/** @namespace Component/FieldSelect/Container */\nexport class FieldSelectContainer extends PureComponent {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        selectOptions: PropTypes.arrayOf(PropTypes.shape({\n            id: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.number\n            ]),\n            value: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.number\n            ]),\n            disabled: PropTypes.bool,\n            label: PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n        })),\n        formRef: PropTypes.oneOfType([\n            PropTypes.func,\n            PropTypes.shape({ current: PropTypes.instanceOf(Element) })\n        ]),\n        onChange: PropTypes.func\n    };\n\n    static defaultProps = {\n        selectOptions: [],\n        formRef: () => {},\n        onChange: () => {}\n    };\n\n    state = {\n        valueIndex: -1,\n        searchString: 'a',\n        isSelectExpanded: false\n    };\n\n    containerFunctions = {\n        handleSelectExpand: this.handleSelectExpand.bind(this),\n        handleSelectExpandedExpand: this.handleSelectExpandedExpand.bind(this),\n        handleSelectListOptionClick: this.handleSelectListOptionClick.bind(this),\n        handleSelectListKeyPress: this.handleSelectListKeyPress.bind(this)\n    };\n\n    containerProps = () => {\n        const {\n            valueIndex,\n            searchString,\n            isSelectExpanded\n        } = this.state;\n\n        return {\n            selectOptions: this.sortSelectOptions(),\n            isDisabled: this.isSelectDisabled(),\n            valueIndex,\n            searchString,\n            isSelectExpanded\n        };\n    };\n\n    sortSelectOptions() {\n        const { selectOptions } = this.props;\n\n        /**\n         * Trim all null label values, sort alphabetically\n         */\n        const sortedOptions = selectOptions.reduce(\n            (acc, a) => (a.label ? [...acc, a] : acc), []\n        ).sort((a, b) => {\n            const textA = a.label.toUpperCase();\n            const textB = b.label.toUpperCase();\n            // eslint-disable-next-line no-nested-ternary\n            return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\n        });\n\n        return sortedOptions;\n    }\n\n    isSelectDisabled() {\n        const { selectOptions } = this.props;\n        return selectOptions.length === 0;\n    }\n\n    handleSelectExpand() {\n        if (!this.isSelectDisabled()) {\n            this.setState(({ isSelectExpanded }) => ({ isSelectExpanded: !isSelectExpanded }));\n        }\n    }\n\n    handleSelectExpandedExpand() {\n        const { isSelectExpanded } = this.state;\n\n        if (isSelectExpanded) {\n            this.handleSelectExpand();\n        }\n    }\n\n    handleSelectListOptionClick({ value }) {\n        const { formRef, onChange } = this.props;\n\n        if (typeof formRef !== 'function') {\n            formRef.current.value = value;\n\n            // TODO: investigate why this is required\n            const event = new Event('change', { bubbles: true });\n            formRef.current.dispatchEvent(event);\n        } else {\n            onChange(value);\n        }\n    }\n\n    _getSelectedValueIndex(keyCode) {\n        const { selectOptions } = this.props;\n        const {\n            searchString: prevSearchString,\n            valueIndex: prevValueIndex\n        } = this.state;\n\n        const pressedKeyValue = String.fromCharCode(keyCode).toLowerCase();\n\n        const searchString = (prevSearchString[prevSearchString.length - 1] !== pressedKeyValue)\n            ? `${prevSearchString}${pressedKeyValue}`\n            : pressedKeyValue;\n\n        const nextValueIndex = selectOptions.findIndex(({ label }, i) => (\n            label && label.toLowerCase().startsWith(searchString) && (\n                i > prevValueIndex || prevSearchString !== searchString\n            )\n        ));\n\n        if (nextValueIndex !== -1) {\n            return { searchString, valueIndex: nextValueIndex };\n        }\n\n        // if no items were found, take only the latest letter of the search string\n        const newSearchString = searchString[searchString.length - 1];\n\n        const newValueIndex = selectOptions.findIndex(({ label }) => (\n            label && label.toLowerCase().startsWith(newSearchString)\n        ));\n\n        if (newValueIndex !== -1) {\n            return { searchString: newSearchString, valueIndex: newValueIndex };\n        }\n\n        // if there are no items starting with this letter\n        return {};\n    }\n\n    handleSelectListKeyPress(event) {\n        const { isSelectExpanded } = this.state;\n        const { selectOptions, onChange, id: selectId } = this.props;\n        const keyCode = event.which || event.keycode;\n\n        // on Enter pressed\n        if (keyCode === ENTER_KEY_CODE) {\n            this.handleSelectExpand();\n            return;\n        }\n\n        if (!isSelectExpanded\n            || !keyCode\n            || keyCode < A_KEY_CODE\n            || keyCode > z_KEY_CODE\n            || (keyCode > Z_KEY_CODE && keyCode < a_KEY_CODE)\n        ) {\n            return;\n        }\n\n        const { searchString, valueIndex } = this._getSelectedValueIndex(keyCode);\n\n        // valueIndex can be 0, so !valueIndex === true\n        if (!searchString || valueIndex === null) {\n            return;\n        }\n\n        this.setState({ searchString, valueIndex }, () => {\n            const { id, value } = selectOptions[valueIndex];\n            // converting to string for avoiding the error with the first select option\n            onChange(value.toString());\n            const selectedElement = document.querySelector(`#${selectId} + ul #o${id}`);\n            selectedElement.focus();\n        });\n    }\n\n    render() {\n        const { selectOptions } = this.containerProps();\n\n        if (!selectOptions) {\n            throw new Error('Prop `selectOptions` is required for Field type `select`');\n        }\n\n        return (\n            <FieldSelect\n              { ...this.props }\n              { ...this.containerFunctions }\n              { ...this.containerProps() }\n            />\n        );\n    }\n}\n\nexport default FieldSelectContainer;\n"]},"metadata":{},"sourceType":"module"}