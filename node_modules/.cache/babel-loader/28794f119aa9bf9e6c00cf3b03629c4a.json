{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/route/SearchPage/SearchPage.container.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport { connect } from 'react-redux'; // TODO: try SEARCH type\n\nimport { CATEGORY } from \"/home/arturs/scandiweb/extension/src/component/Header/Header.config\";\nimport { LOADING_TIME } from \"/home/arturs/scandiweb/extension/src/route/CategoryPage/CategoryPage.config\";\nimport { CategoryPageContainer } from \"/home/arturs/scandiweb/extension/src/route/CategoryPage/CategoryPage.container\";\nimport { updateCurrentCategory } from \"/home/arturs/scandiweb/extension/src/store/Category/Category.action\";\nimport { updateMeta } from \"/home/arturs/scandiweb/extension/src/store/Meta/Meta.action\";\nimport { changeNavigationState } from \"/home/arturs/scandiweb/extension/src/store/Navigation/Navigation.action\";\nimport { BOTTOM_NAVIGATION_TYPE, TOP_NAVIGATION_TYPE } from \"/home/arturs/scandiweb/extension/src/store/Navigation/Navigation.reducer\";\nimport { setBigOfflineNotice } from \"/home/arturs/scandiweb/extension/src/store/Offline/Offline.action\";\nimport { toggleOverlayByKey } from \"/home/arturs/scandiweb/extension/src/store/Overlay/Overlay.action\";\nimport { updateInfoLoadStatus } from \"/home/arturs/scandiweb/extension/src/store/ProductListInfo/ProductListInfo.action\";\nimport { debounce } from \"/home/arturs/scandiweb/extension/src/util/Request\";\nimport { appendWithStoreCode } from \"/home/arturs/scandiweb/extension/src/util/Url\";\nimport SearchPage from \"./SearchPage.component\";\nexport const BreadcrumbsDispatcher = import(\n/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n\"/home/arturs/scandiweb/extension/src/store/Breadcrumbs/Breadcrumbs.dispatcher\");\nexport const CategoryDispatcher = import(\n/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n\"/home/arturs/scandiweb/extension/src/store/Category/Category.dispatcher\");\nexport const MetaDispatcher = import(\n/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n\"/home/arturs/scandiweb/extension/src/store/Meta/Meta.dispatcher\");\nexport const NoMatchDispatcher = import(\n/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n\"/home/arturs/scandiweb/extension/src/store/NoMatch/NoMatch.dispatcher\");\nexport const ProductListInfoDispatcher = import(\n/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n\"/home/arturs/scandiweb/extension/src/store/ProductListInfo/ProductListInfo.dispatcher\");\n/** #namespace Route/SearchPage/Container/mapStateToProps */\n\nexport const mapStateToProps = Mosaic.middleware(function (state) {\n  return {\n    category: state.CategoryReducer.category,\n    isOffline: state.OfflineReducer.isOffline,\n    filters: state.ProductListInfoReducer.filters,\n    currentArgs: state.ProductListReducer.currentArgs,\n    sortFields: state.ProductListInfoReducer.sortFields,\n    minPriceRange: state.ProductListInfoReducer.minPrice,\n    maxPriceRange: state.ProductListInfoReducer.maxPrice,\n    isInfoLoading: state.ProductListInfoReducer.isLoading,\n    totalPages: state.ProductListReducer.totalPages,\n    device: state.ConfigReducer.device\n  };\n}, \"Route/SearchPage/Container/mapStateToProps\");\n/** #namespace Route/SearchPage/Container/mapDispatchToProps */\n\nexport const mapDispatchToProps = Mosaic.middleware(function (dispatch) {\n  return {\n    toggleOverlayByKey: function (key) {\n      return dispatch(toggleOverlayByKey(key));\n    },\n    changeHeaderState: function (state) {\n      return dispatch(changeNavigationState(TOP_NAVIGATION_TYPE, state));\n    },\n    changeNavigationState: function (state) {\n      return dispatch(changeNavigationState(BOTTOM_NAVIGATION_TYPE, state));\n    },\n    requestCategory: function (options) {\n      return CategoryDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.handleData(dispatch, options);\n      });\n    },\n    updateBreadcrumbs: function (breadcrumbs) {\n      return BreadcrumbsDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.update(breadcrumbs, dispatch);\n      });\n    },\n    requestProductListInfo: function (options) {\n      return ProductListInfoDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.handleData(dispatch, options);\n      });\n    },\n    updateLoadStatus: function (isLoading) {\n      return dispatch(updateInfoLoadStatus(isLoading));\n    },\n    updateNoMatch: function (options) {\n      return NoMatchDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.updateNoMatch(dispatch, options);\n      });\n    },\n    setBigOfflineNotice: function (isBig) {\n      return dispatch(setBigOfflineNotice(isBig));\n    },\n    updateMetaFromCategory: function (category) {\n      return MetaDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.updateWithCategory(category, dispatch);\n      });\n    },\n    updateCurrentCategory: function (category) {\n      return dispatch(updateCurrentCategory(category));\n    },\n    updateMeta: function (meta) {\n      return dispatch(updateMeta(meta));\n    }\n  };\n}, \"Route/SearchPage/Container/mapDispatchToProps\");\n/** #namespace Route/SearchPage/Container */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const SearchPageContainer = Mosaic.middleware((_temp = _class = class SearchPageContainer_ extends Mosaic.Extensible(CategoryPageContainer) {\n  updateMeta() {\n    const {\n      updateMeta\n    } = this.props;\n    updateMeta({\n      title: __('Search')\n    });\n  }\n\n  updateBreadcrumbs() {\n    const {\n      updateBreadcrumbs\n    } = this.props;\n    const search = this.getSearchParam();\n    updateBreadcrumbs([{\n      url: '',\n      name: search.toUpperCase()\n    }]);\n  }\n\n  updateHeaderState() {\n    var _history$location;\n\n    const {\n      changeHeaderState,\n      history\n    } = this.props;\n    const {\n      category\n    } = (history === null || history === void 0 ? void 0 : (_history$location = history.location) === null || _history$location === void 0 ? void 0 : _history$location.state) || {};\n    const search = this.getSearchParam();\n    const onBackClick = category ? function () {\n      return history.goBack();\n    } : function () {\n      return history.push(appendWithStoreCode('/menu'));\n    };\n    changeHeaderState({\n      name: CATEGORY,\n      title: search,\n      onBackClick\n    });\n  }\n\n  getIsMatchingListFilter() {\n    const {\n      currentArgs: {\n        search: currentSearch\n      }\n    } = this.props;\n    const search = this.getSearchParam(); // if the search requested is equal to search from URL\n\n    return search === currentSearch;\n  }\n\n  getIsMatchingInfoFilter() {\n    const {\n      currentArgs: {\n        search: currentSearch\n      }\n    } = this.props;\n    const search = this.getSearchParam(); // if the search requested is equal to search from URL\n\n    return search === currentSearch;\n  }\n\n  componentDidMount() {\n    this.updateMeta();\n    this.updateBreadcrumbs();\n    this.updateHeaderState();\n    this.updateNavigationState();\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      isOffline,\n      match: {\n        params: {\n          query\n        }\n      }\n    } = this.props;\n    const {\n      match: {\n        params: {\n          query: prevQuery\n        }\n      }\n    } = prevProps;\n\n    if (isOffline) {\n      debounce(this.setOfflineNoticeSize, LOADING_TIME)();\n    }\n    /**\n     * If search query has changed - update related information\n     */\n\n\n    if (query !== prevQuery) {\n      this.updateMeta();\n      this.updateBreadcrumbs();\n      this.updateHeaderState();\n    }\n  }\n\n  getSearchParam() {\n    const {\n      match: {\n        params: {\n          query\n        }\n      }\n    } = this.props;\n    return query;\n  }\n\n  render() {\n    return /*#__PURE__*/_checkBEM(React, SearchPage, Object.assign({}, this.props, this.containerFunctions, this.containerProps(), {\n      // addded here to not override the container props\n      search: this.getSearchParam(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}, _class.defaultProps = { ..._class.defaultProps,\n  isSearchPage: true\n}, _temp), \"Route/SearchPage/Container\");\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPageContainer);","map":{"version":3,"sources":["/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/route/SearchPage/SearchPage.container.js"],"names":["connect","CATEGORY","LOADING_TIME","CategoryPageContainer","updateCurrentCategory","updateMeta","changeNavigationState","BOTTOM_NAVIGATION_TYPE","TOP_NAVIGATION_TYPE","setBigOfflineNotice","toggleOverlayByKey","updateInfoLoadStatus","debounce","appendWithStoreCode","SearchPage","BreadcrumbsDispatcher","CategoryDispatcher","MetaDispatcher","NoMatchDispatcher","ProductListInfoDispatcher","mapStateToProps","state","category","CategoryReducer","isOffline","OfflineReducer","filters","ProductListInfoReducer","currentArgs","ProductListReducer","sortFields","minPriceRange","minPrice","maxPriceRange","maxPrice","isInfoLoading","isLoading","totalPages","device","ConfigReducer","mapDispatchToProps","dispatch","key","changeHeaderState","requestCategory","options","then","default","dispatcher","handleData","updateBreadcrumbs","breadcrumbs","update","requestProductListInfo","updateLoadStatus","updateNoMatch","isBig","updateMetaFromCategory","updateWithCategory","meta","props","title","__","search","getSearchParam","url","name","toUpperCase","updateHeaderState","history","location","onBackClick","goBack","push","getIsMatchingListFilter","currentSearch","getIsMatchingInfoFilter","componentDidMount","updateNavigationState","componentDidUpdate","prevProps","match","params","query","prevQuery","setOfflineNoticeSize","render","containerFunctions","containerProps","defaultProps","isSearchPage","SearchPageContainer"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport { connect } from 'react-redux';\n\n// TODO: try SEARCH type\nimport { CATEGORY } from 'Component/Header/Header.config';\nimport { LOADING_TIME } from 'Route/CategoryPage/CategoryPage.config';\nimport { CategoryPageContainer } from 'Route/CategoryPage/CategoryPage.container';\nimport { updateCurrentCategory } from 'Store/Category/Category.action';\nimport { updateMeta } from 'Store/Meta/Meta.action';\nimport { changeNavigationState } from 'Store/Navigation/Navigation.action';\nimport { BOTTOM_NAVIGATION_TYPE, TOP_NAVIGATION_TYPE } from 'Store/Navigation/Navigation.reducer';\nimport { setBigOfflineNotice } from 'Store/Offline/Offline.action';\nimport { toggleOverlayByKey } from 'Store/Overlay/Overlay.action';\nimport { updateInfoLoadStatus } from 'Store/ProductListInfo/ProductListInfo.action';\nimport { debounce } from 'Util/Request';\nimport { appendWithStoreCode } from 'Util/Url';\n\nimport SearchPage from './SearchPage.component';\n\nexport const BreadcrumbsDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Breadcrumbs/Breadcrumbs.dispatcher'\n);\nexport const CategoryDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Category/Category.dispatcher'\n);\nexport const MetaDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Meta/Meta.dispatcher'\n);\nexport const NoMatchDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/NoMatch/NoMatch.dispatcher'\n);\nexport const ProductListInfoDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/ProductListInfo/ProductListInfo.dispatcher'\n);\n\n/** @namespace Route/SearchPage/Container/mapStateToProps */\nexport const mapStateToProps = (state) => ({\n    category: state.CategoryReducer.category,\n    isOffline: state.OfflineReducer.isOffline,\n    filters: state.ProductListInfoReducer.filters,\n    currentArgs: state.ProductListReducer.currentArgs,\n    sortFields: state.ProductListInfoReducer.sortFields,\n    minPriceRange: state.ProductListInfoReducer.minPrice,\n    maxPriceRange: state.ProductListInfoReducer.maxPrice,\n    isInfoLoading: state.ProductListInfoReducer.isLoading,\n    totalPages: state.ProductListReducer.totalPages,\n    device: state.ConfigReducer.device\n});\n\n/** @namespace Route/SearchPage/Container/mapDispatchToProps */\nexport const mapDispatchToProps = (dispatch) => ({\n    toggleOverlayByKey: (key) => dispatch(toggleOverlayByKey(key)),\n    changeHeaderState: (state) => dispatch(changeNavigationState(TOP_NAVIGATION_TYPE, state)),\n    changeNavigationState: (state) => dispatch(changeNavigationState(BOTTOM_NAVIGATION_TYPE, state)),\n    requestCategory: (options) => CategoryDispatcher.then(\n        ({ default: dispatcher }) => dispatcher.handleData(dispatch, options)\n    ),\n    updateBreadcrumbs: (breadcrumbs) => BreadcrumbsDispatcher.then(\n        ({ default: dispatcher }) => dispatcher.update(breadcrumbs, dispatch)\n    ),\n    requestProductListInfo: (options) => ProductListInfoDispatcher.then(\n        ({ default: dispatcher }) => dispatcher.handleData(dispatch, options)\n    ),\n    updateLoadStatus: (isLoading) => dispatch(updateInfoLoadStatus(isLoading)),\n    updateNoMatch: (options) => NoMatchDispatcher.then(\n        ({ default: dispatcher }) => dispatcher.updateNoMatch(dispatch, options)\n    ),\n    setBigOfflineNotice: (isBig) => dispatch(setBigOfflineNotice(isBig)),\n    updateMetaFromCategory: (category) => MetaDispatcher.then(\n        ({ default: dispatcher }) => dispatcher.updateWithCategory(category, dispatch)\n    ),\n    updateCurrentCategory: (category) => dispatch(updateCurrentCategory(category)),\n    updateMeta: (meta) => dispatch(updateMeta(meta))\n});\n\n/** @namespace Route/SearchPage/Container */\nexport class SearchPageContainer extends CategoryPageContainer {\n    static defaultProps = {\n        ...this.defaultProps,\n        isSearchPage: true\n    };\n\n    updateMeta() {\n        const { updateMeta } = this.props;\n        updateMeta({ title: __('Search') });\n    }\n\n    updateBreadcrumbs() {\n        const { updateBreadcrumbs } = this.props;\n        const search = this.getSearchParam();\n\n        updateBreadcrumbs([{\n            url: '',\n            name: search.toUpperCase()\n        }]);\n    }\n\n    updateHeaderState() {\n        const {\n            changeHeaderState,\n            history\n        } = this.props;\n\n        const { category } = history?.location?.state || {};\n        const search = this.getSearchParam();\n\n        const onBackClick = category\n            ? () => history.goBack()\n            : () => history.push(appendWithStoreCode('/menu'));\n\n        changeHeaderState({\n            name: CATEGORY,\n            title: search,\n            onBackClick\n        });\n    }\n\n    getIsMatchingListFilter() {\n        const { currentArgs: { search: currentSearch } } = this.props;\n        const search = this.getSearchParam();\n\n        // if the search requested is equal to search from URL\n        return search === currentSearch;\n    }\n\n    getIsMatchingInfoFilter() {\n        const { currentArgs: { search: currentSearch } } = this.props;\n        const search = this.getSearchParam();\n\n        // if the search requested is equal to search from URL\n        return search === currentSearch;\n    }\n\n    componentDidMount() {\n        this.updateMeta();\n        this.updateBreadcrumbs();\n        this.updateHeaderState();\n        this.updateNavigationState();\n    }\n\n    componentDidUpdate(prevProps) {\n        const {\n            isOffline,\n            match: { params: { query } }\n        } = this.props;\n\n        const {\n            match: { params: { query: prevQuery } }\n        } = prevProps;\n\n        if (isOffline) {\n            debounce(this.setOfflineNoticeSize, LOADING_TIME)();\n        }\n\n        /**\n         * If search query has changed - update related information\n         */\n        if (query !== prevQuery) {\n            this.updateMeta();\n            this.updateBreadcrumbs();\n            this.updateHeaderState();\n        }\n    }\n\n    getSearchParam() {\n        const { match: { params: { query } } } = this.props;\n        return query;\n    }\n\n    render() {\n        return (\n            <SearchPage\n              { ...this.props }\n              { ...this.containerFunctions }\n              { ...this.containerProps() }\n              // addded here to not override the container props\n              search={ this.getSearchParam() }\n            />\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPageContainer);\n"]},"metadata":{},"sourceType":"module"}