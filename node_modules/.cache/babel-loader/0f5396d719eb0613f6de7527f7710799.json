{"ast":null,"code":"import _asyncToGenerator from \"/home/arturs/scandiweb/scandipwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport ProductCompareQuery from \"/home/arturs/scandiweb/scandipwa/src/query/ProductCompare.query\";\nimport { showNotification } from \"/home/arturs/scandiweb/scandipwa/src/store/Notification/Notification.action\";\nimport { clearComparedProducts, setCompareList, setCompareListIds, toggleLoader } from \"/home/arturs/scandiweb/scandipwa/src/store/ProductCompare/ProductCompare.action\";\nimport { getUid, removeUid, setUid } from \"/home/arturs/scandiweb/scandipwa/src/util/Compare\";\nimport { fetchMutation, fetchQuery } from \"/home/arturs/scandiweb/scandipwa/src/util/Request\";\nexport const CartDispatcher = import(\n/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n\"/home/arturs/scandiweb/scandipwa/src/store/Cart/Cart.dispatcher\");\n/** #namespace Store/ProductCompare/Dispatcher */\n\nexport const ProductCompareDispatcher = Mosaic.middleware(class ProductCompareDispatcher_ extends Mosaic.Extensible() {\n  getCompareList(dispatch) {\n    return _asyncToGenerator(function* () {\n      const uid = getUid();\n\n      if (!uid) {\n        return false;\n      }\n\n      dispatch(toggleLoader(true));\n\n      try {\n        const {\n          compareList\n        } = yield fetchQuery(ProductCompareQuery.getCompareList(uid));\n        dispatch(toggleLoader(false));\n        dispatch(setCompareList(compareList));\n      } catch (error) {\n        dispatch(toggleLoader(false));\n        dispatch(showNotification('error', __('Unable to fetch compare list'), error));\n        return false;\n      }\n\n      return true;\n    })();\n  }\n\n  createCompareList(productId) {\n    return _asyncToGenerator(function* () {\n      const {\n        createCompareList,\n        createCompareList: {\n          uid\n        }\n      } = yield fetchMutation(ProductCompareQuery.getCreateCompareList([productId]));\n\n      if (uid) {\n        setUid(uid);\n      }\n\n      return createCompareList;\n    })();\n  }\n\n  addToCompareList(uid, productId) {\n    return _asyncToGenerator(function* () {\n      const {\n        addProductsToCompareList\n      } = yield fetchMutation(ProductCompareQuery.getAddProductsToCompareList(uid, [productId]));\n      return addProductsToCompareList;\n    })();\n  }\n\n  addProductToCompare(productId, dispatch) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const uid = getUid();\n\n      try {\n        const result = uid ? yield _this.addToCompareList(uid, productId) : yield _this.createCompareList(productId);\n        dispatch(setCompareList(result));\n        dispatch(showNotification('success', __('Product is added to the compare list')));\n        return result;\n      } catch (error) {\n        dispatch(showNotification('error', __('Unable to add product to the compare list'), error));\n        return false;\n      }\n    })();\n  }\n\n  removeComparedProduct(productId, dispatch) {\n    return _asyncToGenerator(function* () {\n      const uid = getUid();\n\n      if (!uid) {\n        return false;\n      }\n\n      try {\n        const {\n          removeProductsFromCompareList\n        } = yield fetchMutation(ProductCompareQuery.getRemoveProductsFromCompareList(uid, [productId]));\n        dispatch(setCompareList(removeProductsFromCompareList));\n        dispatch(showNotification('success', __('Product is removed from the compare list')));\n        return removeProductsFromCompareList;\n      } catch (error) {\n        dispatch(showNotification('error', __('Unable to remove product from the compare list'), error));\n        return false;\n      }\n    })();\n  }\n\n  fetchCustomersList(dispatch) {\n    return _asyncToGenerator(function* () {\n      const {\n        createCompareList,\n        createCompareList: {\n          uid\n        }\n      } = yield fetchMutation(ProductCompareQuery.getCreateEmptyCompareList());\n\n      if (uid) {\n        setUid(uid);\n      }\n\n      dispatch(setCompareList(createCompareList));\n    })();\n  }\n\n  assignCompareList(dispatch) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const uid = getUid();\n\n      if (!uid) {\n        yield _this2.fetchCustomersList(dispatch);\n        return false;\n      }\n\n      removeUid();\n\n      try {\n        const {\n          assignCompareListToCustomer: {\n            result,\n            compare_list,\n            compare_list: {\n              uid: newUid\n            }\n          }\n        } = yield fetchMutation(ProductCompareQuery.getAssignCompareList(uid));\n\n        if (result) {\n          setUid(newUid);\n          dispatch(setCompareList(compare_list));\n        }\n\n        return result;\n      } catch (error) {\n        dispatch(toggleLoader(false));\n        return false;\n      }\n    })();\n  }\n\n  clearComparedProducts(dispatch) {\n    return _asyncToGenerator(function* () {\n      const uid = getUid();\n\n      if (!uid) {\n        return false;\n      }\n\n      dispatch(toggleLoader(true));\n\n      try {\n        const result = yield fetchMutation(ProductCompareQuery.getDeleteCompareList(uid));\n        removeUid();\n        dispatch(clearComparedProducts());\n        dispatch(showNotification('success', __('Compare list is cleared')));\n        dispatch(toggleLoader(false));\n        return result;\n      } catch (error) {\n        dispatch(toggleLoader(false));\n        dispatch(showNotification('error', __('Unable to clear product compare list'), error));\n        return false;\n      }\n    })();\n  }\n\n  updateInitialProductCompareData(dispatch) {\n    return _asyncToGenerator(function* () {\n      const uid = getUid();\n\n      if (!uid) {\n        return false;\n      }\n\n      dispatch(toggleLoader(true));\n\n      try {\n        const {\n          compareList\n        } = yield fetchQuery(ProductCompareQuery.getCompareListIds(uid));\n        const {\n          items = []\n        } = compareList || {};\n        const compareIds = items.map(function ({\n          product: {\n            id\n          }\n        }) {\n          return id;\n        });\n        dispatch(toggleLoader(false));\n        dispatch(setCompareListIds(compareIds));\n      } catch (error) {\n        dispatch(toggleLoader(false));\n        dispatch(showNotification('error', __('Unable to fetch compare list'), error));\n        return false;\n      }\n\n      return true;\n    })();\n  }\n\n  resetComparedProducts(dispatch) {\n    dispatch(clearComparedProducts());\n  }\n\n}, \"Store/ProductCompare/Dispatcher\");\nexport default new ProductCompareDispatcher();","map":{"version":3,"sources":["/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/store/ProductCompare/ProductCompare.dispatcher.js"],"names":["ProductCompareQuery","showNotification","clearComparedProducts","setCompareList","setCompareListIds","toggleLoader","getUid","removeUid","setUid","fetchMutation","fetchQuery","CartDispatcher","getCompareList","dispatch","uid","compareList","error","__","createCompareList","productId","getCreateCompareList","addToCompareList","addProductsToCompareList","getAddProductsToCompareList","addProductToCompare","result","removeComparedProduct","removeProductsFromCompareList","getRemoveProductsFromCompareList","fetchCustomersList","getCreateEmptyCompareList","assignCompareList","assignCompareListToCustomer","compare_list","newUid","getAssignCompareList","getDeleteCompareList","updateInitialProductCompareData","getCompareListIds","items","compareIds","map","product","id","resetComparedProducts","ProductCompareDispatcher"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport ProductCompareQuery from 'Query/ProductCompare.query';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport {\n    clearComparedProducts,\n    setCompareList,\n    setCompareListIds,\n    toggleLoader\n} from 'Store/ProductCompare/ProductCompare.action';\nimport { getUid, removeUid, setUid } from 'Util/Compare';\nimport { fetchMutation, fetchQuery } from 'Util/Request';\n\nexport const CartDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Cart/Cart.dispatcher'\n);\n\n/** @namespace Store/ProductCompare/Dispatcher */\nexport class ProductCompareDispatcher {\n    async getCompareList(dispatch) {\n        const uid = getUid();\n\n        if (!uid) {\n            return false;\n        }\n\n        dispatch(toggleLoader(true));\n\n        try {\n            const { compareList } = await fetchQuery(\n                ProductCompareQuery.getCompareList(uid)\n            );\n\n            dispatch(toggleLoader(false));\n            dispatch(setCompareList(compareList));\n        } catch (error) {\n            dispatch(toggleLoader(false));\n            dispatch(showNotification('error', __('Unable to fetch compare list'), error));\n\n            return false;\n        }\n\n        return true;\n    }\n\n    async createCompareList(productId) {\n        const {\n            createCompareList,\n            createCompareList: {\n                uid\n            }\n        } = await fetchMutation(\n            ProductCompareQuery.getCreateCompareList(\n                [productId]\n            )\n        );\n\n        if (uid) {\n            setUid(uid);\n        }\n\n        return createCompareList;\n    }\n\n    async addToCompareList(uid, productId) {\n        const {\n            addProductsToCompareList\n        } = await fetchMutation(\n            ProductCompareQuery.getAddProductsToCompareList(\n                uid,\n                [productId]\n            )\n        );\n\n        return addProductsToCompareList;\n    }\n\n    async addProductToCompare(productId, dispatch) {\n        const uid = getUid();\n\n        try {\n            const result = (uid)\n                ? await this.addToCompareList(uid, productId)\n                : await this.createCompareList(productId);\n\n            dispatch(setCompareList(result));\n            dispatch(showNotification('success', __('Product is added to the compare list')));\n\n            return result;\n        } catch (error) {\n            dispatch(showNotification('error', __('Unable to add product to the compare list'), error));\n\n            return false;\n        }\n    }\n\n    async removeComparedProduct(productId, dispatch) {\n        const uid = getUid();\n\n        if (!uid) {\n            return false;\n        }\n\n        try {\n            const {\n                removeProductsFromCompareList\n            } = await fetchMutation(\n                ProductCompareQuery.getRemoveProductsFromCompareList(\n                    uid,\n                    [productId]\n                )\n            );\n\n            dispatch(setCompareList(removeProductsFromCompareList));\n            dispatch(showNotification('success', __('Product is removed from the compare list')));\n\n            return removeProductsFromCompareList;\n        } catch (error) {\n            dispatch(showNotification('error', __('Unable to remove product from the compare list'), error));\n\n            return false;\n        }\n    }\n\n    async fetchCustomersList(dispatch) {\n        const {\n            createCompareList,\n            createCompareList: {\n                uid\n            }\n        } = await fetchMutation(\n            ProductCompareQuery.getCreateEmptyCompareList()\n        );\n\n        if (uid) {\n            setUid(uid);\n        }\n\n        dispatch(setCompareList(createCompareList));\n    }\n\n    async assignCompareList(dispatch) {\n        const uid = getUid();\n\n        if (!uid) {\n            await this.fetchCustomersList(dispatch);\n\n            return false;\n        }\n\n        removeUid();\n\n        try {\n            const {\n                assignCompareListToCustomer: {\n                    result,\n                    compare_list,\n                    compare_list: {\n                        uid: newUid\n                    }\n                }\n            } = await fetchMutation(\n                ProductCompareQuery.getAssignCompareList(uid)\n            );\n\n            if (result) {\n                setUid(newUid);\n                dispatch(setCompareList(compare_list));\n            }\n\n            return result;\n        } catch (error) {\n            dispatch(toggleLoader(false));\n\n            return false;\n        }\n    }\n\n    async clearComparedProducts(dispatch) {\n        const uid = getUid();\n\n        if (!uid) {\n            return false;\n        }\n\n        dispatch(toggleLoader(true));\n\n        try {\n            const result = await fetchMutation(\n                ProductCompareQuery.getDeleteCompareList(uid)\n            );\n\n            removeUid();\n            dispatch(clearComparedProducts());\n            dispatch(showNotification('success', __('Compare list is cleared')));\n            dispatch(toggleLoader(false));\n\n            return result;\n        } catch (error) {\n            dispatch(toggleLoader(false));\n            dispatch(showNotification('error', __('Unable to clear product compare list'), error));\n            return false;\n        }\n    }\n\n    async updateInitialProductCompareData(dispatch) {\n        const uid = getUid();\n\n        if (!uid) {\n            return false;\n        }\n\n        dispatch(toggleLoader(true));\n\n        try {\n            const { compareList } = await fetchQuery(\n                ProductCompareQuery.getCompareListIds(uid)\n            );\n            const { items = [] } = compareList || {};\n            const compareIds = items.map(({ product: { id } }) => id);\n\n            dispatch(toggleLoader(false));\n            dispatch(setCompareListIds(compareIds));\n        } catch (error) {\n            dispatch(toggleLoader(false));\n            dispatch(showNotification('error', __('Unable to fetch compare list'), error));\n\n            return false;\n        }\n\n        return true;\n    }\n\n    resetComparedProducts(dispatch) {\n        dispatch(clearComparedProducts());\n    }\n}\n\nexport default new ProductCompareDispatcher();\n"]},"metadata":{},"sourceType":"module"}