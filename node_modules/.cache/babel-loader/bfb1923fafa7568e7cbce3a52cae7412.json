{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/route/CmsPage/CmsPage.container.js\";\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { CMS_PAGE } from \"/home/arturs/scandiweb/scandipwa/src/component/Header/Header.config\";\nimport CmsPageQuery from \"/home/arturs/scandiweb/scandipwa/src/query/CmsPage.query\";\nimport { toggleBreadcrumbs } from \"/home/arturs/scandiweb/scandipwa/src/store/Breadcrumbs/Breadcrumbs.action\";\nimport { updateMeta } from \"/home/arturs/scandiweb/scandipwa/src/store/Meta/Meta.action\";\nimport { changeNavigationState } from \"/home/arturs/scandiweb/scandipwa/src/store/Navigation/Navigation.action\";\nimport { TOP_NAVIGATION_TYPE } from \"/home/arturs/scandiweb/scandipwa/src/store/Navigation/Navigation.reducer\";\nimport { setBigOfflineNotice } from \"/home/arturs/scandiweb/scandipwa/src/store/Offline/Offline.action\";\nimport { LocationType, MatchType } from \"/home/arturs/scandiweb/scandipwa/src/type/Common\";\nimport history from \"/home/arturs/scandiweb/scandipwa/src/util/History\";\nimport { debounce } from \"/home/arturs/scandiweb/scandipwa/src/util/Request\";\nimport DataContainer from \"/home/arturs/scandiweb/scandipwa/src/util/Request/DataContainer\";\nimport { appendWithStoreCode, getUrlParam } from \"/home/arturs/scandiweb/scandipwa/src/util/Url\";\nimport CmsPage from \"./CmsPage.component\";\nimport { LOADING_TIME } from \"./CmsPage.config\";\nexport const BreadcrumbsDispatcher = import(\n/* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n\"/home/arturs/scandiweb/scandipwa/src/store/Breadcrumbs/Breadcrumbs.dispatcher\");\n/** #namespace Route/CmsPage/Container/mapStateToProps */\n\nexport const mapStateToProps = Mosaic.middleware(function (state) {\n  return {\n    isOffline: state.OfflineReducer.isOffline\n  };\n}, \"Route/CmsPage/Container/mapStateToProps\");\n/** #namespace Route/CmsPage/Container/mapDispatchToProps */\n\nexport const mapDispatchToProps = Mosaic.middleware(function (dispatch) {\n  return {\n    updateBreadcrumbs: function (breadcrumbs) {\n      return BreadcrumbsDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.updateWithCmsPage(breadcrumbs, dispatch);\n      });\n    },\n    setHeaderState: function (stateName) {\n      return dispatch(changeNavigationState(TOP_NAVIGATION_TYPE, stateName));\n    },\n    setBigOfflineNotice: function (isBig) {\n      return dispatch(setBigOfflineNotice(isBig));\n    },\n    updateMeta: function (meta) {\n      return dispatch(updateMeta(meta));\n    },\n    toggleBreadcrumbs: function (isActive) {\n      BreadcrumbsDispatcher.then(function ({\n        default: dispatcher\n      }) {\n        return dispatcher.update([], dispatch);\n      });\n      dispatch(toggleBreadcrumbs(isActive));\n    }\n  };\n}, \"Route/CmsPage/Container/mapDispatchToProps\");\n/** #namespace Route/CmsPage/Container */\n\nvar _checkBEM = require(\"babel-plugin-transform-rebem-jsx\").checkBEMProps;\n\nexport const CmsPageContainer = Mosaic.middleware((_temp = _class = class CmsPageContainer_ extends Mosaic.Extensible(DataContainer) {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n    this.state = {\n      page: {},\n      isLoading: true,\n      isPageLoaded: false\n    };\n\n    this.setOfflineNoticeSize = function () {\n      const {\n        setBigOfflineNotice\n      } = _this.props;\n      const {\n        isLoading\n      } = _this.state;\n\n      if (isLoading) {\n        setBigOfflineNotice(true);\n      } else {\n        setBigOfflineNotice(false);\n      }\n    };\n\n    this.onPageLoad = function ({\n      cmsPage: page\n    }) {\n      const {\n        location: {\n          pathname\n        },\n        updateMeta,\n        setHeaderState,\n        updateBreadcrumbs\n      } = _this.props;\n      const {\n        content_heading,\n        meta_title,\n        title,\n        meta_description,\n        meta_keywords\n      } = page;\n      debounce(_this.setOfflineNoticeSize, LOADING_TIME)();\n      updateBreadcrumbs(page);\n      updateMeta({\n        title: meta_title || title,\n        description: meta_description,\n        keywords: meta_keywords,\n        canonical_url: window.location.href\n      });\n\n      if (pathname !== appendWithStoreCode('/') && pathname !== '/') {\n        setHeaderState({\n          name: CMS_PAGE,\n          title: content_heading,\n          onBackClick: function () {\n            return history.goBack();\n          }\n        });\n      }\n\n      _this.setState({\n        page,\n        isLoading: false,\n        isPageLoaded: true\n      });\n    };\n  }\n\n  __construct(props) {\n    super.__construct(props);\n\n    this.updateBreadcrumbs();\n  }\n\n  updateBreadcrumbs() {\n    const {\n      toggleBreadcrumbs,\n      isBreadcrumbsActive\n    } = this.props;\n    toggleBreadcrumbs(isBreadcrumbsActive);\n  }\n\n  componentDidMount() {\n    const {\n      isOffline,\n      isOnlyPlaceholder\n    } = this.props;\n    window.scrollTo(0, 0);\n    const {\n      isLoading\n    } = this.state;\n\n    if (isOffline && isLoading) {\n      debounce(this.setOfflineNoticeSize, LOADING_TIME)();\n    }\n\n    if (!isOnlyPlaceholder) {\n      this.requestPage();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      location: {\n        pathname\n      },\n      pageIdentifiers,\n      pageIds\n    } = this.props;\n    const {\n      location: {\n        pathname: prevPathname\n      },\n      pageIdentifiers: prevPageIdentifiers,\n      pageIds: prevPageIds\n    } = prevProps;\n\n    if (pathname !== prevPathname || pageIds !== prevPageIds || pageIdentifiers !== prevPageIdentifiers) {\n      this.requestPage();\n    }\n  }\n\n  getRequestQueryParams() {\n    const {\n      location,\n      match,\n      pageIdentifiers: identifier,\n      pageIds: id\n    } = this.props;\n\n    if (identifier) {\n      return {\n        identifier\n      };\n    }\n\n    if (id !== -1) {\n      return {\n        id\n      };\n    }\n\n    const urlKey = getUrlParam(match, location);\n    return {\n      identifier: urlKey\n    };\n  }\n\n  requestPage() {\n    var _this2 = this;\n\n    const params = this.getRequestQueryParams();\n    const {\n      id,\n      identifier\n    } = params;\n\n    if (!id && !identifier) {\n      return;\n    }\n\n    this.setState({\n      isLoading: true\n    });\n    this.fetchData([CmsPageQuery.getQuery(params)], this.onPageLoad, function () {\n      return _this2.setState({\n        isLoading: false\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_checkBEM(React, CmsPage, Object.assign({}, this.props, this.state, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}, _class.propTypes = {\n  match: MatchType.isRequired,\n  setHeaderState: PropTypes.func.isRequired,\n  updateBreadcrumbs: PropTypes.func.isRequired,\n  setBigOfflineNotice: PropTypes.func.isRequired,\n  location: LocationType.isRequired,\n  toggleBreadcrumbs: PropTypes.func.isRequired,\n  pageIds: PropTypes.number,\n  pageIdentifiers: PropTypes.string,\n  isOnlyPlaceholder: PropTypes.bool,\n  isBreadcrumbsActive: PropTypes.bool\n}, _class.defaultProps = {\n  pageIds: -1,\n  pageIdentifiers: '',\n  isOnlyPlaceholder: false,\n  isBreadcrumbsActive: true\n}, _temp), \"Route/CmsPage/Container\");\nexport default connect(mapStateToProps, mapDispatchToProps)(CmsPageContainer);","map":{"version":3,"sources":["/home/arturs/scandiweb/scandipwa/node_modules/@scandipwa/scandipwa/src/route/CmsPage/CmsPage.container.js"],"names":["PropTypes","connect","CMS_PAGE","CmsPageQuery","toggleBreadcrumbs","updateMeta","changeNavigationState","TOP_NAVIGATION_TYPE","setBigOfflineNotice","LocationType","MatchType","history","debounce","DataContainer","appendWithStoreCode","getUrlParam","CmsPage","LOADING_TIME","BreadcrumbsDispatcher","mapStateToProps","state","isOffline","OfflineReducer","mapDispatchToProps","dispatch","updateBreadcrumbs","breadcrumbs","then","default","dispatcher","updateWithCmsPage","setHeaderState","stateName","isBig","meta","isActive","update","page","isLoading","isPageLoaded","setOfflineNoticeSize","props","onPageLoad","cmsPage","location","pathname","content_heading","meta_title","title","meta_description","meta_keywords","description","keywords","canonical_url","window","href","name","onBackClick","goBack","setState","__construct","isBreadcrumbsActive","componentDidMount","isOnlyPlaceholder","scrollTo","requestPage","componentDidUpdate","prevProps","pageIdentifiers","pageIds","prevPathname","prevPageIdentifiers","prevPageIds","getRequestQueryParams","match","identifier","id","urlKey","params","fetchData","getQuery","render","propTypes","isRequired","func","number","string","bool","defaultProps","CmsPageContainer"],"mappings":"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","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { CMS_PAGE } from 'Component/Header/Header.config';\nimport CmsPageQuery from 'Query/CmsPage.query';\nimport { toggleBreadcrumbs } from 'Store/Breadcrumbs/Breadcrumbs.action';\nimport { updateMeta } from 'Store/Meta/Meta.action';\nimport { changeNavigationState } from 'Store/Navigation/Navigation.action';\nimport { TOP_NAVIGATION_TYPE } from 'Store/Navigation/Navigation.reducer';\nimport { setBigOfflineNotice } from 'Store/Offline/Offline.action';\nimport { LocationType, MatchType } from 'Type/Common';\nimport history from 'Util/History';\nimport { debounce } from 'Util/Request';\nimport DataContainer from 'Util/Request/DataContainer';\nimport { appendWithStoreCode, getUrlParam } from 'Util/Url';\n\nimport CmsPage from './CmsPage.component';\nimport { LOADING_TIME } from './CmsPage.config';\n\nexport const BreadcrumbsDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Breadcrumbs/Breadcrumbs.dispatcher'\n);\n\n/** @namespace Route/CmsPage/Container/mapStateToProps */\nexport const mapStateToProps = (state) => ({\n    isOffline: state.OfflineReducer.isOffline\n});\n\n/** @namespace Route/CmsPage/Container/mapDispatchToProps */\nexport const mapDispatchToProps = (dispatch) => ({\n    updateBreadcrumbs: (breadcrumbs) => BreadcrumbsDispatcher.then(\n        ({ default: dispatcher }) => dispatcher.updateWithCmsPage(breadcrumbs, dispatch)\n    ),\n    setHeaderState: (stateName) => dispatch(changeNavigationState(TOP_NAVIGATION_TYPE, stateName)),\n    setBigOfflineNotice: (isBig) => dispatch(setBigOfflineNotice(isBig)),\n    updateMeta: (meta) => dispatch(updateMeta(meta)),\n    toggleBreadcrumbs: (isActive) => {\n        BreadcrumbsDispatcher.then(\n            ({ default: dispatcher }) => dispatcher.update([], dispatch)\n        );\n        dispatch(toggleBreadcrumbs(isActive));\n    }\n});\n\n/** @namespace Route/CmsPage/Container */\nexport class CmsPageContainer extends DataContainer {\n    static propTypes = {\n        match: MatchType.isRequired,\n        setHeaderState: PropTypes.func.isRequired,\n        updateBreadcrumbs: PropTypes.func.isRequired,\n        setBigOfflineNotice: PropTypes.func.isRequired,\n        location: LocationType.isRequired,\n        toggleBreadcrumbs: PropTypes.func.isRequired,\n        pageIds: PropTypes.number,\n        pageIdentifiers: PropTypes.string,\n        isOnlyPlaceholder: PropTypes.bool,\n        isBreadcrumbsActive: PropTypes.bool\n    };\n\n    static defaultProps = {\n        pageIds: -1,\n        pageIdentifiers: '',\n        isOnlyPlaceholder: false,\n        isBreadcrumbsActive: true\n    };\n\n    state = {\n        page: {},\n        isLoading: true,\n        isPageLoaded: false\n    };\n\n    __construct(props) {\n        super.__construct(props);\n\n        this.updateBreadcrumbs();\n    }\n\n    updateBreadcrumbs() {\n        const {\n            toggleBreadcrumbs,\n            isBreadcrumbsActive\n        } = this.props;\n\n        toggleBreadcrumbs(isBreadcrumbsActive);\n    }\n\n    componentDidMount() {\n        const {\n            isOffline,\n            isOnlyPlaceholder\n        } = this.props;\n\n        window.scrollTo(0, 0);\n\n        const { isLoading } = this.state;\n\n        if (isOffline && isLoading) {\n            debounce(this.setOfflineNoticeSize, LOADING_TIME)();\n        }\n\n        if (!isOnlyPlaceholder) {\n            this.requestPage();\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        const {\n            location: { pathname },\n            pageIdentifiers,\n            pageIds\n        } = this.props;\n\n        const {\n            location: { pathname: prevPathname },\n            pageIdentifiers: prevPageIdentifiers,\n            pageIds: prevPageIds\n        } = prevProps;\n\n        if (\n            pathname !== prevPathname\n            || pageIds !== prevPageIds\n            || pageIdentifiers !== prevPageIdentifiers\n        ) {\n            this.requestPage();\n        }\n    }\n\n    setOfflineNoticeSize = () => {\n        const { setBigOfflineNotice } = this.props;\n        const { isLoading } = this.state;\n\n        if (isLoading) {\n            setBigOfflineNotice(true);\n        } else {\n            setBigOfflineNotice(false);\n        }\n    };\n\n    onPageLoad = ({ cmsPage: page }) => {\n        const {\n            location: { pathname },\n            updateMeta,\n            setHeaderState,\n            updateBreadcrumbs\n        } = this.props;\n\n        const {\n            content_heading,\n            meta_title,\n            title,\n            meta_description,\n            meta_keywords\n        } = page;\n\n        debounce(this.setOfflineNoticeSize, LOADING_TIME)();\n\n        updateBreadcrumbs(page);\n        updateMeta({\n            title: meta_title || title,\n            description: meta_description,\n            keywords: meta_keywords,\n            canonical_url: window.location.href\n        });\n\n        if (\n            pathname !== appendWithStoreCode('/')\n            && pathname !== '/'\n        ) {\n            setHeaderState({\n                name: CMS_PAGE,\n                title: content_heading,\n                onBackClick: () => history.goBack()\n            });\n        }\n\n        this.setState({ page, isLoading: false, isPageLoaded: true });\n    };\n\n    getRequestQueryParams() {\n        const {\n            location,\n            match,\n            pageIdentifiers: identifier,\n            pageIds: id\n        } = this.props;\n\n        if (identifier) {\n            return { identifier };\n        }\n\n        if (id !== -1) {\n            return { id };\n        }\n\n        const urlKey = getUrlParam(match, location);\n\n        return {\n            identifier: urlKey\n        };\n    }\n\n    requestPage() {\n        const params = this.getRequestQueryParams();\n        const { id, identifier } = params;\n\n        if (!id && !identifier) {\n            return;\n        }\n\n        this.setState({ isLoading: true });\n\n        this.fetchData(\n            [CmsPageQuery.getQuery(params)],\n            this.onPageLoad,\n            () => this.setState({ isLoading: false })\n        );\n    }\n\n    render() {\n        return (\n            <CmsPage\n              { ...this.props }\n              { ...this.state }\n            />\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CmsPageContainer);\n"]},"metadata":{},"sourceType":"module"}