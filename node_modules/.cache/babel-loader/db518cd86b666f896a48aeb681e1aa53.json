{"ast":null,"code":"/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport { PureComponent } from 'react';\nimport { makeCancelable } from \"/home/arturs/scandiweb/extension/src/util/Promise\";\nimport { prepareQuery } from \"/home/arturs/scandiweb/extension/src/util/Query\";\nimport { executeGet } from \"/home/arturs/scandiweb/extension/src/util/Request\";\nimport { hash } from \"/home/arturs/scandiweb/extension/src/util/Request/Hash\";\nimport { ONE_MONTH_IN_SECONDS } from \"./QueryDispatcher\";\n/** #namespace Util/Request/DataContainer */\n\nexport const DataContainer = Mosaic.middleware(class DataContainer_ extends Mosaic.Extensible(PureComponent) {\n  constructor(...args) {\n    super(...args);\n    this.dataModelName = 'DataContainer';\n  }\n\n  componentWillUnmount() {\n    if (this.promise) {\n      this.promise.cancel();\n    }\n  }\n\n  fetchData(rawQueries, onSucces = function () {}, onError = function () {}) {\n    const preparedQuery = prepareQuery(rawQueries);\n    const {\n      query,\n      variables\n    } = preparedQuery;\n    const queryHash = hash(query + JSON.stringify(variables));\n\n    if (!window.dataCache) {\n      window.dataCache = {};\n    }\n\n    if (window.dataCache[queryHash]) {\n      onSucces(window.dataCache[queryHash]);\n      return;\n    }\n\n    this.promise = makeCancelable(executeGet(preparedQuery, this.dataModelName, ONE_MONTH_IN_SECONDS));\n    this.promise.promise.then(\n    /** #namespace Util/Request/DataContainer/fetchData/thisPromisePromiseThen */\n    Mosaic.middleware(function (response) {\n      window.dataCache[queryHash] = response;\n      onSucces(response);\n    }, \"Util/Request/DataContainer/fetchData/thisPromisePromiseThen\"),\n    /** #namespace Util/Request/DataContainer/fetchData/thisPromisePromiseCatch */\n    Mosaic.middleware(function (err) {\n      return onError(err);\n    }, \"Util/Request/DataContainer/fetchData/thisPromisePromiseCatch\"));\n  }\n\n}, \"Util/Request/DataContainer\");\nexport default DataContainer;","map":{"version":3,"sources":["/home/arturs/scandiweb/extension/node_modules/@scandipwa/scandipwa/src/util/Request/DataContainer.js"],"names":["PureComponent","makeCancelable","prepareQuery","executeGet","hash","ONE_MONTH_IN_SECONDS","dataModelName","componentWillUnmount","promise","cancel","fetchData","rawQueries","onSucces","onError","preparedQuery","query","variables","queryHash","JSON","stringify","window","dataCache","then","response","err","DataContainer"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,aAAT,QAA8B,OAA9B;AAEA,SAASC,cAAT;AACA,SAASC,YAAT;AACA,SAASC,UAAT;AACA,SAASC,IAAT;AAEA,SAASC,oBAAT;AAEA;;AACA,8FAAmCL,aAAnC,EAAiD;AAAA;AAAA;AAAA,SAC7CM,aAD6C,GAC7B,eAD6B;AAAA;;AAG7CC,EAAAA,oBAAoB,GAAG;AACnB,QAAI,KAAKC,OAAT,EAAkB;AACd,WAAKA,OAAL,CAAaC,MAAb;AACH;AACJ;;AAEDC,EAAAA,SAAS,CAACC,UAAD,EAAaC,QAAQ,GAAG,YAAM,CAAE,CAAhC,EAAkCC,OAAO,GAAG,YAAM,CAAE,CAApD,EAAsD;AAC3D,UAAMC,aAAa,GAAGZ,YAAY,CAACS,UAAD,CAAlC;AACA,UAAM;AAAEI,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAuBF,aAA7B;AACA,UAAMG,SAAS,GAAGb,IAAI,CAACW,KAAK,GAAGG,IAAI,CAACC,SAAL,CAAeH,SAAf,CAAT,CAAtB;;AAEA,QAAI,CAACI,MAAM,CAACC,SAAZ,EAAuB;AACnBD,MAAAA,MAAM,CAACC,SAAP,GAAmB,EAAnB;AACH;;AAED,QAAID,MAAM,CAACC,SAAP,CAAiBJ,SAAjB,CAAJ,EAAiC;AAC7BL,MAAAA,QAAQ,CAACQ,MAAM,CAACC,SAAP,CAAiBJ,SAAjB,CAAD,CAAR;AACA;AACH;;AAED,SAAKT,OAAL,GAAeP,cAAc,CACzBE,UAAU,CAACW,aAAD,EAAgB,KAAKR,aAArB,EAAoCD,oBAApC,CADe,CAA7B;AAIA,SAAKG,OAAL,CAAaA,OAAb,CAAqBc,IAArB;AACI;AADJ,sBAEI,UAACC,QAAD,EAAc;AACVH,MAAAA,MAAM,CAACC,SAAP,CAAiBJ,SAAjB,IAA8BM,QAA9B;AACAX,MAAAA,QAAQ,CAACW,QAAD,CAAR;AACH,KALL;AAMI;AANJ,sBAOI,UAACC,GAAD;AAAA,aAASX,OAAO,CAACW,GAAD,CAAhB;AAAA,KAPJ;AASH;;AApC4C,CAAjD;AAuCA,eAAeC,aAAf","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport { PureComponent } from 'react';\n\nimport { makeCancelable } from 'Util/Promise';\nimport { prepareQuery } from 'Util/Query';\nimport { executeGet } from 'Util/Request';\nimport { hash } from 'Util/Request/Hash';\n\nimport { ONE_MONTH_IN_SECONDS } from './QueryDispatcher';\n\n/** @namespace Util/Request/DataContainer */\nexport class DataContainer extends PureComponent {\n    dataModelName = 'DataContainer';\n\n    componentWillUnmount() {\n        if (this.promise) {\n            this.promise.cancel();\n        }\n    }\n\n    fetchData(rawQueries, onSucces = () => {}, onError = () => {}) {\n        const preparedQuery = prepareQuery(rawQueries);\n        const { query, variables } = preparedQuery;\n        const queryHash = hash(query + JSON.stringify(variables));\n\n        if (!window.dataCache) {\n            window.dataCache = {};\n        }\n\n        if (window.dataCache[queryHash]) {\n            onSucces(window.dataCache[queryHash]);\n            return;\n        }\n\n        this.promise = makeCancelable(\n            executeGet(preparedQuery, this.dataModelName, ONE_MONTH_IN_SECONDS)\n        );\n\n        this.promise.promise.then(\n            /** @namespace Util/Request/DataContainer/fetchData/thisPromisePromiseThen */\n            (response) => {\n                window.dataCache[queryHash] = response;\n                onSucces(response);\n            },\n            /** @namespace Util/Request/DataContainer/fetchData/thisPromisePromiseCatch */\n            (err) => onError(err)\n        );\n    }\n}\n\nexport default DataContainer;\n"]},"metadata":{},"sourceType":"module"}